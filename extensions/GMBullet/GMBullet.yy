{
  "resourceType": "GMExtension",
  "resourceVersion": "1.2",
  "name": "GMBullet",
  "androidactivityinject": "",
  "androidclassname": "",
  "androidcodeinjection": "",
  "androidinject": "",
  "androidmanifestinject": "",
  "androidPermissions": [],
  "androidProps": false,
  "androidsourcedir": "",
  "author": "",
  "classname": "",
  "copyToTargets": 66,
  "date": "2023-01-31T19:31:44.687619+01:00",
  "description": "",
  "exportToGame": true,
  "extensionVersion": "1.0.0",
  "files": [
    {"resourceType":"GMExtensionFile","resourceVersion":"1.0","name":"","constants":[],"copyToTargets":66,"filename":"libGMBullet.dylib","final":"","functions":[
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_create","argCount":0,"args":[],"documentation":"/// @func btBoxShape_create(halfExtents)\n///\n/// @desc\n/// Creates a box shape with the specified half extents.\n///\n/// @param {Pointer} halfExtents\n///     A pointer to a btVector3 representing the half extents of the box.\n///\n/// @return {Pointer} A pointer to the newly created btBoxShape instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_createXYZ","argCount":0,"args":[],"documentation":"/// @func btBoxShape_createXYZ(halfExtentX, halfExtentY, halfExtentZ)\n///\n/// @desc\n/// Creates a box shape with the specified half extents in the X, Y, and Z\n/// dimensions.\n///\n/// @param {Real} halfExtentX\n///     The half extent along the X-axis.\n/// @param {Real} halfExtentY\n///     The half extent along the Y-axis.\n/// @param {Real} halfExtentZ\n///     The half extent along the Z-axis.\n///\n/// @return {Pointer} A pointer to the newly created btBoxShape instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_destroy","argCount":0,"args":[],"documentation":"/// @func btBoxShape_destroy(boxShape)\n///\n/// @desc\n/// Destroys a box collision shape.\n///\n/// @param {Pointer} boxShape\n///     A pointer to the btBoxShape to destroy.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionDispatcher_create","argCount":0,"args":[],"documentation":"/// @func btCollisionDispatcher_create(collisionConfiguration)\n///\n/// @desc\n/// Creates a collision dispatcher using the specified collision configuration.\n///\n/// @param {Pointer} collisionConfiguration\n///     The collision configuration to use for the collision dispatcher.\n///\n/// @return {Pointer}\n///     A pointer to the created collision dispatcher.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionDispatcher_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionDispatcher_destroy(collisionDispatcher)\n///\n/// @desc\n/// This function is used to release the memory associated with a\n/// btCollisionDispatcher object.\n///\n/// @param {Pointer} collisionDispatcher\n///     A pointer to a btCollisionDispatcher instance that needs to be destroyed.\n///     This should be a valid pointer to an existing btCollisionDispatcher\n///     object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_create","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_create()\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics collision object.\n///\n/// @return {Pointer} Returns a pointer to the newly created instance of\n/// btCollisionObject.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_destroy(collisionObject)\n///\n/// @desc\n/// Destroys a Bullet Physics collision object and releases associated memory.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getAnisotropicFriction(collisionObject, outVector3)\n///\n/// @desc\n/// Gets the anisotropic friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance to store the anisotropic friction\n///     values.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setAnisotropicFriction(collisionObject, anisotropicFriction[, frictionMode])\n///\n/// @desc\n/// Sets the anisotropic friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} anisotropicFriction\n///     A pointer to a btVector3 instance representing the anisotropic friction\n///     values.\n/// @param {Real} [frictionMode]\n///     An integer representing the friction mode. Default is 1.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_hasAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_hasAnisotropicFriction(collisionObject[, frictionMode])\n///\n/// @desc\n/// Checks if a Bullet Physics collision object has anisotropic friction set.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} [frictionMode]\n///     An integer representing the friction mode. Default is 1.\n///\n/// @return {Bool} A boolean value indicating whether the collision object has\n/// anisotropic friction.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setContactProcessingThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setContactProcessingThreshold(collisionObject, contactProcessingThreshold)\n///\n/// @desc\n/// Sets the contact processing threshold for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} contactProcessingThreshold\n///     The contact processing threshold to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactProcessingThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactProcessingThreshold(collisionObject)\n///\n/// @desc\n/// Gets the contact processing threshold for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact processing threshold of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isStaticObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isStaticObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is a static object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// static.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isKinematicObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isKinematicObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is a kinematic object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// kinematic.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isStaticOrKinematicObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isStaticOrKinematicObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is either static or kinematic.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// static or kinematic.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_hasContactResponse","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_hasContactResponse(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object has a contact response.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object has a\n/// contact response.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCollisionShape","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCollisionShape(collisionObject, collisionShape)\n///\n/// @desc\n/// Sets the collision shape for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} collisionShape\n///     A pointer to a btCollisionShape instance representing the collision\n///     shape.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCollisionShape","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCollisionShape(collisionObject)\n///\n/// @desc\n/// Gets the collision shape for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer} A pointer to the collision shape associated with the\n/// collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setIgnoreCollisionCheck","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setIgnoreCollisionCheck(collisionObject, otherObject, ignoreCollisionCheck)\n///\n/// @desc\n/// Sets whether collision checking should be ignored between two collision\n/// objects.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to another btCollisionObject instance to be checked for\n///     collision.\n/// @param {Bool} ignoreCollisionCheck\n///     A boolean value indicating whether to ignore collision checking between\n///     the objects.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getNumObjectsWithoutCollision","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getNumObjectsWithoutCollision(collisionObject)\n///\n/// @desc\n/// Gets the number of objects without collision associated with a collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The number of objects without collision associated with the\n/// collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getObjectWithoutCollision","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getObjectWithoutCollision(collisionObject, index)\n///\n/// @desc\n/// Gets an object without collision associated with a collision object by index.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} index\n///     The index of the object without collision to retrieve.\n///\n/// @return {Pointer} A pointer to the object without collision at the specified\n/// index.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_checkCollideWithOverride","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_checkCollideWithOverride(collisionObject, otherObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object should collide with another\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to another btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether collisionObject should\n/// collide with otherObject.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getActivationState(collisionObject)\n///\n/// @desc\n/// Gets the activation state of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The activation state of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setActivationState(collisionObject, newState)\n///\n/// @desc\n/// Sets the activation state for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} newState\n///     The new activation state to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setDeactivationTime","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setDeactivationTime(collisionObject, time)\n///\n/// @desc\n/// Sets the deactivation time for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} time\n///     The deactivation time to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getDeactivationTime","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getDeactivationTime(collisionObject)\n///\n/// @desc\n/// Gets the deactivation time of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The deactivation time of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_forceActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_forceActivationState(collisionObject, newState)\n///\n/// @desc\n/// Forces a specific activation state for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} newState\n///     The new activation state to be forced for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_activate","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_activate(collisionObject[, forceActivation])\n///\n/// @desc\n/// Activates a Bullet Physics collision object, optionally with forced\n/// activation.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Bool} [forceActivation]\n///     A boolean indicating whether to force activation. Default is false.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isActive","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isActive(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is currently active.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// currently active.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setRestitution","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setRestitution(collisionObject, restitution)\n///\n/// @desc\n/// Sets the restitution for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} restitution\n///     The restitution to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getRestitution","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getRestitution(collisionObject)\n///\n/// @desc\n/// Gets the restitution of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The restitution of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The friction to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getFriction(collisionObject)\n///\n/// @desc\n/// Gets the friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The friction of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setRollingFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setRollingFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the rolling friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The rolling friction to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getRollingFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getRollingFriction(collisionObject)\n///\n/// @desc\n/// Gets the rolling friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The rolling friction of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setSpinningFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setSpinningFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the spinning friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The spinning friction to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getSpinningFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getSpinningFriction(collisionObject)\n///\n/// @desc\n/// Gets the spinning friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The spinning friction of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setContactStiffnessAndDamping","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setContactStiffnessAndDamping(collisionObject, stiffness, damping)\n///\n/// @desc\n/// Sets the contact stiffness and damping for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} stiffness\n///     The contact stiffness to be set for the collision object.\n/// @param {Real} damping\n///     The contact damping to be set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactStiffness","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactStiffness(collisionObject)\n///\n/// @desc\n/// Gets the contact stiffness of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact stiffness of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactDamping","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactDamping(collisionObject)\n///\n/// @desc\n/// Gets the contact damping of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact damping of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getWorldTransform(collisionObject)\n///\n/// @desc\n/// Gets the world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer} A pointer to the world transform of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getWorldTransformMatrix","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getWorldTransformMatrix(collisionObject, outMatrix)\n///\n/// @desc\n/// Gets the world transform as a 4x4 matrix of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Array<Real>} outMatrix\n///     An array to store the 4x4 matrix representing the world transform.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setWorldTransform(collisionObject, transform)\n///\n/// @desc\n/// Sets the world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} transform\n///     A pointer to the btTransform that represents the new world transform.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationWorldTransform(collisionObject)\n///\n/// @desc\n/// Gets the interpolation world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer}\n///     A pointer to the interpolation world transform of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationWorldTransform(collisionObject, transform)\n///\n/// @desc\n/// Sets the interpolation world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} transform\n///     A pointer to the btTransform that represents the new interpolation world\n///     transform.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationLinearVelocity(collisionObject, linearVelocity)\n///\n/// @desc\n/// Sets the interpolation linear velocity of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} linearVelocity\n///     A pointer to a btVector3 representing the new interpolation linear\n///     velocity.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationAngularVelocity(collisionObject, angularVelocity)\n///\n/// @desc\n/// Sets the interpolation angular velocity of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} angularVelocity\n///     A pointer to a btVector3 representing the new interpolation angular\n///     velocity.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationLinearVelocity(collisionObject, outVec3)\n///\n/// @desc\n/// Retrieves the interpolation linear velocity of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVec3\n///     A pointer to a btVector3 where the interpolation linear velocity will be\n///     copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationAngularVelocity(collisionObject, outVec3)\n///\n/// @desc\n/// Retrieves the interpolation angular velocity of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVec3\n///     A pointer to a btVector3 where the interpolation angular velocity will\n///     be copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getHitFraction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getHitFraction(collisionObject)\n///\n/// @desc\n///\n/// @param {Pointer} collisionObject\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setHitFraction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setHitFraction(collisionObject, hitFraction)\n///\n/// @desc\n///\n/// @param {Pointer} collisionObject\n/// @param {Real} hitFraction\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCollisionFlags","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCollisionFlags(collisionObject)\n///\n/// @desc\n/// Retrieves the hit fraction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The hit fraction of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCollisionFlags","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCollisionFlags(collisionObject, flags)\n///\n/// @desc\n/// Sets the hit fraction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} hitFraction\n///     The hit fraction to set for the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdSweptSphereRadius","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdSweptSphereRadius(collisionObject)\n///\n/// @desc\n///\n/// @param {Pointer} collisionObject\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCcdSweptSphereRadius","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCcdSweptSphereRadius(collisionObject, radius)\n///\n/// @desc\n/// Retrieves the Continuous Collision Detection (CCD) swept sphere radius of a\n/// Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The CCD swept sphere radius of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdMotionThreshold(collisionObject)\n///\n/// @desc\n/// Sets the Continuous Collision Detection (CCD) swept sphere radius for a\n/// Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} radius\n///     The radius of the swept sphere for CCD.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdSquareMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdSquareMotionThreshold(collisionObject)\n///\n/// @desc\n/// Retrieves the squared motion threshold for Continuous Collision Detection\n/// (CCD) of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real}\n///     The squared motion threshold for CCD of the collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCcdMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCcdMotionThreshold(collisionObject, ccdMotionThreshold)\n///\n/// @desc\n/// Sets the motion threshold for Continuous Collision Detection (CCD) of a\n/// Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} ccdMotionThreshold\n///     The motion threshold for CCD. When the motion (squared velocity) of the\n///     object exceeds this threshold, CCD is triggered.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_checkCollideWith","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_checkCollideWith(collisionObject, otherObject)\n///\n/// @desc\n/// Checks if the specified collision object can collide with another collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to the other btCollisionObject instance to check for collision.\n///\n/// @return {Bool} Returns true if the collisionObject can collide with the\n/// otherObject, false otherwise.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_destroy(collisionShape)\n///\n/// @desc\n/// Destroys a Bullet physics collision shape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape instance to destroy.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_calculateLocalInertia","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_calculateLocalInertia(collisionShape, mass, outVector3)\n///\n/// @desc\n/// Calculates the local inertia of the collision shape given a mass.\n///\n/// @param {Pointer} collisionShape\n///     The collision shape for which to calculate local inertia.\n/// @param {Real} mass\n///     The mass of the object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the calculated local inertia will be\n///     stored.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_create","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_create(dispatcher, pairCache, collisionConfiguration)\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics collision world.\n///\n/// @param {Pointer} dispatcher\n///     A pointer to a btDispatcher object, responsible for managing collision\n///     dispatch.\n/// @param {Pointer} pairCache\n///     A pointer to a btBroadphaseInterface object, representing the\n///     broad-phase collision detection.\n/// @param {Pointer} collisionConfiguration\n///     A pointer to a btCollisionConfiguration object, defining collision\n///     behavior and algorithms.\n///\n/// @return {Pointer} A pointer to the newly created btCollisionWorld instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_destroy(collisionWorld)\n///\n/// @desc\n/// This function destroys a btCollisionWorld instance, releasing the associated\n/// memory.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_setBroadphase","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_setBroadphase(collisionWorld, pairCache)\n///\n/// @desc\n/// Sets the broadphase interface for a given btCollisionWorld instance. The\n/// broadphase is used for the initial overlapping pairs determination in the\n/// collision detection system.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the broadphase\n///     interface will be set. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n/// @param {Pointer} pairCache\n///     A pointer to the btBroadphaseInterface instance that will serve as the\n///     broadphase for the collision world. It should be a valid pointer to an\n///     existing btBroadphaseInterface instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getBroadphase","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getBroadphase(collisionWorld)\n///\n/// @desc\n/// Retrieves the broadphase interface associated with a given btCollisionWorld\n/// instance.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the broadphase\n///     interface will be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the btBroadphaseInterface instance associated\n/// with the specified collisionWorld.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getPairCache","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getPairCache(collisionWorld)\n///\n/// @desc\n/// Retrieves the pair cache associated with a given btCollisionWorld instance.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the pair cache will\n///     be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the pair cache\n/// (e.g., btHashedOverlappingPairCache) associated with the specified\n/// collisionWorld.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getDispatcher","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getDispatcher(collisionWorld)\n///\n/// @desc\n/// Retrieves the dispatcher associated with a given btCollisionWorld instance.\n/// The dispatcher is responsible for processing collision events and sending\n/// them to appropriate collision algorithms.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the dispatcher will\n///     be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the dispatcher (e.g., btDispatcher)\n/// associated with the specified collisionWorld.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_updateSingleAabb","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_updateSingleAabb(collisionWorld, collisionObject)\n///\n/// @desc\n/// Updates the axis-aligned bounding box (AABB) of a single collision object in\n/// the btCollisionWorld. This is typically done to reflect changes in the\n/// object's position or shape before performing collision detection.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance in which the collision object\n///     is present. It should be a valid pointer to an existing btCollisionWorld\n///     instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject instance for which the AABB will be\n///     updated. It should be a valid pointer to an existing btCollisionObject\n///     instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_updateAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_updateAabbs(collisionWorld)\n///\n/// @desc\n/// Updates the axis-aligned bounding boxes (AABBs) of all collision objects in\n/// the btCollisionWorld. This is typically done to reflect changes in the\n/// objects' positions or shapes before performing collision detection.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance in which the collision\n///     objects are present. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_computeOverlappingPairs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_computeOverlappingPairs(collisionWorld)\n///\n/// @desc\n/// Computes and updates the list of overlapping pairs of collision objects in\n/// the btCollisionWorld. This function is typically called to determine which\n/// pairs of objects are colliding or intersecting.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which overlapping pairs\n///     will be computed. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_destroy(rayResultCallback)\n///\n/// @desc\n/// Destroys a btRayResultCallback instance, releasing the associated memory.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getClosestHitFraction","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getClosestHitFraction(rayResultCallback)\n///\n/// @desc\n/// Gets the closest hit fraction from a btRayResultCallback instance. The\n/// closest hit fraction is a value between 0 and 1 representing the fractional\n/// distance along the ray where the hit occurred. A value of 1 means no hit,\n/// and a value of 0 means the hit occurred at the origin of the ray.\n///\n/// @param {Pointer} rayResultCallback\n///      A pointer to the btRayResultCallback instance from which to get the\n///      closest hit fraction. It should be a valid pointer to an existing\n///      btRayResultCallback instance.\n///\n///\n/// @return {Real} The closest hit fraction (a value between 0 and 1) from the\n/// rayResultCallback instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionObject","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionObject(rayResultCallback)\n///\n/// @desc\n/// Gets the collision object associated with a btRayResultCallback instance.\n///\n/// @param {Pointer} rayResultCallback\n///      A pointer to the btRayResultCallback instance from which to get the\n///      collision object. It should be a valid pointer to an existing\n///      btRayResultCallback instance.\n///\n/// @return {Pointer} A pointer to the btCollisionObject associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionFilterGroup(rayResultCallback)\n///\n/// @desc\n/// Gets the collision filter group associated with a btRayResultCallback\n/// instance. The collision filter group is a user-defined grouping used to\n/// filter collisions.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance from which to get the\n///     collision filter group. It should be a valid pointer to an existing\n///     btRayResultCallback instance.\n///\n/// @return {Real} The collision filter group associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_setCollisionFilterGroup(rayResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for a btRayResultCallback instance. The\n/// collision filter group is a user-defined grouping used to filter collisions.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance for which the collision\n///     filter group will be set. It should be a valid pointer to an existing\n///     btRayResultCallback instance.\n/// @param {Real} collisionFilterGroup\n///     The collision filter group to set for the rayResultCallback instance.\n///     This value determines how objects will filter collisions.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionFilterMask(rayResultCallback)\n///\n/// @desc\n/// Gets the collision filter mask associated with a btRayResultCallback\n/// instance.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance from which to get the\n///     collision filter mask.\n///\n/// @return {Real} The collision filter mask associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_setCollisionFilterMask(rayResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for a btRayResultCallback instance.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance for which the collision\n///     filter mask will be set.\n/// @param {Real} collisionFilterMask\n///     The collision filter mask to set for the rayResultCallback instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_hasHit","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_hasHit(rayResultCallback)\n///\n/// @desc\n/// Checks whether the ray result callback has hit any object.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance to check for hits.\n///\n/// @return {Bool} True if the ray result callback has hit an object, false\n/// otherwise.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_create(rayFromWorld, rayToWorld)\n///\n/// @desc\n/// Creates a btClosestRayResultCallback instance with the specified ray\n/// parameters.\n///\n/// @param {Pointer} rayFromWorld\n///     A pointer to a btVector3 representing the starting point of the ray in\n///     world coordinates.\n/// @param {Pointer} rayToWorld\n///     A pointer to a btVector3 representing the end point of the ray in world\n///     coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestRayResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)\n///\n/// @desc\n/// Creates a btClosestRayResultCallback instance with the specified ray\n/// parameters.\n///\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestRayResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_destroy(closestRayResultCallback)\n///\n/// @desc\n/// Destroys a btClosestRayResultCallback instance, releasing the associated\n/// memory.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayFromWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayFromWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the starting point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the starting point of the ray.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the starting point of the ray will be\n///     copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayFromWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayFromWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the starting point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the starting point of the ray.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the starting\n///     point of the ray.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayToWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayToWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the end point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the end point of the ray.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the end point of the ray will be copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayToWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayToWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the end point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the end point of the ray.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the end\n///     point of the ray.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitNormalWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the normal of the hit point in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit normal.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the hit normal will be copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitNormalWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the normal of the hit point in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit normal.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the hit\n///     normal.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitPointWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the hit point in world coordinates from a btClosestRayResultCallback\n/// instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit point.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the hit point will be copied.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitPointWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the hit point in world coordinates from a btClosestRayResultCallback\n/// instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit point.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the hit\n///     point.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_create(rayFromWorld, rayToWorld)\n///\n/// @desc\n/// Creates a new instance of btAllHitsRayResultCallback with specified ray\n/// start and end points.\n///\n/// @param {Pointer} rayFromWorld\n///     A pointer to the starting point of the ray in world coordinates.\n/// @param {Pointer} rayToWorld\n///     A pointer to the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btAllHitsRayResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)\n///\n/// @desc\n/// Creates a new instance of btAllHitsRayResultCallback with specified ray\n/// start and end points.\n///\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btAllHitsRayResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_destroy(allHitsRayResultCallback)\n///\n/// @desc\n/// Destroys a btAllHitsRayResultCallback instance and frees its associated\n/// memory.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getCollisionObjects","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getCollisionObjects(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of collision objects from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve collision objects.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to collision objects.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitNormalWorld(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit normal vectors from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit normal vectors.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to hit normal vectors.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitNormalWorldArray(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit normal vectors (in XYZ order) from a\n/// btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit normal vectors.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit normal vectors in XYZ order.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitPointWorld(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit points from a btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit points.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to hit points.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitPointWorldArray(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit points (in XYZ order) from a\n/// btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit points.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit points in XYZ order.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitFractions","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitFractions(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit fractions from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit fractions.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit fractions.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_destroy(convexResultCallback)\n///\n/// @desc\n/// Destroys a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getClosestHitFraction","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getClosestHitFraction(convexResultCallback)\n///\n/// @desc\n/// Retrieves the closest hit fraction from a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the closest hit fraction.\n///\n/// @return {Real} A real value representing the fraction along the ray where\n/// the closest collision occurred.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getCollisionFilterGroup(convexResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter group from a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the collision filter group.\n///\n/// @return {Real} An integer representing the group used for collision\n/// filtering.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_setCollisionFilterGroup(convexResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance for which to set the\n///     collision filter group.\n/// @param {Real} collisionFilterGroup\n///     An integer used for collision filtering.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getCollisionFilterMask(convexResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter mask of a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the collision filter mask.\n///\n/// @return {Real} An integer representing collision filtering.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_setCollisionFilterMask(convexResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance for which to set the\n///     collision filter mask.\n/// @param {Real} collisionFilterMask\n///     An integer representing collision filtering.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_hasHit","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_hasHit(convexResultCallback)\n///\n/// @desc\n/// Checks if the convex result callback has hit an object during a collision\n/// test.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance to check for a hit.\n///\n/// @return {Bool} True if a hit occurred, false otherwise.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_create(convexFromWorld, convexToWorld)\n///\n/// @desc\n/// Creates a new btClosestConvexResultCallback instance with specified\n/// from-world and to-world vectors.\n///\n/// @param {Pointer} convexFromWorld\n///     A pointer to a btVector3 representing the starting point in world\n///    coordinates.\n/// @param {Pointer} convexToWorld\n///     A pointer to a btVector3 representing the end point in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestConvexResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_createXYZ(convexFromWorldX, convexFromWorldY, convexFromWorldZ, convexToWorldX, convexToWorldY, convexToWorldZ)\n///\n/// @desc\n/// Creates a new btClosestConvexResultCallback instance with specified\n/// from-world and to-world vectors.\n///\n/// @param {Real} convexFromWorldX\n///     The x-coordinate of the starting point in world coordinates.\n/// @param {Real} convexFromWorldY\n///     The y-coordinate of the starting point in world coordinates.\n/// @param {Real} convexFromWorldZ\n///     The z-coordinate of the starting point in world coordinates.\n/// @param {Real} convexToWorldX\n///     The x-coordinate of the end point in world coordinates.\n/// @param {Real} convexToWorldY\n///     The y-coordinate of the end point in world coordinates.\n/// @param {Real} convexToWorldZ\n///     The z-coordinate of the end point in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestConvexResultCallback\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_destroy(closestConvexResultCallback)\n///\n/// @desc\n/// Destroys a btClosestConvexResultCallback instance, releasing its allocated\n/// resources.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexFromWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexFromWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the `convexFromWorld` vector from a btClosestConvexResultCallback\n/// instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 that will receive the `convexFromWorld` vector.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexFromWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexFromWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the `convexFromWorld` vector from a btClosestConvexResultCallback\n/// instance and populates an array with its components.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the components of the `convexFromWorld`\n///     vector in the order [x, y, z].\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexToWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexToWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the `convexToWorld` vector from a btClosestConvexResultCallback\n/// instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the `convexToWorld` vector will\n///     be stored.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexToWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexToWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the `convexToWorld` vector from a btClosestConvexResultCallback\n/// instance and stores it in an array.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array to store the `convexToWorld` vector components in the order\n///     [x, y, z].\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitNormalWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the hit normal in world coordinates from a\n/// btClosestConvexResultCallback instance and stores it in a vector.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the hit normal will be stored.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitNormalWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the hit normal in world coordinates from a\n/// btClosestConvexResultCallback instance and stores it in an array.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array where the hit normal will be stored as [x, y, z] in world\n///     coordinates.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitPointWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the hit point in world coordinates from a\n/// btClosestConvexResultCallback instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the hit point will be stored in\n///     world coordinates.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitPointWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n///\n/// @param {Pointer} closestConvexResultCallback\n/// @param {Array<Real>} outArray\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitCollisionObject","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitCollisionObject(closestConvexResultCallback)\n///\n/// @desc\n/// Retrieves the hit point in world coordinates from a\n/// btClosestConvexResultCallback instance and populates an array with the x, y,\n/// and z components of the hit point.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array where the hit point components (x, y, z) will be stored.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_destroy(contactResultCallback)\n///\n/// @desc\n/// Destroys a contact result callback instance, releasing associated resources.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getCollisionFilterGroup(contactResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter group from the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The collision filter group associated with the contact result\n/// callback.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setCollisionFilterGroup(contactResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} collisionFilterGroup\n///     The collision filter group to set for the contact result callback.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getCollisionFilterMask(contactResultCallback)\n///\n/// @desc\n/// Gets the collision filter mask from the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The collision filter mask of the contact result callback.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setCollisionFilterMask(contactResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} collisionFilterMask\n///     The collision filter mask to set.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getClosestDistanceThreshold","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getClosestDistanceThreshold(contactResultCallback)\n///\n/// @desc\n/// Gets the closest distance threshold for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The closest distance threshold.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setClosestDistanceThreshold","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setClosestDistanceThreshold(contactResultCallback, closestDistanceThreshold)\n///\n/// @desc\n/// Sets the closest distance threshold for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} closestDistanceThreshold\n///     The closest distance threshold to set.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getNumCollisionObjects","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getNumCollisionObjects(collisionWorld)\n///\n/// @desc\n/// Gets the number of collision objects in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Real} The number of collision objects in the collision world.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_rayTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_rayTest(collisionWorld, rayFromWorld, rayToWorld, resultCallback)\n///\n/// @desc\n/// Performs a ray test in the collision world and collects the results using\n/// the provided result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} rayFromWorld\n///     A pointer to the starting point of the ray in world coordinates\n///     (btVector3).\n/// @param {Pointer} rayToWorld\n///     A pointer to the end point of the ray in world coordinates (btVector3).\n/// @param {Pointer} resultCallback\n///     A pointer to the ray result callback (btRayResultCallback) used to\n///     collect the results.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_rayTestXYZ","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_rayTestXYZ(collisionWorld, rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ, resultCallback)\n///\n/// @desc\n/// Performs a ray test in the collision world and collects the results using\n/// the provided result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n/// @param {Pointer} resultCallback\n///     A pointer to the ray result callback (btRayResultCallback) used to\n///     collect the results.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_convexSweepTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_convexSweepTest(collisionWorld, castShape, from, to, resultCallback[, allowedCcdPenetration])\n///\n/// @desc\n/// Performs a convex sweep test in the collision world using the specified cast\n/// shape and transforms, collecting the results using the provided result\n/// callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} castShape\n///     A pointer to the convex shape used for the sweep test.\n/// @param {Pointer} from\n///     A pointer to the starting transform for the sweep.\n/// @param {Pointer} to\n///     A pointer to the ending transform for the sweep.\n/// @param {Pointer} resultCallback\n///     A pointer to the convex result callback (btConvexResultCallback) used to\n///    collect the results.\n/// @param {Real} [allowedCcdPenetration]\n///     The allowed continuous collision detection (CCD) penetration. Defaults\n///     to 0.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_contactTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_contactTest(collisionWorld, colObj, resultCallback)\n///\n/// @desc\n/// Performs contact tests between a specific collision object and other objects\n/// in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} colObj\n///     A pointer to the collision object for which contacts are to be tested.\n/// @param {Pointer} resultCallback\n///     A pointer to the contact result callback object that will receive the\n///     contact information.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_contactPairTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_contactPairTest(collisionWorld, colObjA, colObjB, resultCallback)\n///\n/// @desc\n/// Performs a contact test in the collision world between the specified\n/// collision object and the objects in the world, collecting the results using\n/// the provided result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} colObj\n///     A pointer to the collision object for which contacts are being tested.\n/// @param {Pointer} resultCallback\n///     A pointer to the contact result callback (btContactResultCallback) used\n///     to collect the results.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_addCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_addCollisionObject(collisionWorld, collisionObject[, collisionFilterGroup[, collisionFilterMask]])\n///\n/// @desc\n/// Adds a collision object to the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object to be added.\n/// @param {Real} [collisionFilterGroup]\n///     The collision filter group for the collision object. Defaults to 1.\n/// @param {Real} [collisionFilterMask]\n///     The collision filter mask for the collision object. Defaults to -1.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_refreshBroadphaseProxy","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_refreshBroadphaseProxy(collisionWorld, collisionObject)\n///\n/// @desc\n/// Refreshes the broadphase proxy for a specific collision object in the\n/// collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object for which the broadphase proxy is to\n///     be refreshed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getCollisionObjectArray","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getCollisionObjectArray(collisionWorld, outArray)\n///\n/// @desc\n/// Retrieves an array of collision objects from the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Array<Pointer>} outArray\n///     An array where the collision objects will be stored.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getCollisionObject(collisionWorld, index)\n///\n/// @desc\n/// Retrieves a collision object from the collision world based on the provided\n/// index.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Real} index\n///     The index of the collision object to retrieve.\n///\n/// @return {Pointer} A pointer to the retrieved collision object.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_removeCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_removeCollisionObject(collisionWorld, collisionObject)\n///\n/// @desc\n/// Removes a collision object from the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object to be removed from the collision world.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_performDiscreteCollisionDetection","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_performDiscreteCollisionDetection(collisionWorld)\n///\n/// @desc\n/// Triggers the discrete collision detection in the collision world, checking\n/// for collisions between objects.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getDispatchInfo","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getDispatchInfo(collisionWorld)\n///\n/// @desc\n/// Gets the dispatch info associated with the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Pointer} A pointer to the dispatch info associated with the\n/// collision world.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getForceUpdateAllAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getForceUpdateAllAabbs(collisionWorld)\n///\n/// @desc\n/// Gets whether force update of all AABBs is enabled in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Bool} Returns true if force update of all AABBs is enabled, false\n/// otherwise.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_setForceUpdateAllAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_setForceUpdateAllAabbs(collisionWorld, forceUpdateAllAabbs)\n///\n/// @desc\n/// Sets whether to force update all AABBs in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Bool} forceUpdateAllAabbs\n///     A boolean indicating whether to force update all AABBs.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDbvtBroadphase_create","argCount":0,"args":[],"documentation":"/// @func btDbvtBroadphase_create()\n///\n/// @desc\n/// Creates a broadphase collision detection algorithm based on dynamic AABB\n/// trees (Dbvt). This broadphase algorithm is suitable for dynamic worlds where\n/// objects move frequently.\n///\n/// @return {Pointer} A pointer to the newly created btDbvtBroadphase instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDbvtBroadphase_destroy","argCount":0,"args":[],"documentation":"/// @func btDbvtBroadphase_destroy(dbvtBroadphase)\n///\n/// @desc\n/// Destroys a btDbvtBroadphase instance, releasing associated memory and\n/// resources.\n///\n/// @param {Pointer} dbvtBroadphase\n///     A pointer to the btDbvtBroadphase instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultCollisionConfiguration_create","argCount":0,"args":[],"documentation":"/// @func btDefaultCollisionConfiguration_create()\n///\n/// @desc\n/// Creates a new instance of the Bullet Physics default collision configuration.\n///\n/// @return {Pointer}\n///     A pointer to the newly created btDefaultCollisionConfiguration instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultCollisionConfiguration_destroy","argCount":0,"args":[],"documentation":"/// @func btDefaultCollisionConfiguration_destroy(defaultCollisionConfiguration)\n///\n/// @desc\n/// Destroys a previously created btDefaultCollisionConfiguration instance,\n/// releasing its allocated resources.\n///\n/// @param {Pointer} defaultCollisionConfiguration\n///     A pointer to the btDefaultCollisionConfiguration instance to be\n///     destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultMotionState_create","argCount":0,"args":[],"documentation":"/// @func btDefaultMotionState_create()\n///\n/// @desc\n/// Creates a new instance of btDefaultMotionState, which represents the default\n/// implementation of a motion state for rigid bodies in a physics simulation.\n///\n/// @return {Pointer} A pointer to the newly created btDefaultMotionState\n/// instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultMotionState_destroy","argCount":0,"args":[],"documentation":"/// @func btDefaultMotionState_destroy(defaultMotionState)\n///\n/// @desc\n/// Destroys a btDefaultMotionState instance, releasing the associated resources.\n///\n/// @param {Pointer} defaultMotionState\n///     A pointer to the btDefaultMotionState instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_create","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_create(dispatcher, pairCache, constraintSolver, collisionConfiguration)\n///\n/// @desc\n/// Creates a btDiscreteDynamicsWorld instance for simulating discrete dynamic\n/// rigid body physics.\n///\n/// @param {Pointer} dispatcher\n///     A pointer to the btDispatcher instance that handles collision detection\n///     and resolution.\n/// @param {Pointer} pairCache\n///     A pointer to the btBroadphaseInterface instance that manages overlapping\n///     pairs efficiently.\n/// @param {Pointer} constraintSolver\n///     A pointer to the btConstraintSolver instance that solves constraints and\n///     forces between rigid bodies.\n/// @param {Pointer} collisionConfiguration\n///     A pointer to the btCollisionConfiguration instance that provides\n///     collision-related configuration settings.\n/// @return {Pointer}\n///     A pointer to the created btDiscreteDynamicsWorld instance for simulating\n///     physics.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_destroy","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_destroy(discreteDynamicsWorld)\n///\n/// @desc\n/// Destroys a btDiscreteDynamicsWorld instance, releasing its allocated\n/// resources.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance to be destroyed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getCollisionWorld","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getCollisionWorld(discreteDynamicsWorld)\n///\n/// @desc\n/// Gets the collision world associated with the btDiscreteDynamicsWorld\n/// instance.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n///\n/// @return {Pointer}\n///     A pointer to the associated collision world.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_setGravity","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_setGravity(discreteDynamicsWorld, gravity)\n///\n/// @desc\n/// Sets the gravity for the btDiscreteDynamicsWorld instance.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} gravity\n///     A pointer to a btVector3 representing the gravity to be set.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_setGravityXYZ","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_setGravityXYZ(discreteDynamicsWorld, gravityX, gravityY, gravityZ)\n///\n/// @desc\n/// Sets the gravity for the btDiscreteDynamicsWorld instance using individual\n/// components along the x, y, and z axes.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Real} gravityX\n///     The x-component of the gravity to be set.\n/// @param {Real} gravityY\n///     The y-component of the gravity to be set.\n/// @param {Real} gravityZ\n///     The z-component of the gravity to be set.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_addRigidBody","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_addRigidBody(discreteDynamicsWorld, rigidBody, group, mask)\n///\n/// @desc\n/// Adds a rigid body to the dynamics world.\n///\n/// @param {Pointer} dynamicsWorld\n///     Pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} rigidBody\n///     Pointer to the btRigidBody instance to be added.\n/// @param {Real} group\n///     Collision group to which the rigid body belongs.\n/// @param {Real} mask\n///     Collision mask for the rigid body.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_removeRigidBody","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_removeRigidBody(discreteDynamicsWorld, rigidBody)\n///\n/// @desc\n/// Removes a rigid body from the dynamics world.\n///\n/// @param {Pointer} dynamicsWorld\n///     Pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} rigidBody\n///     Pointer to the btRigidBody instance to be removed.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_stepSimulation","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_stepSimulation(discreteDynamicsWorld, timeStep[, maxSubSteps[, fixedTimeStep]])\n///\n/// @desc\n/// Steps the dynamics simulation forward by the given time step, allowing for\n/// substeps if specified.\n///\n/// @param {Pointer} dynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Real} timeStep\n///     The time step to advance the simulation.\n/// @param {Real} [maxSubSteps]\n///     The maximum number of substeps allowed in this simulation step. Defaults\n///     to 1.\n/// @param {Real} [fixedTimeStep]\n///     The fixed time step for each substep.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_create","argCount":0,"args":[],"documentation":"/// @func btQuaternion_create([x[, y[, z[, w]]])\n///\n/// @desc\n///\n/// @param {Real} [x]\n/// @param {Real} [y]\n/// @param {Real} [z]\n/// @param {Real} [w]\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromAxisAngle","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromAxisAngle(axis, angle)\n///\n/// @desc\n///\n/// @param {Pointer} axis\n/// @param {Real} angle\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromAxisAngleXYZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromAxisAngleXYZ(axisX, axisY, axisZ, angle)\n///\n/// @desc\n///\n/// @param {Real} axisX\n/// @param {Real} axisY\n/// @param {Real} axisZ\n/// @param {Real} angle\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromEuler","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromEuler(yaw, pitch, roll)\n///\n/// @desc\n///\n/// @param {Real} yaw\n/// @param {Real} pitch\n/// @param {Real} roll\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_destroy","argCount":0,"args":[],"documentation":"/// @func btQuaternion_destroy(quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getX","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getX(quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setX","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setX(quaternion, x)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n/// @param {Real} x\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getY","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getY(quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setY","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setY(quaternion, y)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n/// @param {Real} y\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getZ(quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setZ(quaternion, z)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n/// @param {Real} z\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getW","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getW(quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setW","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setW(quaternion, w)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n/// @param {Real} w\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setValue","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setValue(quaternion, x, y, z, w)\n///\n/// @desc\n///\n/// @param {Pointer} quaternion\n/// @param {Real} x\n/// @param {Real} y\n/// @param {Real} z\n/// @param {Real} w\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_create","argCount":0,"args":[],"documentation":"/// @func btRigidBody_create(mass, motionState, collisionShape[, localInertia])\n///\n/// @desc\n///\n/// @param {Real} mass\n/// @param {Pointer} motionState\n/// @param {Pointer} collisionShape\n/// @param {Pointer} [localInertia]\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_destroy","argCount":0,"args":[],"documentation":"/// @func btRigidBody_destroy(rigidBody)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyImpulse(rigidBody, impulse, relPos)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Pointer} impulse\n/// @param {Pointer} relPos\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Real} impulseX\n/// @param {Real} impulseY\n/// @param {Real} impulseZ\n/// @param {Real} relPosX\n/// @param {Real} relPosY\n/// @param {Real} relPosZ\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralImpulse(rigidBody, impulse)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Pointer} impulse\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Real} impulseX\n/// @param {Real} impulseY\n/// @param {Real} impulseZ\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyForce","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyForce(rigidBody, forceX, forceY, forceZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Pointer} force\n/// @param {Pointer} relPos\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyForceXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyForceXYZ(rigidBody, forceX, forceY, forceZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Real} forceX\n/// @param {Real} forceY\n/// @param {Real} forceZ\n/// @param {Real} relPosX\n/// @param {Real} relPosY\n/// @param {Real} relPosZ\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralForce","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralForce(rigidBody, force)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Pointer} force\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralForceXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralForceXYZ(rigidBody, forceX, forceY, forceZ)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n/// @param {Real} forceX\n/// @param {Real} forceY\n/// @param {Real} forceZ\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getMotionState","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getMotionState(rigidBody)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_isActive","argCount":0,"args":[],"documentation":"/// @func btRigidBody_isActive(rigidBody)\n///\n/// @desc\n///\n/// @param {Pointer} rigidBody\n///\n/// @return {Bool}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_upcast","argCount":0,"args":[],"documentation":"/// @func btRigidBody_upcast(collisionObject)\n///\n/// @desc\n///\n/// @param {Pointer} collisionObject\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSequentialImpulseConstraintSolver_create","argCount":0,"args":[],"documentation":"/// @func btSequentialImpulseConstraintSolver_create()\n///\n/// @desc\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSequentialImpulseConstraintSolver_destroy","argCount":0,"args":[],"documentation":"/// @func btSequentialImpulseConstraintSolver_destroy(sequentialImpulseConstraintSolver)\n///\n/// @desc\n///\n/// @param {Pointer} sequentialImpulseConstraintSolver\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSphereShape_create","argCount":0,"args":[],"documentation":"/// @func btSphereShape_create(radius)\n///\n/// @desc\n/// Creates a sphere collision shape.\n///\n/// @param {Real} radius\n///     The radius of the sphere.\n///\n/// @return {Pointer} A pointer to the newly created btSphereShape instance.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSphereShape_destroy","argCount":0,"args":[],"documentation":"/// @func btSphereShape_destroy(sphereShape)\n///\n/// @desc\n/// Destroys a sphere collision shape.\n///\n/// @param {Pointer} sphereShape\n///     A pointer to the btSphereShape to destroy.\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_create","argCount":0,"args":[],"documentation":"/// @func btTransform_create()\n///\n/// @desc\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_destroy","argCount":0,"args":[],"documentation":"/// @func btTransform_destroy(transform)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setIdentity","argCount":0,"args":[],"documentation":"/// @func btTransform_setIdentity(transform)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getOrigin","argCount":0,"args":[],"documentation":"/// @func btTransform_getOrigin(transform, outVector3)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Pointer} outVector3\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setOrigin","argCount":0,"args":[],"documentation":"/// @func btTransform_setOrigin(transform, origin)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Pointer} origin\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setOriginXYZ","argCount":0,"args":[],"documentation":"/// @func btTransform_setOriginXYZ(transform, x, y, z)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Real} x\n/// @param {Real} y\n/// @param {Real} z\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getRotation","argCount":0,"args":[],"documentation":"/// @func btTransform_getRotation(transform, outQuaternion)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Pointer} outQuaternion\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setRotation","argCount":0,"args":[],"documentation":"/// @func btTransform_setRotation(transform, quaternion)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Pointer} quaternion\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setRotationXYZ","argCount":0,"args":[],"documentation":"/// @func btTransform_setRotationXYZ(transform, yaw, pitch, roll)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Real} yaw\n/// @param {Real} pitch\n/// @param {Real} roll\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getMatrix","argCount":0,"args":[],"documentation":"/// @func btTransform_getMatrix(transform, outMatrix)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Array<real>} outMatrix\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setFromMatrix","argCount":0,"args":[],"documentation":"/// @func btTransform_setFromMatrix(transform, matrix)\n///\n/// @desc\n///\n/// @param {Pointer} transform\n/// @param {Array<real>} matrix\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_create","argCount":0,"args":[],"documentation":"/// @func btVector3_create([x[, y[, z]])\n///\n/// @desc\n///\n/// @param {Real} [x]\n/// @param {Real} [y]\n/// @param {Real} [z]\n///\n/// @return {Pointer}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_destroy","argCount":0,"args":[],"documentation":"/// @func btVector3_destroy(vector)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getX","argCount":0,"args":[],"documentation":"/// @func btVector3_getX(vector)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setX","argCount":0,"args":[],"documentation":"/// @func btVector3_setX(vector, x)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n/// @param {Real} x\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getY","argCount":0,"args":[],"documentation":"/// @func btVector3_getY(vector)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setY","argCount":0,"args":[],"documentation":"/// @func btVector3_setY(vector, y)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n/// @param {Real} y\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getZ","argCount":0,"args":[],"documentation":"/// @func btVector3_getZ(vector)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n///\n/// @return {Real}\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setZ","argCount":0,"args":[],"documentation":"/// @func btVector3_setZ(vector, z)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n/// @param {Real} z\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setValue","argCount":0,"args":[],"documentation":"/// @func btVector3_setValue(vector, x, y, z)\n///\n/// @desc\n///\n/// @param {Pointer} vector\n/// @param {Real} x\n/// @param {Real} y\n/// @param {Real} z\n","externalName":"","help":"","hidden":false,"kind":1,"returnType":1,},
      ],"init":"","kind":1,"order":[
        {"name":"btBoxShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBoxShape_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBoxShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionDispatcher_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionDispatcher_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_hasAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setContactProcessingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactProcessingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isStaticObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isKinematicObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isStaticOrKinematicObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_hasContactResponse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCollisionShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCollisionShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setIgnoreCollisionCheck","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getNumObjectsWithoutCollision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getObjectWithoutCollision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_checkCollideWithOverride","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setDeactivationTime","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getDeactivationTime","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_forceActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_activate","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isActive","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setRollingFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getRollingFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setSpinningFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getSpinningFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setContactStiffnessAndDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getWorldTransformMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCollisionFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCollisionFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdSweptSphereRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCcdSweptSphereRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdSquareMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCcdMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_checkCollideWith","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_calculateLocalInertia","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_setBroadphase","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getBroadphase","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getPairCache","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getDispatcher","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_updateSingleAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_updateAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_computeOverlappingPairs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getClosestHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_hasHit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayFromWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayFromWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayToWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayToWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getCollisionObjects","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitFractions","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getClosestHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_hasHit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexFromWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexFromWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexToWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexToWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getClosestDistanceThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setClosestDistanceThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getNumCollisionObjects","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_rayTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_rayTestXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_convexSweepTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_contactTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_contactPairTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_addCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_refreshBroadphaseProxy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getCollisionObjectArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_removeCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_performDiscreteCollisionDetection","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getDispatchInfo","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getForceUpdateAllAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_setForceUpdateAllAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDbvtBroadphase_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDbvtBroadphase_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultCollisionConfiguration_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultCollisionConfiguration_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultMotionState_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultMotionState_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getCollisionWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_setGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_setGravityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_addRigidBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_removeRigidBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_stepSimulation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromAxisAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromAxisAngleXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromEuler","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getW","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setW","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyForceXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralForceXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getMotionState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_isActive","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_upcast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSequentialImpulseConstraintSolver_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSequentialImpulseConstraintSolver_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSphereShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSphereShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setIdentity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getOrigin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setOrigin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setOriginXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setRotationXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setFromMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setValue","path":"extensions/GMBullet/GMBullet.yy",},
      ],"origname":"","ProxyFiles":[
        {"resourceType":"GMProxyFile","resourceVersion":"1.0","name":"GMBullet.dll","TargetMask":6,},
      ],"uncompress":false,"usesRunnerInterface":true,},
  ],
  "gradleinject": "",
  "hasConvertedCodeInjection": true,
  "helpfile": "",
  "HTML5CodeInjection": "",
  "html5Props": false,
  "IncludedResources": [],
  "installdir": "",
  "iosCocoaPodDependencies": "",
  "iosCocoaPods": "",
  "ioscodeinjection": "",
  "iosdelegatename": "",
  "iosplistinject": "",
  "iosProps": false,
  "iosSystemFrameworkEntries": [],
  "iosThirdPartyFrameworkEntries": [],
  "license": "",
  "maccompilerflags": "",
  "maclinkerflags": "",
  "macsourcedir": "",
  "options": [],
  "optionsFile": "options.json",
  "packageId": "",
  "parent": {
    "name": "Extensions",
    "path": "folders/Extensions.yy",
  },
  "productId": "",
  "sourcedir": "",
  "supportedTargets": -1,
  "tvosclassname": null,
  "tvosCocoaPodDependencies": "",
  "tvosCocoaPods": "",
  "tvoscodeinjection": "",
  "tvosdelegatename": null,
  "tvosmaccompilerflags": "",
  "tvosmaclinkerflags": "",
  "tvosplistinject": "",
  "tvosProps": false,
  "tvosSystemFrameworkEntries": [],
  "tvosThirdPartyFrameworkEntries": [],
}