{
  "resourceType": "GMExtension",
  "resourceVersion": "1.2",
  "name": "GMBullet",
  "androidactivityinject": "",
  "androidclassname": "",
  "androidcodeinjection": "",
  "androidinject": "",
  "androidmanifestinject": "",
  "androidPermissions": [],
  "androidProps": false,
  "androidsourcedir": "",
  "author": "",
  "classname": "",
  "copyToTargets": 66,
  "date": "2023-01-31T19:31:44.687619+01:00",
  "description": "",
  "exportToGame": true,
  "extensionVersion": "1.0.0",
  "files": [
    {"resourceType":"GMExtensionFile","resourceVersion":"1.0","name":"","constants":[],"copyToTargets":66,"filename":"libGMBullet.dylib","final":"","functions":[
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_create","argCount":0,"args":[],"documentation":"/// @func btBoxShape_create(halfExtents)\n///\n/// @desc\n/// Creates a box shape with the specified half extents.\n///\n/// @param {Pointer} halfExtents\n///     A pointer to a btVector3 representing the half extents of the box.\n///\n/// @return {Pointer} A pointer to the newly created btBoxShape instance.\n","externalName":"","help":"btBoxShape_create(halfExtents)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_createXYZ","argCount":0,"args":[],"documentation":"/// @func btBoxShape_createXYZ(halfExtentX, halfExtentY, halfExtentZ)\n///\n/// @desc\n/// Creates a box shape with the specified half extents in the X, Y, and Z\n/// dimensions.\n///\n/// @param {Real} halfExtentX\n///     The half extent along the X-axis.\n/// @param {Real} halfExtentY\n///     The half extent along the Y-axis.\n/// @param {Real} halfExtentZ\n///     The half extent along the Z-axis.\n///\n/// @return {Pointer} A pointer to the newly created btBoxShape instance.\n","externalName":"","help":"btBoxShape_createXYZ(halfExtentX, halfExtentY, halfExtentZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBoxShape_destroy","argCount":0,"args":[],"documentation":"/// @func btBoxShape_destroy(boxShape)\n///\n/// @desc\n/// Destroys a box collision shape.\n///\n/// @param {Pointer} boxShape\n///     A pointer to the btBoxShape to destroy.\n","externalName":"","help":"btBoxShape_destroy(boxShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionDispatcher_create","argCount":0,"args":[],"documentation":"/// @func btCollisionDispatcher_create(collisionConfiguration)\n///\n/// @desc\n/// Creates a collision dispatcher using the specified collision configuration.\n///\n/// @param {Pointer} collisionConfiguration\n///     The collision configuration to use for the collision dispatcher.\n///\n/// @return {Pointer}\n///     A pointer to the created collision dispatcher.\n","externalName":"","help":"btCollisionDispatcher_create(collisionConfiguration)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionDispatcher_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionDispatcher_destroy(collisionDispatcher)\n///\n/// @desc\n/// This function is used to release the memory associated with a\n/// btCollisionDispatcher object.\n///\n/// @param {Pointer} collisionDispatcher\n///     A pointer to a btCollisionDispatcher instance that needs to be destroyed.\n///     This should be a valid pointer to an existing btCollisionDispatcher\n///     object.\n","externalName":"","help":"btCollisionDispatcher_destroy(collisionDispatcher)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_create","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_create()\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics collision object.\n///\n/// @return {Pointer} Returns a pointer to the newly created instance of\n/// btCollisionObject.\n","externalName":"","help":"btCollisionObject_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_destroy(collisionObject)\n///\n/// @desc\n/// Destroys a Bullet Physics collision object and releases associated memory.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance to be destroyed.\n","externalName":"","help":"btCollisionObject_destroy(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getAnisotropicFriction(collisionObject, outVector3)\n///\n/// @desc\n/// Gets the anisotropic friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance to store the anisotropic friction\n///     values.\n","externalName":"","help":"btCollisionObject_getAnisotropicFriction(collisionObject, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setAnisotropicFriction(collisionObject, anisotropicFriction[, frictionMode])\n///\n/// @desc\n/// Sets the anisotropic friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} anisotropicFriction\n///     A pointer to a btVector3 instance representing the anisotropic friction\n///     values.\n/// @param {Real} [frictionMode]\n///     An integer representing the friction mode. Default is 1.\n","externalName":"","help":"btCollisionObject_setAnisotropicFriction(collisionObject, anisotropicFriction[, frictionMode])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_hasAnisotropicFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_hasAnisotropicFriction(collisionObject[, frictionMode])\n///\n/// @desc\n/// Checks if a Bullet Physics collision object has anisotropic friction set.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} [frictionMode]\n///     An integer representing the friction mode. Default is 1.\n///\n/// @return {Bool} A boolean value indicating whether the collision object has\n/// anisotropic friction.\n","externalName":"","help":"btCollisionObject_hasAnisotropicFriction(collisionObject[, frictionMode])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setContactProcessingThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setContactProcessingThreshold(collisionObject, contactProcessingThreshold)\n///\n/// @desc\n/// Sets the contact processing threshold for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} contactProcessingThreshold\n///     The contact processing threshold to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setContactProcessingThreshold(collisionObject, contactProcessingThreshold)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactProcessingThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactProcessingThreshold(collisionObject)\n///\n/// @desc\n/// Gets the contact processing threshold for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact processing threshold of the collision object.\n","externalName":"","help":"btCollisionObject_getContactProcessingThreshold(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isStaticObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isStaticObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is a static object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// static.\n","externalName":"","help":"btCollisionObject_isStaticObject(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isKinematicObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isKinematicObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is a kinematic object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// kinematic.\n","externalName":"","help":"btCollisionObject_isKinematicObject(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isStaticOrKinematicObject","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isStaticOrKinematicObject(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is either static or kinematic.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// static or kinematic.\n","externalName":"","help":"btCollisionObject_isStaticOrKinematicObject(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_hasContactResponse","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_hasContactResponse(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object has a contact response.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object has a\n/// contact response.\n","externalName":"","help":"btCollisionObject_hasContactResponse(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCollisionShape","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCollisionShape(collisionObject, collisionShape)\n///\n/// @desc\n/// Sets the collision shape for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} collisionShape\n///     A pointer to a btCollisionShape instance representing the collision\n///     shape.\n","externalName":"","help":"btCollisionObject_setCollisionShape(collisionObject, collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCollisionShape","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCollisionShape(collisionObject)\n///\n/// @desc\n/// Gets the collision shape for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer} A pointer to the collision shape associated with the\n/// collision object.\n","externalName":"","help":"btCollisionObject_getCollisionShape(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setIgnoreCollisionCheck","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setIgnoreCollisionCheck(collisionObject, otherObject, ignoreCollisionCheck)\n///\n/// @desc\n/// Sets whether collision checking should be ignored between two collision\n/// objects.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to another btCollisionObject instance to be checked for\n///     collision.\n/// @param {Bool} ignoreCollisionCheck\n///     A boolean value indicating whether to ignore collision checking between\n///     the objects.\n","externalName":"","help":"btCollisionObject_setIgnoreCollisionCheck(collisionObject, otherObject, ignoreCollisionCheck)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getNumObjectsWithoutCollision","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getNumObjectsWithoutCollision(collisionObject)\n///\n/// @desc\n/// Gets the number of objects without collision associated with a collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The number of objects without collision associated with the\n/// collision object.\n","externalName":"","help":"btCollisionObject_getNumObjectsWithoutCollision(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getObjectWithoutCollision","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getObjectWithoutCollision(collisionObject, index)\n///\n/// @desc\n/// Gets an object without collision associated with a collision object by index.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} index\n///     The index of the object without collision to retrieve.\n///\n/// @return {Pointer} A pointer to the object without collision at the specified\n/// index.\n","externalName":"","help":"btCollisionObject_getObjectWithoutCollision(collisionObject, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_checkCollideWithOverride","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_checkCollideWithOverride(collisionObject, otherObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object should collide with another\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to another btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether collisionObject should\n/// collide with otherObject.\n","externalName":"","help":"btCollisionObject_checkCollideWithOverride(collisionObject, otherObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getActivationState(collisionObject)\n///\n/// @desc\n/// Gets the activation state of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The activation state of the collision object.\n","externalName":"","help":"btCollisionObject_getActivationState(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setActivationState(collisionObject, newState)\n///\n/// @desc\n/// Sets the activation state for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} newState\n///     The new activation state to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setActivationState(collisionObject, newState)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setDeactivationTime","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setDeactivationTime(collisionObject, time)\n///\n/// @desc\n/// Sets the deactivation time for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} time\n///     The deactivation time to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setDeactivationTime(collisionObject, time)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getDeactivationTime","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getDeactivationTime(collisionObject)\n///\n/// @desc\n/// Gets the deactivation time of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The deactivation time of the collision object.\n","externalName":"","help":"btCollisionObject_getDeactivationTime(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_forceActivationState","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_forceActivationState(collisionObject, newState)\n///\n/// @desc\n/// Forces a specific activation state for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} newState\n///     The new activation state to be forced for the collision object.\n","externalName":"","help":"btCollisionObject_forceActivationState(collisionObject, newState)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_activate","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_activate(collisionObject[, forceActivation])\n///\n/// @desc\n/// Activates a Bullet Physics collision object, optionally with forced\n/// activation.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Bool} [forceActivation]\n///     A boolean indicating whether to force activation. Default is false.\n","externalName":"","help":"btCollisionObject_activate(collisionObject[, forceActivation])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_isActive","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_isActive(collisionObject)\n///\n/// @desc\n/// Checks if a Bullet Physics collision object is currently active.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Bool} A boolean value indicating whether the collision object is\n/// currently active.\n","externalName":"","help":"btCollisionObject_isActive(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setRestitution","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setRestitution(collisionObject, restitution)\n///\n/// @desc\n/// Sets the restitution for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} restitution\n///     The restitution to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setRestitution(collisionObject, restitution)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getRestitution","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getRestitution(collisionObject)\n///\n/// @desc\n/// Gets the restitution of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The restitution of the collision object.\n","externalName":"","help":"btCollisionObject_getRestitution(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The friction to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setFriction(collisionObject, friction)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getFriction(collisionObject)\n///\n/// @desc\n/// Gets the friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The friction of the collision object.\n","externalName":"","help":"btCollisionObject_getFriction(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setRollingFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setRollingFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the rolling friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The rolling friction to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setRollingFriction(collisionObject, friction)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getRollingFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getRollingFriction(collisionObject)\n///\n/// @desc\n/// Gets the rolling friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The rolling friction of the collision object.\n","externalName":"","help":"btCollisionObject_getRollingFriction(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setSpinningFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setSpinningFriction(collisionObject, friction)\n///\n/// @desc\n/// Sets the spinning friction for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} friction\n///     The spinning friction to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setSpinningFriction(collisionObject, friction)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getSpinningFriction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getSpinningFriction(collisionObject)\n///\n/// @desc\n/// Gets the spinning friction of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The spinning friction of the collision object.\n","externalName":"","help":"btCollisionObject_getSpinningFriction(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setContactStiffnessAndDamping","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setContactStiffnessAndDamping(collisionObject, stiffness, damping)\n///\n/// @desc\n/// Sets the contact stiffness and damping for a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} stiffness\n///     The contact stiffness to be set for the collision object.\n/// @param {Real} damping\n///     The contact damping to be set for the collision object.\n","externalName":"","help":"btCollisionObject_setContactStiffnessAndDamping(collisionObject, stiffness, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactStiffness","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactStiffness(collisionObject)\n///\n/// @desc\n/// Gets the contact stiffness of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact stiffness of the collision object.\n","externalName":"","help":"btCollisionObject_getContactStiffness(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getContactDamping","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getContactDamping(collisionObject)\n///\n/// @desc\n/// Gets the contact damping of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The contact damping of the collision object.\n","externalName":"","help":"btCollisionObject_getContactDamping(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getWorldTransform(collisionObject)\n///\n/// @desc\n/// Gets the world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer} A pointer to the world transform of the collision object.\n","externalName":"","help":"btCollisionObject_getWorldTransform(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getWorldTransformMatrix","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getWorldTransformMatrix(collisionObject, outMatrix)\n///\n/// @desc\n/// Gets the world transform as a 4x4 matrix of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Array<Real>} outMatrix\n///     An array to store the 4x4 matrix representing the world transform.\n","externalName":"","help":"btCollisionObject_getWorldTransformMatrix(collisionObject, outMatrix)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setWorldTransform(collisionObject, transform)\n///\n/// @desc\n/// Sets the world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} transform\n///     A pointer to the btTransform that represents the new world transform.\n","externalName":"","help":"btCollisionObject_setWorldTransform(collisionObject, transform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationWorldTransform(collisionObject)\n///\n/// @desc\n/// Gets the interpolation world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Pointer}\n///     A pointer to the interpolation world transform of the collision object.\n","externalName":"","help":"btCollisionObject_getInterpolationWorldTransform(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationWorldTransform","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationWorldTransform(collisionObject, transform)\n///\n/// @desc\n/// Sets the interpolation world transform of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} transform\n///     A pointer to the btTransform that represents the new interpolation world\n///     transform.\n","externalName":"","help":"btCollisionObject_setInterpolationWorldTransform(collisionObject, transform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationLinearVelocity(collisionObject, linearVelocity)\n///\n/// @desc\n/// Sets the interpolation linear velocity of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} linearVelocity\n///     A pointer to a btVector3 representing the new interpolation linear\n///     velocity.\n","externalName":"","help":"btCollisionObject_setInterpolationLinearVelocity(collisionObject, linearVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setInterpolationAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setInterpolationAngularVelocity(collisionObject, angularVelocity)\n///\n/// @desc\n/// Sets the interpolation angular velocity of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} angularVelocity\n///     A pointer to a btVector3 representing the new interpolation angular\n///     velocity.\n","externalName":"","help":"btCollisionObject_setInterpolationAngularVelocity(collisionObject, angularVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationLinearVelocity(collisionObject, outVector3)\n///\n/// @desc\n/// Retrieves the interpolation linear velocity of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the interpolation linear velocity will be\n///     copied.\n","externalName":"","help":"btCollisionObject_getInterpolationLinearVelocity(collisionObject, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getInterpolationAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getInterpolationAngularVelocity(collisionObject, outVector3)\n///\n/// @desc\n/// Retrieves the interpolation angular velocity of a Bullet Physics collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the interpolation angular velocity will\n///     be copied.\n","externalName":"","help":"btCollisionObject_getInterpolationAngularVelocity(collisionObject, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getHitFraction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getHitFraction(collisionObject)\n///\n/// @desc\n/// Gets the hit fraction for a btCollisionObject, indicating the fraction of\n/// motion used for a hit.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject from which to get the hit fraction.\n///\n/// @return {Real} The hit fraction, representing the proportion of motion used\n/// for a hit.\n","externalName":"","help":"btCollisionObject_getHitFraction(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setHitFraction","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setHitFraction(collisionObject, hitFraction)\n///\n/// @desc\n/// Sets the hit fraction for a btCollisionObject, indicating the fraction of\n/// motion used for a hit.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject for which to set the hit fraction.\n/// @param {Real} hitFraction\n///     The hit fraction to set, representing the proportion of motion used for\n///     a hit.\n","externalName":"","help":"btCollisionObject_setHitFraction(collisionObject, hitFraction)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCollisionFlags","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCollisionFlags(collisionObject)\n///\n/// @desc\n/// Gets the collision flags for a btCollisionObject, indicating its collision\n/// behavior.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject from which to get the collision flags.\n///\n/// @return {Real} The collision flags, representing the collision behavior of\n/// the object.\n","externalName":"","help":"btCollisionObject_getCollisionFlags(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCollisionFlags","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCollisionFlags(collisionObject, flags)\n///\n/// @desc\n/// Sets the collision flags for a btCollisionObject, indicating its collision\n/// behavior.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject for which to set the collision flags.\n/// @param {Real} flags\n///     The collision flags to set, representing the desired collision behavior\n///     for the object.\n","externalName":"","help":"btCollisionObject_setCollisionFlags(collisionObject, flags)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdSweptSphereRadius","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdSweptSphereRadius(collisionObject)\n///\n/// @desc\n/// Retrieves the Continuous Collision Detection (CCD) swept sphere radius of a\n/// Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real} The CCD swept sphere radius of the collision object.\n","externalName":"","help":"btCollisionObject_getCcdSweptSphereRadius(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCcdSweptSphereRadius","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCcdSweptSphereRadius(collisionObject, radius)\n///\n/// @desc\n/// Sets the continuous collision detection (CCD) swept sphere radius for a\n/// btCollisionObject.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject for which to set the swept sphere\n///     radius.\n/// @param {Real} radius\n///     The radius of the swept sphere used for continuous collision detection.\n","externalName":"","help":"btCollisionObject_setCcdSweptSphereRadius(collisionObject, radius)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdMotionThreshold(collisionObject)\n///\n/// @desc\n/// Gets the continuous collision detection (CCD) motion threshold for a\n/// btCollisionObject.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject from which to get the CCD motion\n///     threshold.\n///\n/// @return {Real} The motion threshold for CCD, indicating the minimum motion\n/// needed for CCD to be active.\n","externalName":"","help":"btCollisionObject_getCcdMotionThreshold(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_getCcdSquareMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_getCcdSquareMotionThreshold(collisionObject)\n///\n/// @desc\n/// Retrieves the squared motion threshold for Continuous Collision Detection\n/// (CCD) of a Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n///\n/// @return {Real}\n///     The squared motion threshold for CCD of the collision object.\n","externalName":"","help":"btCollisionObject_getCcdSquareMotionThreshold(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_setCcdMotionThreshold","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_setCcdMotionThreshold(collisionObject, ccdMotionThreshold)\n///\n/// @desc\n/// Sets the motion threshold for Continuous Collision Detection (CCD) of a\n/// Bullet Physics collision object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Real} ccdMotionThreshold\n///     The motion threshold for CCD. When the motion (squared velocity) of the\n///     object exceeds this threshold, CCD is triggered.\n","externalName":"","help":"btCollisionObject_setCcdMotionThreshold(collisionObject, ccdMotionThreshold)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionObject_checkCollideWith","argCount":0,"args":[],"documentation":"/// @func btCollisionObject_checkCollideWith(collisionObject, otherObject)\n///\n/// @desc\n/// Checks if the specified collision object can collide with another collision\n/// object.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to a btCollisionObject instance.\n/// @param {Pointer} otherObject\n///     A pointer to the other btCollisionObject instance to check for collision.\n///\n/// @return {Bool} Returns true if the collisionObject can collide with the\n/// otherObject, false otherwise.\n","externalName":"","help":"btCollisionObject_checkCollideWith(collisionObject, otherObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_destroy(collisionShape)\n///\n/// @desc\n/// Destroys a Bullet physics collision shape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape instance to destroy.\n","externalName":"","help":"btCollisionShape_destroy(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getAabb","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getAabb(collisionShape, transform, aabbMin, aabbMax)\n///\n/// @desc\n/// Gets the axis-aligned bounding box (AABB) of the collision shape when\n/// transformed by the specified transform.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Pointer} transform\n///     A pointer to a btTransform representing the transformation of the shape.\n/// @param {Pointer} aabbMin\n///     Pointer to a btVector3 where the minimum corner of the AABB will be\n///     stored.\n/// @param {Pointer} aabbMax\n///     Pointer to a btVector3 where the maximum corner of the AABB will be\n///     stored.\n","externalName":"","help":"btCollisionShape_getAabb(collisionShape, transform, aabbMin, aabbMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getBoundingSphere","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getBoundingSphere(collisionShape, outCenter)\n///\n/// @desc\n/// Gets the bounding sphere of a btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Pointer} outCenter\n///     A pointer to a btVector3 to store the center of the bounding sphere.\n///\n/// @return {Real} The radius of the bounding sphere.\n","externalName":"","help":"btCollisionShape_getBoundingSphere(collisionShape, outCenter)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isPolyhedral","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isPolyhedral(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is a polyhedral shape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is polyhedral, false\n/// otherwise.\n","externalName":"","help":"btCollisionShape_isPolyhedral(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isConvex2d","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isConvex2d(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is a 2D convex shape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is a 2D convex shape,\n/// false otherwise.\n","externalName":"","help":"btCollisionShape_isConvex2d(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isConvex","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isConvex(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is convex.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is convex, false\n/// otherwise.\n","externalName":"","help":"btCollisionShape_isConvex(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isNonMoving","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isNonMoving(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is non-moving.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is non-moving, false\n/// otherwise.\n","externalName":"","help":"btCollisionShape_isNonMoving(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isConcave","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isConcave(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is concave.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is concave, false\n/// otherwise.\n","externalName":"","help":"btCollisionShape_isConcave(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isCompound","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isCompound(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is a compound shape, which is a collection of\n/// other shapes.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is a compound shape,\n/// false otherwise.\n","externalName":"","help":"btCollisionShape_isCompound(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isSoftBody","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isSoftBody(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape is a soft body shape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape is a soft body shape,\n/// false otherwise.\n","externalName":"","help":"btCollisionShape_isSoftBody(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_isInfinite","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_isInfinite(collisionShape)\n///\n/// @desc\n/// Checks if the btCollisionShape represents an infinite volume.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Bool} Returns true if the collision shape represents an infinite\n/// volume, false otherwise.\n","externalName":"","help":"btCollisionShape_isInfinite(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_setLocalScaling","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_setLocalScaling(collisionShape, scaling)\n///\n/// @desc\n/// Sets the local scaling for a btCollisionShape. This scales the shape's local\n/// geometry.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Pointer} scaling\n///     A pointer to a btVector3 representing the scaling factors along the x, y,\n///     and z axes.\n","externalName":"","help":"btCollisionShape_setLocalScaling(collisionShape, scaling)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_setLocalScalingXYZ","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_setLocalScalingXYZ(collisionShape, scalingX, scalingY, scalingZ)\n///\n/// @desc\n/// Sets the local scaling of a btCollisionShape in each axis separately.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Real} scalingX\n///     The scaling factor along the X-axis.\n/// @param {Real} scalingY\n///     The scaling factor along the Y-axis.\n/// @param {Real} scalingZ\n///     The scaling factor along the Z-axis.\n","externalName":"","help":"btCollisionShape_setLocalScalingXYZ(collisionShape, scalingX, scalingY, scalingZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getLocalScaling","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getLocalScaling(collisionShape, outVector3)\n///\n/// @desc\n/// Gets the local scaling of the btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @param {Pointer} outVector3 A pointer to a btVector3 object to store the\n/// local scaling.\n","externalName":"","help":"btCollisionShape_getLocalScaling(collisionShape, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_calculateLocalInertia","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_calculateLocalInertia(collisionShape, mass, outVector3)\n///\n/// @desc\n/// Calculates the local inertia of the collision shape given a mass.\n///\n/// @param {Pointer} collisionShape\n///     The collision shape for which to calculate local inertia.\n/// @param {Real} mass\n///     The mass of the object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the calculated local inertia will be\n///     stored.\n","externalName":"","help":"btCollisionShape_calculateLocalInertia(collisionShape, mass, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getShapeType","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getShapeType(collisionShape)\n///\n/// @desc\n/// Gets the shape type of the btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Real} The shape type represented as an integer.\n","externalName":"","help":"btCollisionShape_getShapeType(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getAnisotropicRollingFrictionDirection","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getAnisotropicRollingFrictionDirection(collisionShape, outVector3)\n///\n/// @desc\n/// Gets the anisotropic rolling friction direction of the btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the anisotropic rolling friction\n///     direction will be stored.\n","externalName":"","help":"btCollisionShape_getAnisotropicRollingFrictionDirection(collisionShape, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_setMargin","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_setMargin(collisionShape, margin)\n///\n/// @desc\n/// Sets the margin (collision envelope) for the btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n/// @param {Real} margin\n///     The margin value to set for the collision shape.\n","externalName":"","help":"btCollisionShape_setMargin(collisionShape, margin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionShape_getMargin","argCount":0,"args":[],"documentation":"/// @func btCollisionShape_getMargin(collisionShape)\n///\n/// @desc\n/// Gets the margin (collision envelope) of the btCollisionShape.\n///\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object.\n///\n/// @return {Real} The margin value of the collision shape.\n","externalName":"","help":"btCollisionShape_getMargin(collisionShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_create","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_create(dispatcher, pairCache, collisionConfiguration)\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics collision world.\n///\n/// @param {Pointer} dispatcher\n///     A pointer to a btDispatcher object, responsible for managing collision\n///     dispatch.\n/// @param {Pointer} pairCache\n///     A pointer to a btBroadphaseInterface object, representing the\n///     broad-phase collision detection.\n/// @param {Pointer} collisionConfiguration\n///     A pointer to a btCollisionConfiguration object, defining collision\n///     behavior and algorithms.\n///\n/// @return {Pointer} A pointer to the newly created btCollisionWorld instance.\n","externalName":"","help":"btCollisionWorld_create(dispatcher, pairCache, collisionConfiguration)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_destroy","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_destroy(collisionWorld)\n///\n/// @desc\n/// This function destroys a btCollisionWorld instance, releasing the associated\n/// memory.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance to be destroyed.\n","externalName":"","help":"btCollisionWorld_destroy(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_setBroadphase","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_setBroadphase(collisionWorld, pairCache)\n///\n/// @desc\n/// Sets the broadphase interface for a given btCollisionWorld instance. The\n/// broadphase is used for the initial overlapping pairs determination in the\n/// collision detection system.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the broadphase\n///     interface will be set. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n/// @param {Pointer} pairCache\n///     A pointer to the btBroadphaseInterface instance that will serve as the\n///     broadphase for the collision world. It should be a valid pointer to an\n///     existing btBroadphaseInterface instance.\n","externalName":"","help":"btCollisionWorld_setBroadphase(collisionWorld, pairCache)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getBroadphase","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getBroadphase(collisionWorld)\n///\n/// @desc\n/// Retrieves the broadphase interface associated with a given btCollisionWorld\n/// instance.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the broadphase\n///     interface will be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the btBroadphaseInterface instance associated\n/// with the specified collisionWorld.\n","externalName":"","help":"btCollisionWorld_getBroadphase(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getPairCache","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getPairCache(collisionWorld)\n///\n/// @desc\n/// Retrieves the pair cache associated with a given btCollisionWorld instance.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the pair cache will\n///     be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the pair cache\n/// (e.g., btHashedOverlappingPairCache) associated with the specified\n/// collisionWorld.\n","externalName":"","help":"btCollisionWorld_getPairCache(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getDispatcher","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getDispatcher(collisionWorld)\n///\n/// @desc\n/// Retrieves the dispatcher associated with a given btCollisionWorld instance.\n/// The dispatcher is responsible for processing collision events and sending\n/// them to appropriate collision algorithms.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which the dispatcher will\n///     be retrieved. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n///\n/// @return {Pointer} A pointer to the dispatcher (e.g., btDispatcher)\n/// associated with the specified collisionWorld.\n","externalName":"","help":"btCollisionWorld_getDispatcher(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_updateSingleAabb","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_updateSingleAabb(collisionWorld, collisionObject)\n///\n/// @desc\n/// Updates the axis-aligned bounding box (AABB) of a single collision object in\n/// the btCollisionWorld. This is typically done to reflect changes in the\n/// object's position or shape before performing collision detection.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance in which the collision object\n///     is present. It should be a valid pointer to an existing btCollisionWorld\n///     instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject instance for which the AABB will be\n///     updated. It should be a valid pointer to an existing btCollisionObject\n///     instance.\n","externalName":"","help":"btCollisionWorld_updateSingleAabb(collisionWorld, collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_updateAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_updateAabbs(collisionWorld)\n///\n/// @desc\n/// Updates the axis-aligned bounding boxes (AABBs) of all collision objects in\n/// the btCollisionWorld. This is typically done to reflect changes in the\n/// objects' positions or shapes before performing collision detection.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance in which the collision\n///     objects are present. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n","externalName":"","help":"btCollisionWorld_updateAabbs(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_computeOverlappingPairs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_computeOverlappingPairs(collisionWorld)\n///\n/// @desc\n/// Computes and updates the list of overlapping pairs of collision objects in\n/// the btCollisionWorld. This function is typically called to determine which\n/// pairs of objects are colliding or intersecting.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld instance for which overlapping pairs\n///     will be computed. It should be a valid pointer to an existing\n///     btCollisionWorld instance.\n","externalName":"","help":"btCollisionWorld_computeOverlappingPairs(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_destroy(rayResultCallback)\n///\n/// @desc\n/// Destroys a btRayResultCallback instance, releasing the associated memory.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance to be destroyed.\n","externalName":"","help":"btRayResultCallback_destroy(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getClosestHitFraction","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getClosestHitFraction(rayResultCallback)\n///\n/// @desc\n/// Gets the closest hit fraction from a btRayResultCallback instance. The\n/// closest hit fraction is a value between 0 and 1 representing the fractional\n/// distance along the ray where the hit occurred. A value of 1 means no hit,\n/// and a value of 0 means the hit occurred at the origin of the ray.\n///\n/// @param {Pointer} rayResultCallback\n///      A pointer to the btRayResultCallback instance from which to get the\n///      closest hit fraction. It should be a valid pointer to an existing\n///      btRayResultCallback instance.\n///\n///\n/// @return {Real} The closest hit fraction (a value between 0 and 1) from the\n/// rayResultCallback instance.\n","externalName":"","help":"btRayResultCallback_getClosestHitFraction(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionObject","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionObject(rayResultCallback)\n///\n/// @desc\n/// Gets the collision object associated with a btRayResultCallback instance.\n///\n/// @param {Pointer} rayResultCallback\n///      A pointer to the btRayResultCallback instance from which to get the\n///      collision object. It should be a valid pointer to an existing\n///      btRayResultCallback instance.\n///\n/// @return {Pointer} A pointer to the btCollisionObject associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"btRayResultCallback_getCollisionObject(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionFilterGroup(rayResultCallback)\n///\n/// @desc\n/// Gets the collision filter group associated with a btRayResultCallback\n/// instance. The collision filter group is a user-defined grouping used to\n/// filter collisions.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance from which to get the\n///     collision filter group. It should be a valid pointer to an existing\n///     btRayResultCallback instance.\n///\n/// @return {Real} The collision filter group associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"btRayResultCallback_getCollisionFilterGroup(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_setCollisionFilterGroup(rayResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for a btRayResultCallback instance. The\n/// collision filter group is a user-defined grouping used to filter collisions.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance for which the collision\n///     filter group will be set. It should be a valid pointer to an existing\n///     btRayResultCallback instance.\n/// @param {Real} collisionFilterGroup\n///     The collision filter group to set for the rayResultCallback instance.\n///     This value determines how objects will filter collisions.\n","externalName":"","help":"btRayResultCallback_setCollisionFilterGroup(rayResultCallback, collisionFilterGroup)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_getCollisionFilterMask(rayResultCallback)\n///\n/// @desc\n/// Gets the collision filter mask associated with a btRayResultCallback\n/// instance.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance from which to get the\n///     collision filter mask.\n///\n/// @return {Real} The collision filter mask associated with the\n/// rayResultCallback instance.\n","externalName":"","help":"btRayResultCallback_getCollisionFilterMask(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_setCollisionFilterMask(rayResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for a btRayResultCallback instance.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance for which the collision\n///     filter mask will be set.\n/// @param {Real} collisionFilterMask\n///     The collision filter mask to set for the rayResultCallback instance.\n","externalName":"","help":"btRayResultCallback_setCollisionFilterMask(rayResultCallback, collisionFilterMask)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRayResultCallback_hasHit","argCount":0,"args":[],"documentation":"/// @func btRayResultCallback_hasHit(rayResultCallback)\n///\n/// @desc\n/// Checks whether the ray result callback has hit any object.\n///\n/// @param {Pointer} rayResultCallback\n///     A pointer to the btRayResultCallback instance to check for hits.\n///\n/// @return {Bool} True if the ray result callback has hit an object, false\n/// otherwise.\n","externalName":"","help":"btRayResultCallback_hasHit(rayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_create(rayFromWorld, rayToWorld)\n///\n/// @desc\n/// Creates a btClosestRayResultCallback instance with the specified ray\n/// parameters.\n///\n/// @param {Pointer} rayFromWorld\n///     A pointer to a btVector3 representing the starting point of the ray in\n///     world coordinates.\n/// @param {Pointer} rayToWorld\n///     A pointer to a btVector3 representing the end point of the ray in world\n///     coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestRayResultCallback\n/// instance.\n","externalName":"","help":"btClosestRayResultCallback_create(rayFromWorld, rayToWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)\n///\n/// @desc\n/// Creates a btClosestRayResultCallback instance with the specified ray\n/// parameters.\n///\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestRayResultCallback\n/// instance.\n","externalName":"","help":"btClosestRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_destroy(closestRayResultCallback)\n///\n/// @desc\n/// Destroys a btClosestRayResultCallback instance, releasing the associated\n/// memory.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance to be destroyed.\n","externalName":"","help":"btClosestRayResultCallback_destroy(closestRayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayFromWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayFromWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the starting point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the starting point of the ray.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the starting point of the ray will be\n///     copied.\n","externalName":"","help":"btClosestRayResultCallback_getRayFromWorld(closestRayResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayFromWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayFromWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the starting point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the starting point of the ray.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the starting\n///     point of the ray.\n","externalName":"","help":"btClosestRayResultCallback_getRayFromWorldArray(closestRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayToWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayToWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the end point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the end point of the ray.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the end point of the ray will be copied.\n","externalName":"","help":"btClosestRayResultCallback_getRayToWorld(closestRayResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getRayToWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getRayToWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the end point of the ray in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the end point of the ray.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the end\n///     point of the ray.\n","externalName":"","help":"btClosestRayResultCallback_getRayToWorldArray(closestRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitNormalWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the normal of the hit point in world coordinates from a\n/// btClosestRayResultCallback instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit normal.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the hit normal will be copied.\n","externalName":"","help":"btClosestRayResultCallback_getHitNormalWorld(closestRayResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitNormalWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the normal of the hit point in world coordinates from a\n/// btClosestRayResultCallback instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit normal.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the hit\n///     normal.\n","externalName":"","help":"btClosestRayResultCallback_getHitNormalWorldArray(closestRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitPointWorld(closestRayResultCallback, outVector3)\n///\n/// @desc\n/// Gets the hit point in world coordinates from a btClosestRayResultCallback\n/// instance.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit point.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the hit point will be copied.\n","externalName":"","help":"btClosestRayResultCallback_getHitPointWorld(closestRayResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestRayResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestRayResultCallback_getHitPointWorldArray(closestRayResultCallback, outArray)\n///\n/// @desc\n/// Gets the hit point in world coordinates from a btClosestRayResultCallback\n/// instance and populates an array.\n///\n/// @param {Pointer} closestRayResultCallback\n///     A pointer to the btClosestRayResultCallback instance from which to get\n///     the hit point.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the x, y, and z components of the hit\n///     point.\n","externalName":"","help":"btClosestRayResultCallback_getHitPointWorldArray(closestRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_create(rayFromWorld, rayToWorld)\n///\n/// @desc\n/// Creates a new instance of btAllHitsRayResultCallback with specified ray\n/// start and end points.\n///\n/// @param {Pointer} rayFromWorld\n///     A pointer to the starting point of the ray in world coordinates.\n/// @param {Pointer} rayToWorld\n///     A pointer to the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btAllHitsRayResultCallback\n/// instance.\n","externalName":"","help":"btAllHitsRayResultCallback_create(rayFromWorld, rayToWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)\n///\n/// @desc\n/// Creates a new instance of btAllHitsRayResultCallback with specified ray\n/// start and end points.\n///\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btAllHitsRayResultCallback\n/// instance.\n","externalName":"","help":"btAllHitsRayResultCallback_createXYZ(rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_destroy(allHitsRayResultCallback)\n///\n/// @desc\n/// Destroys a btAllHitsRayResultCallback instance and frees its associated\n/// memory.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance to be destroyed.\n","externalName":"","help":"btAllHitsRayResultCallback_destroy(allHitsRayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getCollisionObjects","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getCollisionObjects(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of collision objects from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve collision objects.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to collision objects.\n","externalName":"","help":"btAllHitsRayResultCallback_getCollisionObjects(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitNormalWorld(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit normal vectors from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit normal vectors.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to hit normal vectors.\n","externalName":"","help":"btAllHitsRayResultCallback_getHitNormalWorld(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitNormalWorldArray(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit normal vectors (in XYZ order) from a\n/// btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit normal vectors.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit normal vectors in XYZ order.\n","externalName":"","help":"btAllHitsRayResultCallback_getHitNormalWorldArray(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitPointWorld(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit points from a btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit points.\n/// @param {Array<Pointer>} outArray\n///     An array to be populated with pointers to hit points.\n","externalName":"","help":"btAllHitsRayResultCallback_getHitPointWorld(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitPointWorldArray(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit points (in XYZ order) from a\n/// btAllHitsRayResultCallback instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit points.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit points in XYZ order.\n","externalName":"","help":"btAllHitsRayResultCallback_getHitPointWorldArray(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAllHitsRayResultCallback_getHitFractions","argCount":0,"args":[],"documentation":"/// @func btAllHitsRayResultCallback_getHitFractions(allHitsRayResultCallback, outArray)\n///\n/// @desc\n/// Retrieves an array of hit fractions from a btAllHitsRayResultCallback\n/// instance.\n///\n/// @param {Pointer} allHitsRayResultCallback\n///     A pointer to the btAllHitsRayResultCallback instance from which to\n///     retrieve hit fractions.\n/// @param {Array<Real>} outArray\n///     An array to be populated with hit fractions.\n","externalName":"","help":"btAllHitsRayResultCallback_getHitFractions(allHitsRayResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_destroy(convexResultCallback)\n///\n/// @desc\n/// Destroys a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance to be destroyed.\n","externalName":"","help":"btConvexResultCallback_destroy(convexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getClosestHitFraction","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getClosestHitFraction(convexResultCallback)\n///\n/// @desc\n/// Retrieves the closest hit fraction from a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the closest hit fraction.\n///\n/// @return {Real} A real value representing the fraction along the ray where\n/// the closest collision occurred.\n","externalName":"","help":"btConvexResultCallback_getClosestHitFraction(convexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getCollisionFilterGroup(convexResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter group from a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the collision filter group.\n///\n/// @return {Real} An integer representing the group used for collision\n/// filtering.\n","externalName":"","help":"btConvexResultCallback_getCollisionFilterGroup(convexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_setCollisionFilterGroup(convexResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance for which to set the\n///     collision filter group.\n/// @param {Real} collisionFilterGroup\n///     An integer used for collision filtering.\n","externalName":"","help":"btConvexResultCallback_setCollisionFilterGroup(convexResultCallback, collisionFilterGroup)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_getCollisionFilterMask(convexResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter mask of a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance from which to retrieve\n///     the collision filter mask.\n///\n/// @return {Real} An integer representing collision filtering.\n","externalName":"","help":"btConvexResultCallback_getCollisionFilterMask(convexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_setCollisionFilterMask(convexResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for a btConvexResultCallback instance.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance for which to set the\n///     collision filter mask.\n/// @param {Real} collisionFilterMask\n///     An integer representing collision filtering.\n","externalName":"","help":"btConvexResultCallback_setCollisionFilterMask(convexResultCallback, collisionFilterMask)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConvexResultCallback_hasHit","argCount":0,"args":[],"documentation":"/// @func btConvexResultCallback_hasHit(convexResultCallback)\n///\n/// @desc\n/// Checks if the convex result callback has hit an object during a collision\n/// test.\n///\n/// @param {Pointer} convexResultCallback\n///     A pointer to the btConvexResultCallback instance to check for a hit.\n///\n/// @return {Bool} True if a hit occurred, false otherwise.\n","externalName":"","help":"btConvexResultCallback_hasHit(convexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_create(convexFromWorld, convexToWorld)\n///\n/// @desc\n/// Creates a new btClosestConvexResultCallback instance with specified\n/// from-world and to-world vectors.\n///\n/// @param {Pointer} convexFromWorld\n///     A pointer to a btVector3 representing the starting point in world\n///    coordinates.\n/// @param {Pointer} convexToWorld\n///     A pointer to a btVector3 representing the end point in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestConvexResultCallback\n/// instance.\n","externalName":"","help":"btClosestConvexResultCallback_create(convexFromWorld, convexToWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_createXYZ","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_createXYZ(convexFromWorldX, convexFromWorldY, convexFromWorldZ, convexToWorldX, convexToWorldY, convexToWorldZ)\n///\n/// @desc\n/// Creates a new btClosestConvexResultCallback instance with specified\n/// from-world and to-world vectors.\n///\n/// @param {Real} convexFromWorldX\n///     The x-coordinate of the starting point in world coordinates.\n/// @param {Real} convexFromWorldY\n///     The y-coordinate of the starting point in world coordinates.\n/// @param {Real} convexFromWorldZ\n///     The z-coordinate of the starting point in world coordinates.\n/// @param {Real} convexToWorldX\n///     The x-coordinate of the end point in world coordinates.\n/// @param {Real} convexToWorldY\n///     The y-coordinate of the end point in world coordinates.\n/// @param {Real} convexToWorldZ\n///     The z-coordinate of the end point in world coordinates.\n///\n/// @return {Pointer} A pointer to the newly created btClosestConvexResultCallback\n/// instance.\n","externalName":"","help":"btClosestConvexResultCallback_createXYZ(convexFromWorldX, convexFromWorldY, convexFromWorldZ, convexToWorldX, convexToWorldY, convexToWorldZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_destroy(closestConvexResultCallback)\n///\n/// @desc\n/// Destroys a btClosestConvexResultCallback instance, releasing its allocated\n/// resources.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance to be destroyed.\n","externalName":"","help":"btClosestConvexResultCallback_destroy(closestConvexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexFromWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexFromWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the `convexFromWorld` vector from a btClosestConvexResultCallback\n/// instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 that will receive the `convexFromWorld` vector.\n","externalName":"","help":"btClosestConvexResultCallback_getConvexFromWorld(closestConvexResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexFromWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexFromWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the `convexFromWorld` vector from a btClosestConvexResultCallback\n/// instance and populates an array with its components.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array to be populated with the components of the `convexFromWorld`\n///     vector in the order [x, y, z].\n","externalName":"","help":"btClosestConvexResultCallback_getConvexFromWorldArray(closestConvexResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexToWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexToWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the `convexToWorld` vector from a btClosestConvexResultCallback\n/// instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the `convexToWorld` vector will\n///     be stored.\n","externalName":"","help":"btClosestConvexResultCallback_getConvexToWorld(closestConvexResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getConvexToWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getConvexToWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the `convexToWorld` vector from a btClosestConvexResultCallback\n/// instance and stores it in an array.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array to store the `convexToWorld` vector components in the order\n///     [x, y, z].\n","externalName":"","help":"btClosestConvexResultCallback_getConvexToWorldArray(closestConvexResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitNormalWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitNormalWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the hit normal in world coordinates from a\n/// btClosestConvexResultCallback instance and stores it in a vector.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the hit normal will be stored.\n","externalName":"","help":"btClosestConvexResultCallback_getHitNormalWorld(closestConvexResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitNormalWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitNormalWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Retrieves the hit normal in world coordinates from a\n/// btClosestConvexResultCallback instance and stores it in an array.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Array<Real>} outArray\n///     An array where the hit normal will be stored as [x, y, z] in world\n///     coordinates.\n","externalName":"","help":"btClosestConvexResultCallback_getHitNormalWorldArray(closestConvexResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitPointWorld","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitPointWorld(closestConvexResultCallback, outVector3)\n///\n/// @desc\n/// Retrieves the hit point in world coordinates from a\n/// btClosestConvexResultCallback instance.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 instance where the hit point will be stored in\n///     world coordinates.\n","externalName":"","help":"btClosestConvexResultCallback_getHitPointWorld(closestConvexResultCallback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitPointWorldArray","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitPointWorldArray(closestConvexResultCallback, outArray)\n///\n/// @desc\n/// Gets the hit point in world coordinates as an array of Real values from a\n/// btClosestConvexResultCallback.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback from which to get the hit\n///     point in world coordinates.\n/// @param {Array<Real>} outArray\n///     An array to store the hit point in world coordinates.\n","externalName":"","help":"btClosestConvexResultCallback_getHitPointWorldArray(closestConvexResultCallback, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestConvexResultCallback_getHitCollisionObject","argCount":0,"args":[],"documentation":"/// @func btClosestConvexResultCallback_getHitCollisionObject(closestConvexResultCallback)\n///\n/// @desc\n/// Gets the hit collision object from a btClosestConvexResultCallback.\n///\n/// @param {Pointer} closestConvexResultCallback\n///     A pointer to the btClosestConvexResultCallback from which to get the hit\n///     collision object.\n///\n/// @return {Pointer} A pointer to the hit collision object, or nullptr if no\n/// collision object was hit.\n","externalName":"","help":"btClosestConvexResultCallback_getHitCollisionObject(closestConvexResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_destroy(contactResultCallback)\n///\n/// @desc\n/// Destroys a contact result callback instance, releasing associated resources.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance to be destroyed.\n","externalName":"","help":"btContactResultCallback_destroy(contactResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getCollisionFilterGroup(contactResultCallback)\n///\n/// @desc\n/// Retrieves the collision filter group from the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The collision filter group associated with the contact result\n/// callback.\n","externalName":"","help":"btContactResultCallback_getCollisionFilterGroup(contactResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setCollisionFilterGroup","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setCollisionFilterGroup(contactResultCallback, collisionFilterGroup)\n///\n/// @desc\n/// Sets the collision filter group for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} collisionFilterGroup\n///     The collision filter group to set for the contact result callback.\n","externalName":"","help":"btContactResultCallback_setCollisionFilterGroup(contactResultCallback, collisionFilterGroup)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getCollisionFilterMask(contactResultCallback)\n///\n/// @desc\n/// Gets the collision filter mask from the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The collision filter mask of the contact result callback.\n","externalName":"","help":"btContactResultCallback_getCollisionFilterMask(contactResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setCollisionFilterMask","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setCollisionFilterMask(contactResultCallback, collisionFilterMask)\n///\n/// @desc\n/// Sets the collision filter mask for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} collisionFilterMask\n///     The collision filter mask to set.\n","externalName":"","help":"btContactResultCallback_setCollisionFilterMask(contactResultCallback, collisionFilterMask)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_getClosestDistanceThreshold","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_getClosestDistanceThreshold(contactResultCallback)\n///\n/// @desc\n/// Gets the closest distance threshold for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n///\n/// @return {Real} The closest distance threshold.\n","externalName":"","help":"btContactResultCallback_getClosestDistanceThreshold(contactResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btContactResultCallback_setClosestDistanceThreshold","argCount":0,"args":[],"documentation":"/// @func btContactResultCallback_setClosestDistanceThreshold(contactResultCallback, closestDistanceThreshold)\n///\n/// @desc\n/// Sets the closest distance threshold for the contact result callback.\n///\n/// @param {Pointer} contactResultCallback\n///     A pointer to the contact result callback instance.\n/// @param {Real} closestDistanceThreshold\n///     The closest distance threshold to set.\n","externalName":"","help":"btContactResultCallback_setClosestDistanceThreshold(contactResultCallback, closestDistanceThreshold)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getNumCollisionObjects","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getNumCollisionObjects(collisionWorld)\n///\n/// @desc\n/// Gets the number of collision objects in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Real} The number of collision objects in the collision world.\n","externalName":"","help":"btCollisionWorld_getNumCollisionObjects(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_rayTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_rayTest(collisionWorld, rayFromWorld, rayToWorld, resultCallback)\n///\n/// @desc\n/// Performs a ray test in the collision world and collects the results using\n/// the provided result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} rayFromWorld\n///     A pointer to the starting point of the ray in world coordinates\n///     (btVector3).\n/// @param {Pointer} rayToWorld\n///     A pointer to the end point of the ray in world coordinates (btVector3).\n/// @param {Pointer} resultCallback\n///     A pointer to the ray result callback (btRayResultCallback) used to\n///     collect the results.\n","externalName":"","help":"btCollisionWorld_rayTest(collisionWorld, rayFromWorld, rayToWorld, resultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_rayTestXYZ","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_rayTestXYZ(collisionWorld, rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ, resultCallback)\n///\n/// @desc\n/// Performs a ray test in the collision world and collects the results using\n/// the provided result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Real} rayFromWorldX\n///     The x-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldY\n///     The y-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayFromWorldZ\n///     The z-coordinate of the starting point of the ray in world coordinates.\n/// @param {Real} rayToWorldX\n///     The x-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldY\n///     The y-coordinate of the end point of the ray in world coordinates.\n/// @param {Real} rayToWorldZ\n///     The z-coordinate of the end point of the ray in world coordinates.\n/// @param {Pointer} resultCallback\n///     A pointer to the ray result callback (btRayResultCallback) used to\n///     collect the results.\n","externalName":"","help":"btCollisionWorld_rayTestXYZ(collisionWorld, rayFromWorldX, rayFromWorldY, rayFromWorldZ, rayToWorldX, rayToWorldY, rayToWorldZ, resultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_convexSweepTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_convexSweepTest(collisionWorld, castShape, from, to, resultCallback[, allowedCcdPenetration])\n///\n/// @desc\n/// Performs a convex sweep test in the collision world using the specified cast\n/// shape and transforms, collecting the results using the provided result\n/// callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} castShape\n///     A pointer to the convex shape used for the sweep test.\n/// @param {Pointer} from\n///     A pointer to the starting transform for the sweep.\n/// @param {Pointer} to\n///     A pointer to the ending transform for the sweep.\n/// @param {Pointer} resultCallback\n///     A pointer to the convex result callback (btConvexResultCallback) used to\n///    collect the results.\n/// @param {Real} [allowedCcdPenetration]\n///     The allowed continuous collision detection (CCD) penetration. Defaults\n///     to 0.\n","externalName":"","help":"btCollisionWorld_convexSweepTest(collisionWorld, castShape, from, to, resultCallback[, allowedCcdPenetration])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_contactTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_contactTest(collisionWorld, colObj, resultCallback)\n///\n/// @desc\n/// Performs contact tests between a specific collision object and other objects\n/// in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} colObj\n///     A pointer to the collision object for which contacts are to be tested.\n/// @param {Pointer} resultCallback\n///     A pointer to the contact result callback object that will receive the\n///     contact information.\n","externalName":"","help":"btCollisionWorld_contactTest(collisionWorld, colObj, resultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_contactPairTest","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_contactPairTest(collisionWorld, colObjA, colObjB, resultCallback)\n///\n/// @desc\n/// Performs a contact pair test between two collision objects in a\n/// btCollisionWorld and invokes a result callback.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld in which the collision pair test is\n///     performed.\n/// @param {Pointer} colObjA\n///     A pointer to the first collision object in the pair to test for contact.\n/// @param {Pointer} colObjB\n///     A pointer to the second collision object in the pair to test for contact.\n/// @param {Pointer} resultCallback\n///     A pointer to the result callback to be invoked for each contact found in\n///     the pair test.\n","externalName":"","help":"btCollisionWorld_contactPairTest(collisionWorld, colObjA, colObjB, resultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_addCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_addCollisionObject(collisionWorld, collisionObject[, collisionFilterGroup[, collisionFilterMask]])\n///\n/// @desc\n/// Adds a collision object to the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object to be added.\n/// @param {Real} [collisionFilterGroup]\n///     The collision filter group for the collision object. Defaults to 1.\n/// @param {Real} [collisionFilterMask]\n///     The collision filter mask for the collision object. Defaults to -1.\n","externalName":"","help":"btCollisionWorld_addCollisionObject(collisionWorld, collisionObject[, collisionFilterGroup[, collisionFilterMask]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_refreshBroadphaseProxy","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_refreshBroadphaseProxy(collisionWorld, collisionObject)\n///\n/// @desc\n/// Refreshes the broadphase proxy for a specific collision object in the\n/// collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object for which the broadphase proxy is to\n///     be refreshed.\n","externalName":"","help":"btCollisionWorld_refreshBroadphaseProxy(collisionWorld, collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getCollisionObjectArray","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getCollisionObjectArray(collisionWorld, outArray)\n///\n/// @desc\n/// Retrieves an array of collision objects from the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Array<Pointer>} outArray\n///     An array where the collision objects will be stored.\n","externalName":"","help":"btCollisionWorld_getCollisionObjectArray(collisionWorld, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getCollisionObject(collisionWorld, index)\n///\n/// @desc\n/// Retrieves a collision object from the collision world based on the provided\n/// index.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Real} index\n///     The index of the collision object to retrieve.\n///\n/// @return {Pointer} A pointer to the retrieved collision object.\n","externalName":"","help":"btCollisionWorld_getCollisionObject(collisionWorld, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_removeCollisionObject","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_removeCollisionObject(collisionWorld, collisionObject)\n///\n/// @desc\n/// Removes a collision object from the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Pointer} collisionObject\n///     A pointer to the collision object to be removed from the collision world.\n","externalName":"","help":"btCollisionWorld_removeCollisionObject(collisionWorld, collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_performDiscreteCollisionDetection","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_performDiscreteCollisionDetection(collisionWorld)\n///\n/// @desc\n/// Triggers the discrete collision detection in the collision world, checking\n/// for collisions between objects.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n","externalName":"","help":"btCollisionWorld_performDiscreteCollisionDetection(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getDispatchInfo","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getDispatchInfo(collisionWorld)\n///\n/// @desc\n/// Gets the dispatch info associated with the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Pointer} A pointer to the dispatch info associated with the\n/// collision world.\n","externalName":"","help":"btCollisionWorld_getDispatchInfo(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_getForceUpdateAllAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_getForceUpdateAllAabbs(collisionWorld)\n///\n/// @desc\n/// Gets whether force update of all AABBs is enabled in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n///\n/// @return {Bool} Returns true if force update of all AABBs is enabled, false\n/// otherwise.\n","externalName":"","help":"btCollisionWorld_getForceUpdateAllAabbs(collisionWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCollisionWorld_setForceUpdateAllAabbs","argCount":0,"args":[],"documentation":"/// @func btCollisionWorld_setForceUpdateAllAabbs(collisionWorld, forceUpdateAllAabbs)\n///\n/// @desc\n/// Sets whether to force update all AABBs in the collision world.\n///\n/// @param {Pointer} collisionWorld\n///     A pointer to the collision world instance.\n/// @param {Bool} forceUpdateAllAabbs\n///     A boolean indicating whether to force update all AABBs.\n","externalName":"","help":"btCollisionWorld_setForceUpdateAllAabbs(collisionWorld, forceUpdateAllAabbs)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDbvtBroadphase_create","argCount":0,"args":[],"documentation":"/// @func btDbvtBroadphase_create()\n///\n/// @desc\n/// Creates a broadphase collision detection algorithm based on dynamic AABB\n/// trees (Dbvt). This broadphase algorithm is suitable for dynamic worlds where\n/// objects move frequently.\n///\n/// @return {Pointer} A pointer to the newly created btDbvtBroadphase instance.\n","externalName":"","help":"btDbvtBroadphase_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDbvtBroadphase_destroy","argCount":0,"args":[],"documentation":"/// @func btDbvtBroadphase_destroy(dbvtBroadphase)\n///\n/// @desc\n/// Destroys a btDbvtBroadphase instance, releasing associated memory and\n/// resources.\n///\n/// @param {Pointer} dbvtBroadphase\n///     A pointer to the btDbvtBroadphase instance to be destroyed.\n","externalName":"","help":"btDbvtBroadphase_destroy(dbvtBroadphase)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultCollisionConfiguration_create","argCount":0,"args":[],"documentation":"/// @func btDefaultCollisionConfiguration_create()\n///\n/// @desc\n/// Creates a new instance of the Bullet Physics default collision configuration.\n///\n/// @return {Pointer}\n///     A pointer to the newly created btDefaultCollisionConfiguration instance.\n","externalName":"","help":"btDefaultCollisionConfiguration_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultCollisionConfiguration_destroy","argCount":0,"args":[],"documentation":"/// @func btDefaultCollisionConfiguration_destroy(defaultCollisionConfiguration)\n///\n/// @desc\n/// Destroys a previously created btDefaultCollisionConfiguration instance,\n/// releasing its allocated resources.\n///\n/// @param {Pointer} defaultCollisionConfiguration\n///     A pointer to the btDefaultCollisionConfiguration instance to be\n///     destroyed.\n","externalName":"","help":"btDefaultCollisionConfiguration_destroy(defaultCollisionConfiguration)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultMotionState_create","argCount":0,"args":[],"documentation":"/// @func btDefaultMotionState_create()\n///\n/// @desc\n/// Creates a new instance of btDefaultMotionState, which represents the default\n/// implementation of a motion state for rigid bodies in a physics simulation.\n///\n/// @return {Pointer} A pointer to the newly created btDefaultMotionState\n/// instance.\n","externalName":"","help":"btDefaultMotionState_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultMotionState_destroy","argCount":0,"args":[],"documentation":"/// @func btDefaultMotionState_destroy(defaultMotionState)\n///\n/// @desc\n/// Destroys a btDefaultMotionState instance, releasing the associated resources.\n///\n/// @param {Pointer} defaultMotionState\n///     A pointer to the btDefaultMotionState instance to be destroyed.\n","externalName":"","help":"btDefaultMotionState_destroy(defaultMotionState)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_create","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_create(dispatcher, pairCache, constraintSolver, collisionConfiguration)\n///\n/// @desc\n/// Creates a btDiscreteDynamicsWorld instance for simulating discrete dynamic\n/// rigid body physics.\n///\n/// @param {Pointer} dispatcher\n///     A pointer to the btDispatcher instance that handles collision detection\n///     and resolution.\n/// @param {Pointer} pairCache\n///     A pointer to the btBroadphaseInterface instance that manages overlapping\n///     pairs efficiently.\n/// @param {Pointer} constraintSolver\n///     A pointer to the btConstraintSolver instance that solves constraints and\n///     forces between rigid bodies.\n/// @param {Pointer} collisionConfiguration\n///     A pointer to the btCollisionConfiguration instance that provides\n///     collision-related configuration settings.\n/// @return {Pointer}\n///     A pointer to the created btDiscreteDynamicsWorld instance for simulating\n///     physics.\n","externalName":"","help":"btDiscreteDynamicsWorld_create(dispatcher, pairCache, constraintSolver, collisionConfiguration)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_destroy","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_destroy(discreteDynamicsWorld)\n///\n/// @desc\n/// Destroys a btDiscreteDynamicsWorld instance, releasing its allocated\n/// resources.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance to be destroyed.\n","externalName":"","help":"btDiscreteDynamicsWorld_destroy(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_stepSimulation","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_stepSimulation(discreteDynamicsWorld, timeStep[, maxSubSteps[, fixedTimeStep]])\n///\n/// @desc\n/// Steps the dynamics simulation forward by the given time step, allowing for\n/// substeps if specified.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Real} timeStep\n///     The time step to advance the simulation.\n/// @param {Real} [maxSubSteps]\n///     The maximum number of substeps allowed in this simulation step. Defaults\n///     to 1.\n/// @param {Real} [fixedTimeStep]\n///     The fixed time step for each substep.\n","externalName":"","help":"btDiscreteDynamicsWorld_stepSimulation(discreteDynamicsWorld, timeStep[, maxSubSteps[, fixedTimeStep]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_addConstraint","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_addConstraint(discreteDynamicsWorld, constraint[, disableCollisionBetweenLinkedBodies])\n///\n/// @desc\n/// Adds a constraint to the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} constraint\n///     A pointer to the btTypedConstraint object to be added.\n/// @param {Bool} [disableCollisionBetweenLinkedBodies]\n///     If true, disable collisions between linked bodies for this constraint.\n///     Defaults to false.\n","externalName":"","help":"btDiscreteDynamicsWorld_addConstraint(discreteDynamicsWorld, constraint[, disableCollisionBetweenLinkedBodies])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_removeConstraint","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_removeConstraint(discreteDynamicsWorld, constraint)\n///\n/// @desc\n/// Removes a constraint from the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} constraint\n///     A pointer to the btTypedConstraint object to be removed.\n","externalName":"","help":"btDiscreteDynamicsWorld_removeConstraint(discreteDynamicsWorld, constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_addAction","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_addAction(discreteDynamicsWorld, action)\n///\n/// @desc\n/// Adds a physics action to the dynamics world.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} action\n///     A pointer to the btActionInterface object to be added to the dynamics\n///     world.\n","externalName":"","help":"btDiscreteDynamicsWorld_addAction(discreteDynamicsWorld, action)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_removeAction","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_removeAction(discreteDynamicsWorld, action)\n///\n/// @desc\n/// Removes a physics action from the dynamics world.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} action\n///     A pointer to the btActionInterface object to be removed from the\n///     dynamics world.\n","externalName":"","help":"btDiscreteDynamicsWorld_removeAction(discreteDynamicsWorld, action)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getCollisionWorld","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getCollisionWorld(discreteDynamicsWorld)\n///\n/// @desc\n/// Gets the collision world associated with the btDiscreteDynamicsWorld\n/// instance.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n///\n/// @return {Pointer}\n///     A pointer to the associated collision world.\n","externalName":"","help":"btDiscreteDynamicsWorld_getCollisionWorld(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_setGravity","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_setGravity(discreteDynamicsWorld, gravity)\n///\n/// @desc\n/// Sets the gravity for the btDiscreteDynamicsWorld instance.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} gravity\n///     A pointer to a btVector3 representing the gravity to be set.\n","externalName":"","help":"btDiscreteDynamicsWorld_setGravity(discreteDynamicsWorld, gravity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_setGravityXYZ","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_setGravityXYZ(discreteDynamicsWorld, gravityX, gravityY, gravityZ)\n///\n/// @desc\n/// Sets the gravity for the btDiscreteDynamicsWorld instance using individual\n/// components along the x, y, and z axes.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Real} gravityX\n///     The x-component of the gravity to be set.\n/// @param {Real} gravityY\n///     The y-component of the gravity to be set.\n/// @param {Real} gravityZ\n///     The z-component of the gravity to be set.\n","externalName":"","help":"btDiscreteDynamicsWorld_setGravityXYZ(discreteDynamicsWorld, gravityX, gravityY, gravityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getGravity","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getGravity(discreteDynamicsWorld, outVector3)\n///\n/// @desc\n/// Retrieves the gravity vector from the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the gravity vector will be stored.\n","externalName":"","help":"btDiscreteDynamicsWorld_getGravity(discreteDynamicsWorld, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_addRigidBody","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_addRigidBody(discreteDynamicsWorld, rigidBody[, group, mask])\n///\n/// @desc\n/// Adds a rigid body to the dynamics world.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     Pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} rigidBody\n///     Pointer to the btRigidBody instance to be added.\n/// @param {Real} [group]\n///     Collision group to which the rigid body belongs.\n/// @param {Real} [mask]\n///     Collision mask for the rigid body.\n","externalName":"","help":"btDiscreteDynamicsWorld_addRigidBody(discreteDynamicsWorld, rigidBody[, group, mask])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_removeRigidBody","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_removeRigidBody(discreteDynamicsWorld, rigidBody)\n///\n/// @desc\n/// Removes a rigid body from the dynamics world.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     Pointer to the btDiscreteDynamicsWorld instance.\n/// @param {Pointer} rigidBody\n///     Pointer to the btRigidBody instance to be removed.\n","externalName":"","help":"btDiscreteDynamicsWorld_removeRigidBody(discreteDynamicsWorld, rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_setConstraintSolver","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_setConstraintSolver(discreteDynamicsWorld, solver)\n///\n/// @desc\n/// Sets the constraint solver for the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Pointer} solver\n///     A pointer to the btConstraintSolver to be set as the solver.\n","externalName":"","help":"btDiscreteDynamicsWorld_setConstraintSolver(discreteDynamicsWorld, solver)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getConstraintSolver","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getConstraintSolver(discreteDynamicsWorld)\n///\n/// @desc\n/// Retrieves the constraint solver from the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n///\n/// @return {Pointer} Returns a pointer to the btConstraintSolver associated\n/// with the world.\n","externalName":"","help":"btDiscreteDynamicsWorld_getConstraintSolver(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getNumConstraints","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getNumConstraints(discreteDynamicsWorld)\n///\n/// @desc\n/// Gets the total number of constraints in the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n///\n/// @return {Real} Returns the total number of constraints in the dynamics world.\n","externalName":"","help":"btDiscreteDynamicsWorld_getNumConstraints(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getConstraint","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getConstraint(discreteDynamicsWorld, index)\n///\n/// @desc\n/// Gets a constraint at the specified index from the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Real} index\n///     The index of the constraint to retrieve.\n///\n/// @return {Pointer} Returns a pointer to the constraint at the specified index.\n","externalName":"","help":"btDiscreteDynamicsWorld_getConstraint(discreteDynamicsWorld, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getWorldType","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getWorldType(discreteDynamicsWorld)\n///\n/// @desc\n/// Gets the world type for the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n///\n/// @return {Real} Returns the world type as an integer.\n","externalName":"","help":"btDiscreteDynamicsWorld_getWorldType(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_clearForces","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_clearForces(discreteDynamicsWorld)\n///\n/// @desc\n/// Clears all applied forces and torques on objects within the\n/// btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n","externalName":"","help":"btDiscreteDynamicsWorld_clearForces(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_applyGravity","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_applyGravity(discreteDynamicsWorld)\n///\n/// @desc\n/// Applies gravity to all objects within the btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} discreteDynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n","externalName":"","help":"btDiscreteDynamicsWorld_applyGravity(discreteDynamicsWorld)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDiscreteDynamicsWorld_getNonStaticRigidBodies","argCount":0,"args":[],"documentation":"/// @func btDiscreteDynamicsWorld_getNonStaticRigidBodies(dynamicsWorld, outArray)\n///\n/// @desc\n/// Retrieves an array of pointers to non-static rigid bodies in the\n/// btDiscreteDynamicsWorld.\n///\n/// @param {Pointer} dynamicsWorld\n///     A pointer to the btDiscreteDynamicsWorld object.\n/// @param {Array<Pointer>} outArray\n///     An array to store pointers to non-static rigid bodies. This array will\n///     be populated by the function.\n","externalName":"","help":"btDiscreteDynamicsWorld_getNonStaticRigidBodies(dynamicsWorld, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_create","argCount":0,"args":[],"documentation":"/// @func btQuaternion_create([x[, y[, z[, w]]])\n///\n/// @desc\n/// Creates a new quaternion with the specified x, y, z, and w components.\n///\n/// @param {Real} [x]\n///     The x component of the quaternion. Default is 0.\n/// @param {Real} [y]\n///     The y component of the quaternion. Default is 0.\n/// @param {Real} [z]\n///     The z component of the quaternion. Default is 0.\n/// @param {Real} [w]\n///     The w component of the quaternion. Default is 1.\n///\n/// @return {Pointer} A pointer to the created btQuaternion.\n","externalName":"","help":"btQuaternion_create([x[, y[, z[, w]]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromAxisAngle","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromAxisAngle(axis, angle)\n///\n/// @desc\n/// Creates a new quaternion representing a rotation around the specified axis\n/// by the given angle.\n///\n/// @param {Pointer} axis\n///     A pointer to a btVector3 representing the axis of rotation.\n/// @param {Real} angle\n///     The angle of rotation in radians.\n///\n/// @return {Pointer} A pointer to the newly created btQuaternion representing\n/// the rotation.\n","externalName":"","help":"btQuaternion_createFromAxisAngle(axis, angle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromAxisAngleXYZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromAxisAngleXYZ(axisX, axisY, axisZ, angle)\n///\n/// @desc\n/// Creates a new quaternion representing a rotation around the specified axis\n/// by the given angle.\n///\n/// @param {Real} axisX\n///     The x-component of the axis of rotation.\n/// @param {Real} axisY\n///     The y-component of the axis of rotation.\n/// @param {Real} axisZ\n///     The z-component of the axis of rotation.\n/// @param {Real} angle\n///     The angle of rotation in radians.\n///\n/// @return {Pointer} A pointer to the newly created btQuaternion representing\n/// the rotation.\n","externalName":"","help":"btQuaternion_createFromAxisAngleXYZ(axisX, axisY, axisZ, angle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_createFromEuler","argCount":0,"args":[],"documentation":"/// @func btQuaternion_createFromEuler(yaw, pitch, roll)\n///\n/// @desc\n/// Creates a new quaternion representing a rotation using Euler angles (yaw,\n/// pitch, roll).\n///\n/// @param {Real} yaw\n///     The yaw angle (rotation around the vertical axis) in radians.\n/// @param {Real} pitch\n///     The pitch angle (rotation around the lateral axis) in radians.\n/// @param {Real} roll\n///     The roll angle (rotation around the longitudinal axis) in radians.\n///\n/// @return {Pointer} A pointer to the newly created btQuaternion representing\n/// the rotation.\n","externalName":"","help":"btQuaternion_createFromEuler(yaw, pitch, roll)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_destroy","argCount":0,"args":[],"documentation":"/// @func btQuaternion_destroy(quaternion)\n///\n/// @desc\n/// Destroys a btQuaternion object.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object to be deallocated.\n","externalName":"","help":"btQuaternion_destroy(quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getX","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getX(quaternion)\n///\n/// @desc\n/// Gets the x-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n///\n/// @return {Real} The x-component of the quaternion.\n","externalName":"","help":"btQuaternion_getX(quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setX","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setX(quaternion, x)\n///\n/// @desc\n/// Sets the x-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n/// @param {Real} x\n///     The value to set as the x-component of the quaternion.\n","externalName":"","help":"btQuaternion_setX(quaternion, x)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getY","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getY(quaternion)\n///\n/// @desc\n/// Gets the y-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n///\n/// @return {Real} The y-component of the quaternion.\n","externalName":"","help":"btQuaternion_getY(quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setY","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setY(quaternion, y)\n///\n/// @desc\n/// Sets the y-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n/// @param {Real} y\n///     The value to set as the y-component of the quaternion.\n","externalName":"","help":"btQuaternion_setY(quaternion, y)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getZ(quaternion)\n///\n/// @desc\n/// Gets the z-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n///\n/// @return {Real} The z-component of the quaternion.\n","externalName":"","help":"btQuaternion_getZ(quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setZ","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setZ(quaternion, z)\n///\n/// @desc\n/// Sets the z-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n/// @param {Real} z\n///     The value to set as the z-component of the quaternion.\n","externalName":"","help":"btQuaternion_setZ(quaternion, z)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_getW","argCount":0,"args":[],"documentation":"/// @func btQuaternion_getW(quaternion)\n///\n/// @desc\n/// Gets the w-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n///\n/// @return {Real} The w-component of the quaternion.\n","externalName":"","help":"btQuaternion_getW(quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setW","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setW(quaternion, w)\n///\n/// @desc\n/// Sets the w-component of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n/// @param {Real} w\n///     The value to set as the w-component of the quaternion.\n","externalName":"","help":"btQuaternion_setW(quaternion, w)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btQuaternion_setValue","argCount":0,"args":[],"documentation":"/// @func btQuaternion_setValue(quaternion, x, y, z, w)\n///\n/// @desc\n/// Sets the components of a btQuaternion.\n///\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion object.\n/// @param {Real} x\n///     The x-component value to set.\n/// @param {Real} y\n///     The y-component value to set.\n/// @param {Real} z\n///     The z-component value to set.\n/// @param {Real} w\n///     The w-component value to set.\n","externalName":"","help":"btQuaternion_setValue(quaternion, x, y, z, w)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_create","argCount":0,"args":[],"documentation":"/// @func btRigidBody_create(mass, motionState, collisionShape[, localInertia])\n///\n/// @desc\n/// Creates a new instance of a btRigidBody.\n///\n/// @param {Real} mass\n///     The mass of the rigid body. Use 0 to make a static rigid body.\n/// @param {Pointer} motionState\n///     A pointer to the btMotionState object representing the motion state for\n///     the rigid body.\n/// @param {Pointer} collisionShape\n///     A pointer to the btCollisionShape object representing the collision\n///     shape for the rigid body.\n/// @param {Pointer} [localInertia]\n///     A pointer to a btVector3 object representing the local inertia for the\n///     rigid body. Defaults to (0, 0, 0).\n///\n/// @return {Pointer} A pointer to the newly created btRigidBody instance.\n","externalName":"","help":"btRigidBody_create(mass, motionState, collisionShape[, localInertia])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_destroy","argCount":0,"args":[],"documentation":"/// @func btRigidBody_destroy(rigidBody)\n///\n/// @desc\n/// Destroys an instance of a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object to be destroyed.\n","externalName":"","help":"btRigidBody_destroy(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_upcast","argCount":0,"args":[],"documentation":"/// @func btRigidBody_upcast(collisionObject)\n///\n/// @desc\n/// Upcasts a btCollisionObject to a btRigidBody, if possible.\n///\n/// @param {Pointer} collisionObject\n///     A pointer to the btCollisionObject object.\n///\n/// @return {Pointer} A pointer to the upcasted btRigidBody, or nullptr if the\n/// upcast is not possible.\n","externalName":"","help":"btRigidBody_upcast(collisionObject)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyGravity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyGravity(rigidBody)\n///\n/// @desc\n/// Applies gravity to a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object to which gravity will be applied.\n","externalName":"","help":"btRigidBody_applyGravity(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_clearGravity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_clearGravity(rigidBody)\n///\n/// @desc\n/// Clears any applied gravity from a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object from which gravity will be cleared.\n","externalName":"","help":"btRigidBody_clearGravity(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setGravity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setGravity(rigidBody, gravity)\n///\n/// @desc\n/// Sets the gravity for a rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} gravity\n///     A pointer to a btVector3 representing the gravity to be set.\n","externalName":"","help":"btRigidBody_setGravity(rigidBody, gravity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setGravityXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setGravityXYZ(rigidBody, gravityX, gravityY, gravityZ)\n///\n/// @desc\n/// Sets the gravity for a rigid body using individual components (x, y, z).\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} gravityX\n///     The x-component of the gravity.\n/// @param {Real} gravityY\n///     The y-component of the gravity.\n/// @param {Real} gravityZ\n///     The z-component of the gravity.\n","externalName":"","help":"btRigidBody_setGravityXYZ(rigidBody, gravityX, gravityY, gravityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getGravity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getGravity(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the gravity applied to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 object that will receive the gravity.\n","externalName":"","help":"btRigidBody_getGravity(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setDamping","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setDamping(rigidBody, linearDamping, angularDamping)\n///\n/// @desc\n/// Sets the linear and angular damping for the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} linearDamping\n///     The linear damping factor.\n/// @param {Real} angularDamping\n///     The angular damping factor.\n","externalName":"","help":"btRigidBody_setDamping(rigidBody, linearDamping, angularDamping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getLinearDamping","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getLinearDamping(rigidBody)\n///\n/// @desc\n/// Gets the linear damping factor of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The linear damping factor of the rigid body.\n","externalName":"","help":"btRigidBody_getLinearDamping(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getAngularDamping","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getAngularDamping(rigidBody)\n///\n/// @desc\n/// Gets the angular damping factor of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The angular damping factor of the rigid body.\n","externalName":"","help":"btRigidBody_getAngularDamping(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getLinearSleepingThreshold","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getLinearSleepingThreshold(rigidBody)\n///\n/// @desc\n/// Gets the linear sleeping threshold of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The linear sleeping threshold of the rigid body.\n","externalName":"","help":"btRigidBody_getLinearSleepingThreshold(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getAngularSleepingThreshold","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getAngularSleepingThreshold(rigidBody)\n///\n/// @desc\n/// Gets the angular sleeping threshold of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The angular sleeping threshold of the rigid body.\n","externalName":"","help":"btRigidBody_getAngularSleepingThreshold(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyDamping","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyDamping(rigidBody, timeStep)\n///\n/// @desc\n/// Applies damping to the rigid body for the given time step.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} timeStep\n///     The time step for the damping calculation.\n","externalName":"","help":"btRigidBody_applyDamping(rigidBody, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getCollisionShape","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getCollisionShape(rigidBody)\n///\n/// @desc\n/// Gets the collision shape of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Pointer} A pointer to the btCollisionShape associated with the\n/// rigid body.\n","externalName":"","help":"btRigidBody_getCollisionShape(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setMassProps","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setMassProps(rigidBody, mass, inertia)\n///\n/// @desc\n/// Sets the mass and inertia tensor properties for the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} mass\n///     The mass of the rigid body.\n/// @param {Pointer} inertia\n///     A pointer to a btVector3 representing the inertia of the rigid body.\n","externalName":"","help":"btRigidBody_setMassProps(rigidBody, mass, inertia)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setMassPropsXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setMassPropsXYZ(rigidBody, mass, inertiaX, inertiaY, inertiaZ)\n///\n/// @desc\n/// Sets the mass and inertia tensor properties for the rigid body using\n/// individual components for inertia.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} mass\n///     The mass of the rigid body.\n/// @param {Real} inertiaX\n///     The x-component of the inertia tensor.\n/// @param {Real} inertiaY\n///     The y-component of the inertia tensor.\n/// @param {Real} inertiaZ\n///     The z-component of the inertia tensor.\n","externalName":"","help":"btRigidBody_setMassPropsXYZ(rigidBody, mass, inertiaX, inertiaY, inertiaZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getLinearFactor","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getLinearFactor(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the linear factor of the btRigidBody, which controls the linear\n/// motion's freedom along each axis.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the linear factor will be copied.\n","externalName":"","help":"btRigidBody_getLinearFactor(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setLinearFactor","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setLinearFactor(rigidBody, linearFactor)\n///\n/// @desc\n/// Sets the linear factor of the btRigidBody, which controls the linear\n/// motion's freedom along each axis.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} linearFactor\n///     A pointer to a btVector3 representing the linear factor.\n","externalName":"","help":"btRigidBody_setLinearFactor(rigidBody, linearFactor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getInvMass","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getInvMass(rigidBody)\n///\n/// @desc\n/// Gets the inverse mass of the btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The inverse mass of the rigid body. Returns 0 for bodies with\n/// zero mass.\n","externalName":"","help":"btRigidBody_getInvMass(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getMass","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getMass(rigidBody)\n///\n/// @desc\n/// Gets the mass of the btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The mass of the rigid body.\n","externalName":"","help":"btRigidBody_getMass(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_integrateVelocities","argCount":0,"args":[],"documentation":"/// @func btRigidBody_integrateVelocities(rigidBody, step)\n///\n/// @desc\n/// Integrates rigid body velocities over a specified time step.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} step\n///     The time step for integration.\n","externalName":"","help":"btRigidBody_integrateVelocities(rigidBody, step)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setCenterOfMassTransform","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setCenterOfMassTransform(rigidBody, transform)\n///\n/// @desc\n/// Sets the center of mass transform for the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} transform\n///     A pointer to the btTransform representing the new center of mass\n///     transform.\n","externalName":"","help":"btRigidBody_setCenterOfMassTransform(rigidBody, transform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralForce","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralForce(rigidBody, force)\n///\n/// @desc\n/// Applies a central force to a rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} force\n///     A pointer to a btVector3 representing the central force to apply.\n","externalName":"","help":"btRigidBody_applyCentralForce(rigidBody, force)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralForceXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralForceXYZ(rigidBody, forceX, forceY, forceZ)\n///\n/// @desc\n/// Applies a central force to a rigid body using individual components.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} forceX\n///     The x-component of the central force to apply.\n/// @param {Real} forceY\n///     The y-component of the central force to apply.\n/// @param {Real} forceZ\n///     The z-component of the central force to apply.\n","externalName":"","help":"btRigidBody_applyCentralForceXYZ(rigidBody, forceX, forceY, forceZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getTotalForce","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getTotalForce(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the total force applied to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the total force.\n","externalName":"","help":"btRigidBody_getTotalForce(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getTotalTorque","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getTotalTorque(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the total torque applied to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the total torque.\n","externalName":"","help":"btRigidBody_getTotalTorque(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getInvInertiaDiagLocal","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getInvInertiaDiagLocal(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the inverse of the local inertia diagonal of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the inverse inertia diagonal.\n","externalName":"","help":"btRigidBody_getInvInertiaDiagLocal(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setInvInertiaDiagLocal","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setInvInertiaDiagLocal(rigidBody, diagInvInertia)\n///\n/// @desc\n/// Sets the inverse of the local inertia diagonal of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} diagInvInertia\n///     A pointer to a btVector3 representing the inverse inertia diagonal.\n","externalName":"","help":"btRigidBody_setInvInertiaDiagLocal(rigidBody, diagInvInertia)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setSleepingThresholds","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setSleepingThresholds(rigidBody, linear, angular)\n///\n/// @desc\n/// Sets the thresholds for when the rigid body is considered sleeping.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} linear\n///     The linear sleeping threshold. If the linear velocity is below this\n///     threshold, the body may go to sleep.\n/// @param {Real} angular\n///     The angular sleeping threshold. If the angular velocity is below this\n///     threshold, the body may go to sleep.\n","externalName":"","help":"btRigidBody_setSleepingThresholds(rigidBody, linear, angular)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyTorque","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyTorque(rigidBody, torque)\n///\n/// @desc\n/// Applies a torque to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} torque\n///     A pointer to a btVector3 representing the torque to apply.\n","externalName":"","help":"btRigidBody_applyTorque(rigidBody, torque)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyForce","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyForce(rigidBody, force, relPos)\n///\n/// @desc\n/// Applies a force to a rigid body at a given position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} force\n///     A pointer to a btVector3 representing the force to apply.\n/// @param {Pointer} relPos\n///     A pointer to a btVector3 representing the position where the force is\n///     applied, relative to the center of mass.\n","externalName":"","help":"btRigidBody_applyForce(rigidBody, force, relPos)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyForceXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyForceXYZ(rigidBody, forceX, forceY, forceZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n/// Applies a force to a rigid body at a given position using individual components.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} forceX\n///     The x-component of the force to apply.\n/// @param {Real} forceY\n///     The y-component of the force to apply.\n/// @param {Real} forceZ\n///     The z-component of the force to apply.\n/// @param {Real} relPosX\n///     The x-component of the position where the force is applied, relative to\n///     the center of mass.\n/// @param {Real} relPosY\n///     The y-component of the position where the force is applied, relative\n///     to the center of mass.\n/// @param {Real} relPosZ\n///     The z-component of the position where the force is applied, relative to\n///     the center of mass.\n","externalName":"","help":"btRigidBody_applyForceXYZ(rigidBody, forceX, forceY, forceZ, relPosX, relPosY, relPosZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralImpulse(rigidBody, impulse)\n///\n/// @desc\n/// Applies an impulse to the center of mass of a rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} impulse\n///     A pointer to a btVector3 representing the impulse to apply.\n","externalName":"","help":"btRigidBody_applyCentralImpulse(rigidBody, impulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ)\n///\n/// @desc\n/// Applies an impulse to the center of mass of a rigid body using individual\n/// components.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} impulseX\n///     The x-component of the impulse to apply.\n/// @param {Real} impulseY\n///     The y-component of the impulse to apply.\n/// @param {Real} impulseZ\n///     The z-component of the impulse to apply.\n","externalName":"","help":"btRigidBody_applyCentralImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyTorqueImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyTorqueImpulse(rigidBody, torque)\n///\n/// @desc\n/// Applies an impulse torque to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} torque\n///     A pointer to a btVector3 representing the impulse torque to apply.\n","externalName":"","help":"btRigidBody_applyTorqueImpulse(rigidBody, torque)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyTorqueImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyTorqueImpulseXYZ(rigidBody, torqueX, torqueY, torqueZ)\n///\n/// @desc\n/// Applies an impulse torque to the rigid body using individual torque\n/// components along the axes.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} torqueX\n///     The torque along the X-axis.\n/// @param {Real} torqueY\n///     The torque along the Y-axis.\n/// @param {Real} torqueZ\n///     The torque along the Z-axis.\n","externalName":"","help":"btRigidBody_applyTorqueImpulseXYZ(rigidBody, torqueX, torqueY, torqueZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyImpulse(rigidBody, impulse, relPos)\n///\n/// @desc\n/// Applies an impulse to a btRigidBody at a relative position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object to which the impulse is applied.\n/// @param {Pointer} impulse\n///     A pointer to a btVector3 representing the impulse to apply.\n/// @param {Pointer} relPos\n///     A pointer to a btVector3 representing the relative position where the\n///     impulse is applied.\n","externalName":"","help":"btRigidBody_applyImpulse(rigidBody, impulse, relPos)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n/// Applies an impulse to a btRigidBody at a specified position in world\n/// coordinates.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} impulseX\n///     The x-component of the impulse to apply.\n/// @param {Real} impulseY\n///     The y-component of the impulse to apply.\n/// @param {Real} impulseZ\n///     The z-component of the impulse to apply.\n/// @param {Real} relPosX\n///     The x-component of the position relative to the center of mass where the\n///     impulse is applied.\n/// @param {Real} relPosY\n///     The y-component of the position relative to the center of mass where the\n///     impulse is applied.\n/// @param {Real} relPosZ\n///     The z-component of the position relative to the center of mass where the\n///     impulse is applied.\n","externalName":"","help":"btRigidBody_applyImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ, relPosX, relPosY, relPosZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyPushImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyPushImpulse(rigidBody, impulse, relPos)\n///\n/// @desc\n/// Applies a push impulse to the rigid body at a relative position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} impulse\n///     A pointer to a btVector3 representing the impulse to apply.\n/// @param {Pointer} relPos\n///     A pointer to a btVector3 representing the relative position where the\n///    impulse is applied.\n","externalName":"","help":"btRigidBody_applyPushImpulse(rigidBody, impulse, relPos)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyPushImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyPushImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ, relPosX, relPosY, relPosZ)\n///\n/// @desc\n/// Applies a push impulse to the rigid body at a specified relative position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} impulseX\n///     The X component of the impulse to apply.\n/// @param {Real} impulseY\n///     The Y component of the impulse to apply.\n/// @param {Real} impulseZ\n///     The Z component of the impulse to apply.\n/// @param {Real} relPosX\n///     The X component of the relative position where the impulse is applied.\n/// @param {Real} relPosY\n///     The Y component of the relative position where the impulse is applied.\n/// @param {Real} relPosZ\n///     The Z component of the relative position where the impulse is applied.\n","externalName":"","help":"btRigidBody_applyPushImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ, relPosX, relPosY, relPosZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getPushVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getPushVelocity(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the push velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the push velocity.\n","externalName":"","help":"btRigidBody_getPushVelocity(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getTurnVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getTurnVelocity(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the turn velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the turn velocity.\n","externalName":"","help":"btRigidBody_getTurnVelocity(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setPushVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setPushVelocity(rigidBody, velocity)\n///\n/// @desc\n/// Sets the push velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} velocity\n///     A pointer to a btVector3 representing the push velocity to set.\n","externalName":"","help":"btRigidBody_setPushVelocity(rigidBody, velocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setPushVelocityXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setPushVelocityXYZ(rigidBody, velocityX, velocityY, velocityZ)\n///\n/// @desc\n/// Sets the push velocity of the rigid body using individual components in the\n/// XYZ axes.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} velocityX\n///     The push velocity along the X-axis.\n/// @param {Real} velocityY\n///     The push velocity along the Y-axis.\n/// @param {Real} velocityZ\n///     The push velocity along the Z-axis.\n","externalName":"","help":"btRigidBody_setPushVelocityXYZ(rigidBody, velocityX, velocityY, velocityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setTurnVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setTurnVelocity(rigidBody, velocity)\n///\n/// @desc\n/// Sets the turn velocity of the rigid body using a btVector3.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} velocity\n///     A pointer to a btVector3 representing the turn velocity to set.\n","externalName":"","help":"btRigidBody_setTurnVelocity(rigidBody, velocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setTurnVelocityXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setTurnVelocityXYZ(rigidBody, velocityX, velocityY, velocityZ)\n///\n/// @desc\n/// Sets the turn velocity of the rigid body using individual components in the\n/// XYZ axes.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} velocityX\n///     The turn velocity along the X-axis.\n/// @param {Real} velocityY\n///     The turn velocity along the Y-axis.\n/// @param {Real} velocityZ\n///     The turn velocity along the Z-axis.\n","externalName":"","help":"btRigidBody_setTurnVelocityXYZ(rigidBody, velocityX, velocityY, velocityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralPushImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralPushImpulse(rigidBody, impulse)\n///\n/// @desc\n/// Applies a central push impulse to the rigid body using a btVector3.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} impulse\n///     A pointer to a btVector3 representing the central push impulse to apply.\n","externalName":"","help":"btRigidBody_applyCentralPushImpulse(rigidBody, impulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyCentralPushImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyCentralPushImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ)\n///\n/// @desc\n/// Applies a central push impulse to the rigid body using individual components\n/// in the XYZ axes.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} impulseX\n///     The impulse along the X-axis.\n/// @param {Real} impulseY\n///     The impulse along the Y-axis.\n/// @param {Real} impulseZ\n///     The impulse along the Z-axis.\n","externalName":"","help":"btRigidBody_applyCentralPushImpulseXYZ(rigidBody, impulseX, impulseY, impulseZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyTorqueTurnImpulse","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyTorqueTurnImpulse(rigidBody, torque)\n///\n/// @desc\n/// Applies a torque turn impulse to the rigid body using a btVector3.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} torque\n///     A pointer to a btVector3 representing the torque turn impulse to apply.\n","externalName":"","help":"btRigidBody_applyTorqueTurnImpulse(rigidBody, torque)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_applyTorqueTurnImpulseXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_applyTorqueTurnImpulseXYZ(rigidBody, torqueX, torqueY, torqueZ)\n///\n/// @desc\n/// Applies a torque turn impulse to the rigid body using individual components\n/// in the XYZ axes.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} torqueX\n///     The torque impulse along the X-axis.\n/// @param {Real} torqueY\n///     The torque impulse along the Y-axis.\n/// @param {Real} torqueZ\n///     The torque impulse along the Z-axis.\n","externalName":"","help":"btRigidBody_applyTorqueTurnImpulseXYZ(rigidBody, torqueX, torqueY, torqueZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_clearForces","argCount":0,"args":[],"documentation":"/// @func btRigidBody_clearForces(rigidBody)\n///\n/// @desc\n/// Clears all forces and torques applied to the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n","externalName":"","help":"btRigidBody_clearForces(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_updateInertiaTensor","argCount":0,"args":[],"documentation":"/// @func btRigidBody_updateInertiaTensor(rigidBody)\n///\n/// @desc\n/// Recalculates the inertia tensor of the rigid body based on its current mass\n/// and shape.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n","externalName":"","help":"btRigidBody_updateInertiaTensor(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getCenterOfMassPosition","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getCenterOfMassPosition(rigidBody, outVector3)\n///\n/// @desc\n/// Retrieves the center of mass position of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the center of mass position.\n","externalName":"","help":"btRigidBody_getCenterOfMassPosition(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getOrientation","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getOrientation(rigidBody, outQuaternion)\n///\n/// @desc\n/// Retrieves the orientation (rotation) of the rigid body as a quaternion.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outQuaternion\n///     A pointer to a btQuaternion to store the orientation.\n","externalName":"","help":"btRigidBody_getOrientation(rigidBody, outQuaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getCenterOfMassTransform","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getCenterOfMassTransform(rigidBody, outTransform)\n///\n/// @desc\n/// Retrieves the transform representing the center of mass of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outTransform\n///     A pointer to a btTransform to store the center of mass transform.\n","externalName":"","help":"btRigidBody_getCenterOfMassTransform(rigidBody, outTransform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getLinearVelocity(rigidBody, outVector3)\n///\n/// @desc\n/// Retrieves the linear velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the linear velocity.\n","externalName":"","help":"btRigidBody_getLinearVelocity(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getAngularVelocity(rigidBody, outVector3)\n///\n/// @desc\n/// Retrieves the angular velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the angular velocity.\n","externalName":"","help":"btRigidBody_getAngularVelocity(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setLinearVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setLinearVelocity(rigidBody, linearVelocity)\n///\n/// @desc\n/// Sets the linear velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} linearVelocity\n///     A pointer to a btVector3 representing the linear velocity.\n","externalName":"","help":"btRigidBody_setLinearVelocity(rigidBody, linearVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setLinearVelocityXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setLinearVelocityXYZ(rigidBody, linearVelocityX, linearVelocityY, linearVelocityZ)\n///\n/// @desc\n/// Sets the linear velocity of the rigid body using individual components.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} linearVelocityX\n///     The linear velocity along the X-axis.\n/// @param {Real} linearVelocityY\n///     The linear velocity along the Y-axis.\n/// @param {Real} linearVelocityZ\n///     The linear velocity along the Z-axis.\n","externalName":"","help":"btRigidBody_setLinearVelocityXYZ(rigidBody, linearVelocityX, linearVelocityY, linearVelocityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setAngularVelocity","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setAngularVelocity(rigidBody, angularVelocity)\n///\n/// @desc\n/// Sets the angular velocity of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} angularVelocity\n///     A pointer to a btVector3 representing the angular velocity.\n","externalName":"","help":"btRigidBody_setAngularVelocity(rigidBody, angularVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setAngularVelocityXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setAngularVelocityXYZ(rigidBody, angularVelocityX, angularVelocityY, angularVelocityZ)\n///\n/// @desc\n/// Sets the angular velocity of the rigid body using individual components.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} angularVelocityX\n///     The angular velocity around the X-axis.\n/// @param {Real} angularVelocityY\n///     The angular velocity around the Y-axis.\n/// @param {Real} angularVelocityZ\n///     The angular velocity around the Z-axis.\n","externalName":"","help":"btRigidBody_setAngularVelocityXYZ(rigidBody, angularVelocityX, angularVelocityY, angularVelocityZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getVelocityInLocalPoint","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getVelocityInLocalPoint(rigidBody, relPos, outVector3)\n///\n/// @desc\n/// Gets the velocity of a point in the local frame of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} relPos\n///     A pointer to a btVector3 representing the relative position of the point.\n/// @param {Pointer} outVector3\n///     A pointer to store the resulting velocity vector.\n","externalName":"","help":"btRigidBody_getVelocityInLocalPoint(rigidBody, relPos, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getVelocityInLocalPointXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getVelocityInLocalPointXYZ(rigidBody, relPosX, relPosY, relPosZ, outVector3)\n///\n/// @desc\n/// Gets the velocity of a point in the local frame of the rigid body using\n/// individual components for the relative position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} relPosX\n///     The X-component of the relative position.\n/// @param {Real} relPosY\n///     The Y-component of the relative position.\n/// @param {Real} relPosZ\n///     The Z-component of the relative position.\n/// @param {Pointer} outVector3\n///     A pointer to store the resulting velocity vector.\n","externalName":"","help":"btRigidBody_getVelocityInLocalPointXYZ(rigidBody, relPosX, relPosY, relPosZ, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getPushVelocityInLocalPoint","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getPushVelocityInLocalPoint(rigidBody, relPos, outVector3)\n///\n/// @desc\n/// Gets the push velocity of a point in the local frame of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} relPos\n///     A pointer to a btVector3 representing the relative position of the point.\n/// @param {Pointer} outVector3\n///     A pointer to store the resulting push velocity vector.\n","externalName":"","help":"btRigidBody_getPushVelocityInLocalPoint(rigidBody, relPos, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getPushVelocityInLocalPointXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getPushVelocityInLocalPointXYZ(rigidBody, relPosX, relPosY, relPosZ, outVector3)\n///\n/// @desc\n/// Gets the push velocity of a point in the local frame of the rigid body using\n/// individual components for the relative position.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} relPosX\n///     The X-component of the relative position.\n/// @param {Real} relPosY\n///     The Y-component of the relative position.\n/// @param {Real} relPosZ\n///     The Z-component of the relative position.\n/// @param {Pointer} outVector3\n///     A pointer to store the resulting push velocity vector.\n","externalName":"","help":"btRigidBody_getPushVelocityInLocalPointXYZ(rigidBody, relPosX, relPosY, relPosZ, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_translate","argCount":0,"args":[],"documentation":"/// @func btRigidBody_translate(rigidBody, vector)\n///\n/// @desc\n/// Translates the rigid body by a specified vector.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} vector\n///     A pointer to a btVector3 representing the translation vector.\n","externalName":"","help":"btRigidBody_translate(rigidBody, vector)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_translateXYZ","argCount":0,"args":[],"documentation":"/// @func btRigidBody_translateXYZ(rigidBody, vectorX, vectorY, vectorZ)\n///\n/// @desc\n/// Translates the rigid body by specified X, Y, and Z components of the\n/// translation vector.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} vectorX\n///     The X-component of the translation vector.\n/// @param {Real} vectorY\n///     The Y-component of the translation vector.\n/// @param {Real} vectorZ\n///     The Z-component of the translation vector.\n","externalName":"","help":"btRigidBody_translateXYZ(rigidBody, vectorX, vectorY, vectorZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getAabb","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getAabb(rigidBody, aabbMin, aabbMax)\n///\n/// @desc\n/// Gets the axis-aligned bounding box (AABB) of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} aabbMin\n///     A pointer to a btVector3 to store the minimum coordinates of the AABB.\n/// @param {Pointer} aabbMax\n///     A pointer to a btVector3 to store the maximum coordinates of the AABB.\n","externalName":"","help":"btRigidBody_getAabb(rigidBody, aabbMin, aabbMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getMotionState","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getMotionState(rigidBody)\n///\n/// @desc\n/// Gets the motion state associated with a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Pointer} A pointer to the btMotionState associated with the rigid\n/// body.\n","externalName":"","help":"btRigidBody_getMotionState(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setMotionState","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setMotionState(rigidBody, motionState)\n///\n/// @desc\n/// Sets the motion state for a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} motionState\n///     A pointer to the btMotionState object to set.\n","externalName":"","help":"btRigidBody_setMotionState(rigidBody, motionState)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setAngularFactor","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setAngularFactor(rigidBody, angularFactor)\n///\n/// @desc\n/// Sets the angular factor for a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} angularFactor\n///     The angular factor to set.\n","externalName":"","help":"btRigidBody_setAngularFactor(rigidBody, angularFactor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getAngularFactor","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getAngularFactor(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the angular factor for a btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the angular factor.\n","externalName":"","help":"btRigidBody_getAngularFactor(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_isInWorld","argCount":0,"args":[],"documentation":"/// @func btRigidBody_isInWorld(rigidBody)\n///\n/// @desc\n/// Checks if the btRigidBody is added to a physics world.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Bool} True if the rigid body is added to a physics world, false\n/// otherwise.\n","externalName":"","help":"btRigidBody_isInWorld(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_setFlags","argCount":0,"args":[],"documentation":"/// @func btRigidBody_setFlags(rigidBody, flags)\n///\n/// @desc\n/// Sets the flags for the btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Real} flags\n///     The flags to be set for the rigid body.\n","externalName":"","help":"btRigidBody_setFlags(rigidBody, flags)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getFlags","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getFlags(rigidBody)\n///\n/// @desc\n/// Gets the flags associated with the btRigidBody.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n///\n/// @return {Real} The flags associated with the rigid body.\n","externalName":"","help":"btRigidBody_getFlags(rigidBody)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRigidBody_getLocalInertia","argCount":0,"args":[],"documentation":"/// @func btRigidBody_getLocalInertia(rigidBody, outVector3)\n///\n/// @desc\n/// Gets the local inertia of the rigid body.\n///\n/// @param {Pointer} rigidBody\n///     A pointer to the btRigidBody object.\n/// @param {Pointer} outVector3\n///     Pointer to a btVector3 where the local inertia will be stored.\n","externalName":"","help":"btRigidBody_getLocalInertia(rigidBody, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSequentialImpulseConstraintSolver_create","argCount":0,"args":[],"documentation":"/// @func btSequentialImpulseConstraintSolver_create()\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics sequential impulse constraint\n/// solver.\n///\n/// @return {Pointer} A pointer to the newly created instance of\n/// btSequentialImpulseConstraintSolver.\n","externalName":"","help":"btSequentialImpulseConstraintSolver_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSequentialImpulseConstraintSolver_destroy","argCount":0,"args":[],"documentation":"/// @func btSequentialImpulseConstraintSolver_destroy(sequentialImpulseConstraintSolver)\n///\n/// @desc\n/// Destroys an instance of a Bullet Physics sequential impulse constraint\n/// solver.\n///\n/// @param {Pointer} sequentialImpulseConstraintSolver\n///     A pointer to the btSequentialImpulseConstraintSolver object to be\n///     destroyed.\n","externalName":"","help":"btSequentialImpulseConstraintSolver_destroy(sequentialImpulseConstraintSolver)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSphereShape_create","argCount":0,"args":[],"documentation":"/// @func btSphereShape_create(radius)\n///\n/// @desc\n/// Creates a sphere collision shape.\n///\n/// @param {Real} radius\n///     The radius of the sphere.\n///\n/// @return {Pointer} A pointer to the newly created btSphereShape instance.\n","externalName":"","help":"btSphereShape_create(radius)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSphereShape_destroy","argCount":0,"args":[],"documentation":"/// @func btSphereShape_destroy(sphereShape)\n///\n/// @desc\n/// Destroys a sphere collision shape.\n///\n/// @param {Pointer} sphereShape\n///     A pointer to the btSphereShape to destroy.\n","externalName":"","help":"btSphereShape_destroy(sphereShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_create","argCount":0,"args":[],"documentation":"/// @func btTransform_create()\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics transform.\n///\n/// @return {Pointer} A pointer to the newly created instance of btTransform.\n","externalName":"","help":"btTransform_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_destroy","argCount":0,"args":[],"documentation":"/// @func btTransform_destroy(transform)\n///\n/// @desc\n/// Destroys an instance of a Bullet Physics transform.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object to be destroyed.\n","externalName":"","help":"btTransform_destroy(transform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setIdentity","argCount":0,"args":[],"documentation":"/// @func btTransform_setIdentity(transform)\n///\n/// @desc\n/// Sets the given transformation to the identity transformation.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform to be set to the identity transformation.\n","externalName":"","help":"btTransform_setIdentity(transform)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getOrigin","argCount":0,"args":[],"documentation":"/// @func btTransform_getOrigin(transform, outVector3)\n///\n/// @desc\n/// Gets the origin (translation component) of the given transformation and\n/// stores it in the specified vector.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform from which to extract the origin.\n/// @param {Pointer} outVector3\n///     A pointer to the btVector3 that will store the origin of the\n///     transformation.\n","externalName":"","help":"btTransform_getOrigin(transform, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setOrigin","argCount":0,"args":[],"documentation":"/// @func btTransform_setOrigin(transform, origin)\n///\n/// @desc\n/// Sets the origin of the transform using a btVector3.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Pointer} origin\n///     A pointer to the btVector3 representing the origin.\n","externalName":"","help":"btTransform_setOrigin(transform, origin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setOriginXYZ","argCount":0,"args":[],"documentation":"/// @func btTransform_setOriginXYZ(transform, x, y, z)\n///\n/// @desc\n/// Sets the origin of the transform using individual x, y, and z coordinates.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Real} x\n///     The x-coordinate of the origin.\n/// @param {Real} y\n///     The y-coordinate of the origin.\n/// @param {Real} z\n///     The z-coordinate of the origin.\n","externalName":"","help":"btTransform_setOriginXYZ(transform, x, y, z)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getRotation","argCount":0,"args":[],"documentation":"/// @func btTransform_getRotation(transform, outQuaternion)\n///\n/// @desc\n/// Retrieves the rotation of the transform as a quaternion and stores it in the\n/// specified btQuaternion.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Pointer} outQuaternion\n///     A pointer to a btQuaternion to store the rotation.\n","externalName":"","help":"btTransform_getRotation(transform, outQuaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setRotation","argCount":0,"args":[],"documentation":"/// @func btTransform_setRotation(transform, quaternion)\n///\n/// @desc\n/// Sets the rotation of the transform using a btQuaternion.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Pointer} quaternion\n///     A pointer to the btQuaternion representing the rotation.\n","externalName":"","help":"btTransform_setRotation(transform, quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setRotationEuler","argCount":0,"args":[],"documentation":"/// @func btTransform_setRotationEuler(transform, yaw, pitch, roll)\n///\n/// @desc\n/// Sets the rotation of the transform using Euler angles (yaw, pitch, roll).\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Real} yaw\n///     The yaw angle in radians.\n/// @param {Real} pitch\n///     The pitch angle in radians.\n/// @param {Real} roll\n///     The roll angle in radians.\n","externalName":"","help":"btTransform_setRotationEuler(transform, yaw, pitch, roll)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_getMatrix","argCount":0,"args":[],"documentation":"/// @func btTransform_getMatrix(transform, outMatrix)\n///\n/// @desc\n/// Retrieves the transformation matrix of the btTransform and stores it in the\n/// specified array.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Array<Real>} outMatrix\n///     An array to store the transformation matrix (16 elements).\n","externalName":"","help":"btTransform_getMatrix(transform, outMatrix)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTransform_setFromMatrix","argCount":0,"args":[],"documentation":"/// @func btTransform_setFromMatrix(transform, matrix)\n///\n/// @desc\n/// Sets the transformation of the btTransform using the provided transformation\n/// matrix.\n///\n/// @param {Pointer} transform\n///     A pointer to the btTransform object.\n/// @param {Array<Real>} matrix\n///     An array representing the transformation matrix (16 elements).\n","externalName":"","help":"btTransform_setFromMatrix(transform, matrix)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_create","argCount":0,"args":[],"documentation":"/// @func btVector3_create([x[, y[, z]])\n///\n/// @desc\n/// Creates a new instance of a Bullet Physics 3D vector.\n///\n/// @param {Real} [x]\n///     The x-coordinate of the vector.\n/// @param {Real} [y]\n///     The y-coordinate of the vector.\n/// @param {Real} [z]\n///     The z-coordinate of the vector.\n///\n/// @return {Pointer} A pointer to the newly created btVector3 instance.\n","externalName":"","help":"btVector3_create([x[, y[, z]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_destroy","argCount":0,"args":[],"documentation":"/// @func btVector3_destroy(vector)\n///\n/// @desc\n/// Destroys a previously created btVector3 instance.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 instance to be destroyed.\n","externalName":"","help":"btVector3_destroy(vector)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getX","argCount":0,"args":[],"documentation":"/// @func btVector3_getX(vector)\n///\n/// @desc\n/// Gets the x-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n///\n/// @return {Real} The x-component of the vector.\n","externalName":"","help":"btVector3_getX(vector)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setX","argCount":0,"args":[],"documentation":"/// @func btVector3_setX(vector, x)\n///\n/// @desc\n/// Sets the x-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n/// @param {Real} x\n///     The value to set as the x-component of the vector.\n","externalName":"","help":"btVector3_setX(vector, x)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getY","argCount":0,"args":[],"documentation":"/// @func btVector3_getY(vector)\n///\n/// @desc\n/// Gets the y-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n///\n/// @return {Real} The y-component of the vector.\n","externalName":"","help":"btVector3_getY(vector)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setY","argCount":0,"args":[],"documentation":"/// @func btVector3_setY(vector, y)\n///\n/// @desc\n/// Sets the y-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n/// @param {Real} y\n///     The value to set as the y-component of the vector.\n","externalName":"","help":"btVector3_setY(vector, y)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_getZ","argCount":0,"args":[],"documentation":"/// @func btVector3_getZ(vector)\n///\n/// @desc\n/// Gets the z-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n///\n/// @return {Real} The z-component of the vector.\n","externalName":"","help":"btVector3_getZ(vector)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setZ","argCount":0,"args":[],"documentation":"/// @func btVector3_setZ(vector, z)\n///\n/// @desc\n/// Sets the z-component of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n/// @param {Real} z\n///     The value to set as the z-component of the vector.\n","externalName":"","help":"btVector3_setZ(vector, z)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVector3_setValue","argCount":0,"args":[],"documentation":"/// @func btVector3_setValue(vector, x, y, z)\n///\n/// @desc\n/// Sets the components of a btVector3.\n///\n/// @param {Pointer} vector\n///     A pointer to the btVector3 object.\n/// @param {Real} x\n///     The value to set as the x-component of the vector.\n/// @param {Real} y\n///     The value to set as the y-component of the vector.\n/// @param {Real} z\n///     The value to set as the z-component of the vector.\n","externalName":"","help":"btVector3_setValue(vector, x, y, z)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_createF32","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_createF32(heightStickWidth, heightStickLength, heightfieldData, minHeight, maxHeight, upAxis, flipQuadEdges)\n///\n/// @desc\n/// Creates a heightfield terrain shape using floating-point height data.\n///\n/// @param {Real} heightStickWidth\n///     The width of each height stick in the heightfield.\n/// @param {Real} heightStickLength\n///     The length of each height stick in the heightfield.\n/// @param {Id.Buffer} heightfieldData\n///     A buffer with floating-point height data.\n/// @param {Real} minHeight\n///     The minimum height value in the heightfield.\n/// @param {Real} maxHeight\n///     The maximum height value in the heightfield.\n/// @param {Real} upAxis\n///     The axis indicating the \"up\" direction (0 for X, 1 for Y, 2 for Z).\n/// @param {Bool} flipQuadEdges\n///     Set to true to flip quad edges.\n///\n/// @return {Pointer} A pointer to the created btHeightfieldTerrainShape.\n","externalName":"","help":"btHeightfieldTerrainShape_createF32(heightStickWidth, heightStickLength, heightfieldData, minHeight, maxHeight, upAxis, flipQuadEdges)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_createF64","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_createF64(heightStickWidth, heightStickLength, heightfieldData, minHeight, maxHeight, upAxis, flipQuadEdges)\n///\n/// @desc\n/// Creates a heightfield terrain shape using double-precision height data.\n///\n/// @param {Real} heightStickWidth\n///     The width of each height stick in the heightfield.\n/// @param {Real} heightStickLength\n///     The length of each height stick in the heightfield.\n/// @param {Id.Buffer} heightfieldData\n///     A buffer with double-precision height data.\n/// @param {Real} minHeight\n///     The minimum height value in the heightfield.\n/// @param {Real} maxHeight\n///     The maximum height value in the heightfield.\n/// @param {Real} upAxis\n///     The axis indicating the \"up\" direction (0 for X, 1 for Y, 2 for Z).\n/// @param {Bool} flipQuadEdges\n///     Set to true to flip quad edges.\n///\n/// @return {Pointer} A pointer to the created btHeightfieldTerrainShape.\n","externalName":"","help":"btHeightfieldTerrainShape_createF64(heightStickWidth, heightStickLength, heightfieldData, minHeight, maxHeight, upAxis, flipQuadEdges)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_createS16","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_createS16(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, flipQuadEdges)\n///\n/// @desc\n/// Creates a heightfield terrain shape using 16-bit integer height data.\n///\n/// @param {Real} heightStickWidth\n///     The width of each height stick in the heightfield.\n/// @param {Real} heightStickLength\n///     The length of each height stick in the heightfield.\n/// @param {Id.Buffer} heightfieldData\n///     A buffer with 16-bit integer height data.\n/// @param {Real} heightScale\n///     The scale factor to apply to the height values.\n/// @param {Real} minHeight\n///     The minimum height value in the heightfield.\n/// @param {Real} maxHeight\n///     The maximum height value in the heightfield.\n/// @param {Real} upAxis\n///     The axis indicating the \"up\" direction (0 for X, 1 for Y, 2 for Z).\n/// @param {Bool} flipQuadEdges\n///     Set to true to flip quad edges.\n///\n/// @return {Pointer} A pointer to the created btHeightfieldTerrainShape.\n","externalName":"","help":"btHeightfieldTerrainShape_createS16(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, flipQuadEdges)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_createU8","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_createU8(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, flipQuadEdges)\n///\n/// @desc\n/// Creates a heightfield terrain shape using 8-bit unsigned integer height data.\n///\n/// @param {Real} heightStickWidth\n///     The width of each height stick in the heightfield.\n/// @param {Real} heightStickLength\n///     The length of each height stick in the heightfield.\n/// @param {Id.Buffer} heightfieldData\n///     A buffer with 8-bit unsigned integer height data.\n/// @param {Real} heightScale\n///     The scale factor to apply to the height values.\n/// @param {Real} minHeight\n///     The minimum height value in the heightfield.\n/// @param {Real} maxHeight\n///     The maximum height value in the heightfield.\n/// @param {Real} upAxis\n///     The axis indicating the \"up\" direction (0 for X, 1 for Y, 2 for Z).\n/// @param {Bool} flipQuadEdges\n///     Set to true to flip quad edges.\n///\n/// @return {Pointer} A pointer to the created btHeightfieldTerrainShape.\n","externalName":"","help":"btHeightfieldTerrainShape_createU8(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, flipQuadEdges)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_destroy","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_destroy(heightfieldTerrainShape)\n///\n/// @desc\n/// Destroys a btHeightfieldTerrainShape object, releasing its allocated\n/// resources.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object to be destroyed.\n","externalName":"","help":"btHeightfieldTerrainShape_destroy(heightfieldTerrainShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_setUseDiamondSubdivision","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_setUseDiamondSubdivision(heightfieldTerrainShape[, useDiamondSubdivision])\n///\n/// @desc\n/// Sets whether to use diamond subdivision for the btHeightfieldTerrainShape\n/// object.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Bool} [useDiamondSubdivision]\n///     A boolean indicating whether to use diamond subdivision. Defaults to\n///    true if not specified.\n","externalName":"","help":"btHeightfieldTerrainShape_setUseDiamondSubdivision(heightfieldTerrainShape[, useDiamondSubdivision])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_setUseZigzagSubdivision","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_setUseZigzagSubdivision(heightfieldTerrainShape[, useZigzagSubdivision])\n///\n/// @desc\n/// Sets whether to use zigzag subdivision for the btHeightfieldTerrainShape\n/// object.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Bool} [useZigzagSubdivision=true]\n///     A boolean indicating whether to use zigzag subdivision. Defaults to true\n///     if not specified.\n","externalName":"","help":"btHeightfieldTerrainShape_setUseZigzagSubdivision(heightfieldTerrainShape[, useZigzagSubdivision])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_setFlipTriangleWinding","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_setFlipTriangleWinding(heightfieldTerrainShape, flipTriangleWinding)\n///\n/// @desc\n/// Sets whether to flip the triangle winding for the btHeightfieldTerrainShape\n/// object.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Bool} flipTriangleWinding\n///     A boolean indicating whether to flip the triangle winding.\n","externalName":"","help":"btHeightfieldTerrainShape_setFlipTriangleWinding(heightfieldTerrainShape, flipTriangleWinding)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_getVertex","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_getVertex(heightfieldTerrainShape, x, y, vertex)\n///\n/// @desc\n/// Gets the vertex at the specified indices (x, y) in the heightfield.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Real} x\n///     The x-coordinate index of the desired vertex.\n/// @param {Real} y\n///     The y-coordinate index of the desired vertex.\n/// @param {Pointer} vertex\n///     A pointer to a btVector3 where the vertex data will be stored.\n","externalName":"","help":"btHeightfieldTerrainShape_getVertex(heightfieldTerrainShape, x, y, vertex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_performRaycast","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_performRaycast(heightfieldTerrainShape, callback, raySource, rayTarget)\n///\n/// @desc\n/// Performs a raycast on the heightfield terrain shape and invokes the\n/// specified callback for each triangle hit by the ray.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Pointer} callback\n///     A pointer to the callback object that will be invoked for each hit\n///     triangle.\n/// @param {Pointer} raySource\n///     A pointer to a btVector3 representing the ray's source position.\n/// @param {Pointer} rayTarget\n///     A pointer to a btVector3 representing the ray's target position.\n","externalName":"","help":"btHeightfieldTerrainShape_performRaycast(heightfieldTerrainShape, callback, raySource, rayTarget)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_buildAccelerator","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_buildAccelerator(heightfieldTerrainShape[, chunkSize])\n///\n/// @desc\n/// Builds an accelerator for the heightfield terrain shape, improving\n/// performance for ray casts and other collision queries.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @param {Real} [chunkSize]\n///     The chunk size to use for the accelerator. Defaults to 16 if not\n///     specified.\n","externalName":"","help":"btHeightfieldTerrainShape_buildAccelerator(heightfieldTerrainShape[, chunkSize])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_clearAccelerator","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_clearAccelerator(heightfieldTerrainShape)\n///\n/// @desc\n///\n/// @param {Pointer} heightfieldTerrainShape\n","externalName":"","help":"btHeightfieldTerrainShape_clearAccelerator(heightfieldTerrainShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_getUpAxis","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_getUpAxis(heightfieldTerrainShape)\n///\n/// @desc\n/// Clears the accelerator built for the heightfield terrain shape. This can be\n/// useful if the terrain shape has been modified and needs the accelerator to\n/// be rebuilt for accurate collision queries.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n","externalName":"","help":"btHeightfieldTerrainShape_getUpAxis(heightfieldTerrainShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHeightfieldTerrainShape_getHeightfieldRawData","argCount":0,"args":[],"documentation":"/// @func btHeightfieldTerrainShape_getHeightfieldRawData(heightfieldTerrainShape)\n///\n/// @desc\n/// Gets a pointer to the raw heightfield data associated with the\n/// btHeightfieldTerrainShape. This data can be used for various purposes, such\n/// as updating the heightfield or analyzing its contents.\n///\n/// @param {Pointer} heightfieldTerrainShape\n///     A pointer to the btHeightfieldTerrainShape object.\n/// @return {Pointer}\n///     A pointer to the raw heightfield data.\n","externalName":"","help":"btHeightfieldTerrainShape_getHeightfieldRawData(heightfieldTerrainShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShape_create","argCount":0,"args":[],"documentation":"/// @func btCapsuleShape_create(radius, height)\n///\n/// @desc\n/// Creates a capsule shape aligned along the y-axis.\n///\n/// @param {Real} radius\n///     The radius of the capsule.\n/// @param {Real} height\n///     The height of the capsule along the y-axis.\n///\n/// @return {Pointer} A pointer to the newly created btCapsuleShape object.\n","externalName":"","help":"btCapsuleShape_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShape_destroy","argCount":0,"args":[],"documentation":"/// @func btCapsuleShape_destroy(capsuleShape)\n///\n/// @desc\n/// Destroys the btCapsuleShape object.\n///\n/// @param {Pointer} capsuleShape\n///     A pointer to the btCapsuleShape object to be destroyed.\n","externalName":"","help":"btCapsuleShape_destroy(capsuleShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShape_getUpAxis","argCount":0,"args":[],"documentation":"/// @func btCapsuleShape_getUpAxis(capsuleShape)\n///\n/// @desc\n/// Gets the axis-aligned up axis of the capsule.\n///\n/// @param {Pointer} capsuleShape\n///     A pointer to the btCapsuleShape object.\n///\n/// @return {Real} The up axis of the capsule.\n","externalName":"","help":"btCapsuleShape_getUpAxis(capsuleShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShape_getRadius","argCount":0,"args":[],"documentation":"/// @func btCapsuleShape_getRadius(capsuleShape)\n///\n/// @desc\n/// Gets the radius of the capsule.\n///\n/// @param {Pointer} capsuleShape\n///     A pointer to the btCapsuleShape object.\n///\n/// @return {Real} The radius of the capsule.\n","externalName":"","help":"btCapsuleShape_getRadius(capsuleShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShape_getHalfHeight","argCount":0,"args":[],"documentation":"/// @func btCapsuleShape_getHalfHeight(capsuleShape)\n///\n/// @desc\n/// Gets the half height of the capsule.\n///\n/// @param {Pointer} capsuleShape\n///     A pointer to the btCapsuleShape object.\n///\n/// @return {Real} The half height of the capsule.\n","externalName":"","help":"btCapsuleShape_getHalfHeight(capsuleShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShapeX_create","argCount":0,"args":[],"documentation":"/// @func btCapsuleShapeX_create(radius, height)\n///\n/// @desc\n/// Creates a capsule shape aligned along the x-axis.\n///\n/// @param {Real} radius\n///     The radius of the capsule.\n/// @param {Real} height\n///     The height of the capsule along the x-axis.\n///\n/// @return {Pointer}\n///     A pointer to the created btCapsuleShapeX object.\n","externalName":"","help":"btCapsuleShapeX_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShapeX_destroy","argCount":0,"args":[],"documentation":"/// @func btCapsuleShapeX_destroy(capsuleShapeX)\n///\n/// @desc\n/// Destroys a btCapsuleShapeX object.\n///\n/// @param {Pointer} capsuleShapeX\n///     A pointer to the btCapsuleShapeX object to be destroyed.\n","externalName":"","help":"btCapsuleShapeX_destroy(capsuleShapeX)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShapeZ_create","argCount":0,"args":[],"documentation":"/// @func btCapsuleShapeZ_create(radius, height)\n///\n/// @desc\n/// Creates a capsule shape aligned along the z-axis.\n///\n/// @param {Real} radius\n///     The radius of the capsule.\n/// @param {Real} height\n///     The height of the capsule along the z-axis.\n///\n/// @return {Pointer}\n///     A pointer to the created btCapsuleShapeZ object.\n","externalName":"","help":"btCapsuleShapeZ_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCapsuleShapeZ_destroy","argCount":0,"args":[],"documentation":"/// @func btCapsuleShapeZ_destroy(capsuleShapeZ)\n///\n/// @desc\n/// Destroys a btCapsuleShapeZ object.\n///\n/// @param {Pointer} capsuleShapeZ\n///     A pointer to the btCapsuleShapeZ object to be destroyed.\n","externalName":"","help":"btCapsuleShapeZ_destroy(capsuleShapeZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_create","argCount":0,"args":[],"documentation":"/// @func btConeShape_create(radius, height)\n///\n/// @desc\n/// Creates a cone shape aligned along the y-axis.\n///\n/// @param {Real} radius\n///     The radius of the cone.\n/// @param {Real} height\n///     The height of the cone along the y-axis.\n///\n/// @return {Pointer} A pointer to the created btConeShape object.\n","externalName":"","help":"btConeShape_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_destroy","argCount":0,"args":[],"documentation":"/// @func btConeShape_destroy(coneShape)\n///\n/// @desc\n/// Destroys a btConeShape object.\n///\n/// @param {Pointer} coneShape\n///     A pointer to the btConeShape object to be destroyed.\n","externalName":"","help":"btConeShape_destroy(coneShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_getRadius","argCount":0,"args":[],"documentation":"/// @func btConeShape_getRadius(coneShape)\n///\n/// @desc\n/// Gets the radius of the cone shape.\n///\n/// @param {Pointer} coneShape\n///     A pointer to the btConeShape object.\n///\n/// @return {Real} The radius of the cone.\n","externalName":"","help":"btConeShape_getRadius(coneShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_getHeight","argCount":0,"args":[],"documentation":"/// @func btConeShape_getHeight(coneShape)\n///\n/// @desc\n/// Gets the height of the cone shape.\n///\n/// @param {Pointer} coneShape\n///     A pointer to the btConeShape object.\n///\n/// @return {Real} The height of the cone.\n","externalName":"","help":"btConeShape_getHeight(coneShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_setConeUpIndex","argCount":0,"args":[],"documentation":"/// @func btConeShape_setConeUpIndex(coneShape, upIndex)\n///\n/// @desc\n/// Sets the cone's up axis index.\n///\n/// @param {Pointer} coneShape\n///     A pointer to the btConeShape object.\n/// @param {Real} upIndex\n///     The index representing the up axis (0, 1, or 2 for x, y, or z axes\n///     respectively).\n","externalName":"","help":"btConeShape_setConeUpIndex(coneShape, upIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShape_getConeUpIndex","argCount":0,"args":[],"documentation":"/// @func btConeShape_getConeUpIndex(coneShape)\n///\n/// @desc\n/// Gets the cone's up axis index.\n///\n/// @param {Pointer} coneShape\n///     A pointer to the btConeShape object.\n///\n/// @return {Real} The index representing the up axis (0, 1, or 2 for x, y, or\n/// z axes respectively).\n","externalName":"","help":"btConeShape_getConeUpIndex(coneShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShapeX_create","argCount":0,"args":[],"documentation":"/// @func btConeShapeX_create(radius, height)\n///\n/// @desc\n/// Creates a cone shape aligned along the x-axis.\n///\n/// @param {Real} radius\n///     The radius of the cone.\n/// @param {Real} height\n///     The height of the cone along the x-axis.\n///\n/// @return {Pointer} A pointer to the created btConeShapeX object.\n","externalName":"","help":"btConeShapeX_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShapeX_destroy","argCount":0,"args":[],"documentation":"/// @func btConeShapeX_destroy(coneShapeX)\n///\n/// @desc\n/// Destroys a btConeShapeX object.\n///\n/// @param {Pointer} coneShapeX\n///     A pointer to the btConeShapeX object to be destroyed.\n","externalName":"","help":"btConeShapeX_destroy(coneShapeX)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShapeZ_create","argCount":0,"args":[],"documentation":"/// @func btConeShapeZ_create(radius, height)\n///\n/// @desc\n/// Creates a cone shape aligned along the z-axis.\n///\n/// @param {Real} radius\n///     The radius of the cone.\n/// @param {Real} height\n///     The height of the cone along the z-axis.\n///\n/// @return {Pointer} A pointer to the created btConeShapeZ object.\n","externalName":"","help":"btConeShapeZ_create(radius, height)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeShapeZ_destroy","argCount":0,"args":[],"documentation":"/// @func btConeShapeZ_destroy(coneShapeZ)\n///\n/// @desc\n/// Destroys a btConeShapeZ object.\n///\n/// @param {Pointer} coneShapeZ\n///     A pointer to the btConeShapeZ object to be destroyed.\n","externalName":"","help":"btConeShapeZ_destroy(coneShapeZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_create","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_create(halfExtents)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the y-axis.\n///\n/// @param {Pointer} halfExtents\n///     A pointer to a btVector3 specifying the half-extents of the cylinder in\n///     each axis (x, y, z).\n///\n/// @return {Pointer} A pointer to the created btCylinderShape object.\n","externalName":"","help":"btCylinderShape_create(halfExtents)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_createXYZ","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_createXYZ(halfExtentX, halfExtentY, halfExtentZ)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the y-axis.\n///\n/// @param {Real} halfExtentX\n///     The half extent along the x-axis.\n/// @param {Real} halfExtentY\n///     The half extent along the y-axis.\n/// @param {Real} halfExtentZ\n///     The half extent along the z-axis.\n///\n/// @return {Pointer} A pointer to the created btCylinderShape object.\n","externalName":"","help":"btCylinderShape_createXYZ(halfExtentX, halfExtentY, halfExtentZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_destroy","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_destroy(cylinderShape)\n///\n/// @desc\n/// Destroys an instance of a Bullet cylinder shape aligned with the y-axis.\n///\n/// @param {Pointer} cylinderShape\n///     A pointer to the btCylinderShape object to be destroyed.\n","externalName":"","help":"btCylinderShape_destroy(cylinderShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_getHalfExtentsWithMargin","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_getHalfExtentsWithMargin(cylinderShape, outVector3)\n///\n/// @desc\n/// Retrieves the half extents of the cylinder shape, including margin.\n///\n/// @param {Pointer} cylinderShape\n///     A pointer to the btCylinderShape object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the half extents (including margin).\n","externalName":"","help":"btCylinderShape_getHalfExtentsWithMargin(cylinderShape, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_getHalfExtentsWithoutMargin","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_getHalfExtentsWithoutMargin(cylinderShape, outVector3)\n///\n/// @desc\n/// Retrieves the half extents of the cylinder shape, excluding margin.\n///\n/// @param {Pointer} cylinderShape\n///     A pointer to the btCylinderShape object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the half extents (excluding margin).\n","externalName":"","help":"btCylinderShape_getHalfExtentsWithoutMargin(cylinderShape, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_getUpAxis","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_getUpAxis(cylinderShape)\n///\n/// @desc\n/// Retrieves the up axis of the cylinder shape.\n///\n/// @param {Pointer} cylinderShape\n///     A pointer to the btCylinderShape object.\n///\n/// @return {Real} The up axis (0 for x-axis, 1 for y-axis, 2 for z-axis).\n","externalName":"","help":"btCylinderShape_getUpAxis(cylinderShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShape_getRadius","argCount":0,"args":[],"documentation":"/// @func btCylinderShape_getRadius(cylinderShape)\n///\n/// @desc\n/// Retrieves the radius of the cylinder shape.\n///\n/// @param {Pointer} cylinderShape\n///     A pointer to the btCylinderShape object.\n///\n/// @return {Real} The radius of the cylinder shape.\n","externalName":"","help":"btCylinderShape_getRadius(cylinderShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeX_create","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeX_create(halfExtents)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the x-axis.\n///\n/// @param {Pointer} halfExtents\n///     A pointer to a btVector3 specifying the half-extents of the cylinder in\n///     each axis (x, y, z).\n///\n/// @return {Pointer} A pointer to the created btCylinderShapeX object.\n","externalName":"","help":"btCylinderShapeX_create(halfExtents)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeX_createXYZ","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeX_createXYZ(halfExtentX, halfExtentY, halfExtentZ)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the x-axis.\n///\n/// @param {Real} halfExtentX\n///     The half extent along the x-axis.\n/// @param {Real} halfExtentY\n///     The half extent along the y-axis.\n/// @param {Real} halfExtentZ\n///     The half extent along the z-axis.\n///\n/// @return {Pointer} A pointer to the created btCylinderShapeX object.\n","externalName":"","help":"btCylinderShapeX_createXYZ(halfExtentX, halfExtentY, halfExtentZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeX_destroy","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeX_destroy(cylinderShapeX)\n///\n/// @desc\n/// Destroys an instance of a Bullet cylinder shape aligned with the x-axis.\n///\n/// @param {Pointer} cylinderShapeX\n///     A pointer to the btCylinderShapeX object to be destroyed.\n","externalName":"","help":"btCylinderShapeX_destroy(cylinderShapeX)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeZ_create","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeZ_create(halfExtents)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the z-axis.\n///\n/// @param {Pointer} halfExtents\n///     A pointer to a btVector3 specifying the half-extents of the cylinder in\n///     each axis (x, y, z).\n///\n/// @return {Pointer} A pointer to the created btCylinderShapeZ object.\n","externalName":"","help":"btCylinderShapeZ_create(halfExtents)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeZ_createXYZ","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeZ_createXYZ(halfExtentX, halfExtentY, halfExtentZ)\n///\n/// @desc\n/// Creates a new instance of a Bullet cylinder shape aligned with the z-axis.\n///\n/// @param {Real} halfExtentX\n///     The half extent along the x-axis.\n/// @param {Real} halfExtentY\n///     The half extent along the y-axis.\n/// @param {Real} halfExtentZ\n///     The half extent along the z-axis.\n///\n/// @return {Pointer} A pointer to the created btCylinderShapeZ object.\n","externalName":"","help":"btCylinderShapeZ_createXYZ(halfExtentX, halfExtentY, halfExtentZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCylinderShapeZ_destroy","argCount":0,"args":[],"documentation":"/// @func btCylinderShapeZ_destroy(cylinderShapeZ)\n///\n/// @desc\n/// Destroys an instance of a Bullet cylinder shape aligned with the z-axis.\n///\n/// @param {Pointer} cylinderShapeZ\n///     A pointer to the btCylinderShapeZ object to be destroyed.\n","externalName":"","help":"btCylinderShapeZ_destroy(cylinderShapeZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_create","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_create([use32bitIndices[, use4componentVertices]])\n///\n/// @desc\n/// Creates a new instance of a Bullet triangle mesh.\n///\n/// @param {Bool} [use32bitIndices]\n///     Whether to use 32-bit indices for vertices. Default is true.\n/// @param {Bool} [use4componentVertices]\n///     Whether to use 4-component vertices. Default is true.\n///\n/// @return {Pointer} A pointer to the created btTriangleMesh object.\n","externalName":"","help":"btTriangleMesh_create([use32bitIndices[, use4componentVertices]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_destroy","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_destroy(triangleMesh)\n///\n/// @desc\n/// Destroys an instance of a Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object to destroy.\n","externalName":"","help":"btTriangleMesh_destroy(triangleMesh)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_getUse32bitIndices","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_getUse32bitIndices(triangleMesh)\n///\n/// @desc\n/// Retrieves whether 32-bit indices are being used for vertices in the Bullet\n/// triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n///\n/// @return {Bool} True if 32-bit indices are being used, false otherwise.\n","externalName":"","help":"btTriangleMesh_getUse32bitIndices(triangleMesh)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_getUse4componentVertices","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_getUse4componentVertices(triangleMesh)\n///\n/// @desc\n/// Retrieves whether 4-component vertices are being used in the Bullet triangle\n/// mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n///\n/// @return {Bool} True if 4-component vertices are being used, false otherwise.\n","externalName":"","help":"btTriangleMesh_getUse4componentVertices(triangleMesh)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_addTriangle","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_addTriangle(triangleMesh, vertex0, vertex1, vertex2)\n///\n/// @desc\n/// Adds a triangle specified by its vertices to the Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Pointer} vertex0\n///     A pointer to the first vertex (btVector3) of the triangle.\n/// @param {Pointer} vertex1\n///     A pointer to the second vertex (btVector3) of the triangle.\n/// @param {Pointer} vertex2\n///     A pointer to the third vertex (btVector3) of the triangle.\n","externalName":"","help":"btTriangleMesh_addTriangle(triangleMesh, vertex0, vertex1, vertex2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_addTriangleXYZ","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_addTriangleXYZ(triangleMesh, vertex0x, vertex0y, vertex0z, vertex1x, vertex1y, vertex1z, vertex2x, vertex2y, vertex2z)\n///\n/// @desc\n/// Adds a triangle specified by its vertices' coordinates to the Bullet\n/// triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Real} vertex0x\n///     X-coordinate of the first vertex.\n/// @param {Real} vertex0y\n///     Y-coordinate of the first vertex.\n/// @param {Real} vertex0z\n///     Z-coordinate of the first vertex.\n/// @param {Real} vertex1x\n///     X-coordinate of the second vertex.\n/// @param {Real} vertex1y\n///     Y-coordinate of the second vertex.\n/// @param {Real} vertex1z\n///     Z-coordinate of the second vertex.\n/// @param {Real} vertex2x\n///     X-coordinate of the third vertex.\n/// @param {Real} vertex2y\n///     Y-coordinate of the third vertex.\n/// @param {Real} vertex2z\n///     Z-coordinate of the third vertex.\n","externalName":"","help":"btTriangleMesh_addTriangleXYZ(triangleMesh, vertex0x, vertex0y, vertex0z, vertex1x, vertex1y, vertex1z, vertex2x, vertex2y, vertex2z)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_addTrianglesFromBuffer","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_addTrianglesFromBuffer(triangleMesh, buffer, offset, stride, numVerts)\n///\n/// @desc\n/// Adds triangles to the Bullet triangle mesh from a buffer containing vertex\n/// data.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Id.Buffer} buffer\n///     A buffer containing vertex data.\n/// @param {Real} offset\n///     The offset in bytes to the start of vertex data for the first vertex.\n/// @param {Real} stride\n///     The stride in bytes between consecutive vertices in the buffer.\n/// @param {Real} numVerts\n///     The number of vertices to add from the buffer.\n","externalName":"","help":"btTriangleMesh_addTrianglesFromBuffer(triangleMesh, buffer, offset, stride, numVerts)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_addTriangleIndices","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_addTriangleIndices(triangleMesh, index1, index2, index3)\n///\n/// @desc\n/// Adds triangle indices to the Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Real} index1\n///     Index of the first vertex in the triangle.\n/// @param {Real} index2\n///     Index of the second vertex in the triangle.\n/// @param {Real} index3\n///     Index of the third vertex in the triangle.\n","externalName":"","help":"btTriangleMesh_addTriangleIndices(triangleMesh, index1, index2, index3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_getNumTriangles","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_getNumTriangles(triangleMesh)\n///\n/// @desc\n/// Gets the number of triangles in the Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n///\n/// @return {Real} The number of triangles in the triangle mesh.\n","externalName":"","help":"btTriangleMesh_getNumTriangles(triangleMesh)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_preallocateVertices","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_preallocateVertices(triangleMesh, numVerts)\n///\n/// @desc\n/// Preallocates memory for vertices in the Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Real} numVerts\n///     The number of vertices to preallocate memory for.\n","externalName":"","help":"btTriangleMesh_preallocateVertices(triangleMesh, numVerts)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTriangleMesh_preallocateIndices","argCount":0,"args":[],"documentation":"/// @func btTriangleMesh_preallocateIndices(triangleMesh, numIndices)\n///\n/// @desc\n/// Preallocates memory for indices in the Bullet triangle mesh.\n///\n/// @param {Pointer} triangleMesh\n///     A pointer to the btTriangleMesh object.\n/// @param {Real} numIndices\n///     The number of indices to preallocate memory for.\n","externalName":"","help":"btTriangleMesh_preallocateIndices(triangleMesh, numIndices)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestNotMeRayResultCallback_create","argCount":0,"args":[],"documentation":"/// @func btClosestNotMeRayResultCallback_create(closestNotMeRayResultCallback, me)\n///\n/// @desc\n/// Creates a new instance of a Bullet closest not-me ray result callback.\n///\n/// @param {Pointer} closestNotMeRayResultCallback\n///     A pointer to the btClosestNotMeRayResultCallback object to create.\n/// @param {Pointer} me\n///     A pointer to the collision object representing \"me\" to be excluded from\n///     results.\n///\n/// @return {Pointer} A pointer to the created btClosestNotMeRayResultCallback\n/// object.\n","externalName":"","help":"btClosestNotMeRayResultCallback_create(closestNotMeRayResultCallback, me)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btClosestNotMeRayResultCallback_destroy","argCount":0,"args":[],"documentation":"/// @func btClosestNotMeRayResultCallback_destroy(closestNotMeRayResultCallback)\n///\n/// @desc\n/// Destroys an instance of a Bullet closest not-me ray result callback.\n///\n/// @param {Pointer} closestNotMeRayResultCallback\n///     A pointer to the btClosestNotMeRayResultCallback object to destroy.\n","externalName":"","help":"btClosestNotMeRayResultCallback_destroy(closestNotMeRayResultCallback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShapeChild_getTransform","argCount":0,"args":[],"documentation":"/// @func btCompoundShapeChild_getTransform(compoundShapeChild)\n///\n/// @desc\n/// Retrieves the transform of a child shape within a compound shape.\n///\n/// @param {Pointer} compoundShapeChild\n///     A pointer to a btCompoundShapeChild object whose transform is to be\n///     retrieved.\n///\n/// @return {Pointer} A pointer to the transform of the compound shape child.\n","externalName":"","help":"btCompoundShapeChild_getTransform(compoundShapeChild)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShapeChild_getChildShape","argCount":0,"args":[],"documentation":"/// @func btCompoundShapeChild_getChildShape(compoundShapeChild)\n///\n/// @desc\n/// Retrieves the child shape associated with a specific child within a compound\n/// shape.\n///\n/// @param {Pointer} compoundShapeChild\n///     A pointer to a btCompoundShapeChild object from which the child shape is\n///     to be retrieved.\n///\n/// @return {Pointer} A pointer to the child shape associated with the specified\n/// child.\n","externalName":"","help":"btCompoundShapeChild_getChildShape(compoundShapeChild)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShapeChild_getChildShapeType","argCount":0,"args":[],"documentation":"/// @func btCompoundShapeChild_getChildShapeType(compoundShapeChild)\n///\n/// @desc\n/// Retrieves the type of the child shape associated with a specific child\n/// within a compound shape.\n///\n/// @param {Pointer} compoundShapeChild\n///     A pointer to a btCompoundShapeChild object from which the child shape\n///     type is to be retrieved.\n///\n/// @return {Real} The type of the child shape.\n","externalName":"","help":"btCompoundShapeChild_getChildShapeType(compoundShapeChild)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShapeChild_getNode","argCount":0,"args":[],"documentation":"/// @func btCompoundShapeChild_getNode(compoundShapeChild)\n///\n/// @desc\n/// Retrieves a pointer to the internal node of the child shape within a\n/// compound shape's bounding volume hierarchy (BVH).\n///\n/// @param {Pointer} compoundShapeChild\n///     A pointer to a btCompoundShapeChild object representing the child shape.\n///\n/// @return {Pointer} A pointer to the internal node of the child shape within\n/// the compound shape's BVH.\n","externalName":"","help":"btCompoundShapeChild_getNode(compoundShapeChild)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_create","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_create([enableDynamicAabbTree[, initialChildCapacity]])\n///\n/// @desc\n/// Creates a new instance of a compound shape in the Bullet Physics library,\n/// which can hold multiple child shapes.\n///\n/// @param {Bool} [enableDynamicAabbTree]\n///     Set to true to enable dynamic AABB (Axis-Aligned Bounding Box) tree\n///     updates for the compound shape. Defaults to true.\n/// @param {Real} [initialChildCapacity]\n///     Specifies the initial capacity for child shapes within the compound\n///     shape. Defaults to 0.\n///\n/// @return {Pointer} A pointer to the created btCompoundShape object, a\n/// compound shape that can hold multiple child shapes.\n","externalName":"","help":"btCompoundShape_create([enableDynamicAabbTree[, initialChildCapacity]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_destroy","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_destroy(compoundShape)\n///\n/// @desc\n/// Destroys a previously created btCompoundShape instance, releasing its\n/// allocated resources.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object to be destroyed.\n","externalName":"","help":"btCompoundShape_destroy(compoundShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_addChildShape","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_addChildShape(compoundShape, localTransform, shape)\n///\n/// @desc\n/// Adds a child shape to the btCompoundShape with a specified local transform.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Pointer} localTransform\n///     A pointer to the btTransform object representing the local transform of\n///     the child shape.\n/// @param {Pointer} shape\n///     A pointer to the child shape (btCollisionShape) to be added.\n","externalName":"","help":"btCompoundShape_addChildShape(compoundShape, localTransform, shape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_removeChildShape","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_removeChildShape(compoundShape, shape)\n///\n/// @desc\n/// Removes a child shape from the btCompoundShape.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Pointer} shape\n///     A pointer to the child shape (btCollisionShape) to be removed.\n","externalName":"","help":"btCompoundShape_removeChildShape(compoundShape, shape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_removeChildShapeByIndex","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_removeChildShapeByIndex(compoundShape, index)\n///\n/// @desc\n/// Removes a child shape from the btCompoundShape by its index.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Real} index\n///     The index of the child shape to be removed.\n","externalName":"","help":"btCompoundShape_removeChildShapeByIndex(compoundShape, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_getNumChildShapes","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_getNumChildShapes(compoundShape)\n///\n/// @desc\n/// Gets the number of child shapes contained within the btCompoundShape.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n///\n/// @return {Real} The number of child shapes in the compound shape.\n","externalName":"","help":"btCompoundShape_getNumChildShapes(compoundShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_getChildShape","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_getChildShape(compoundShape, index)\n///\n/// @desc\n/// Gets a specific child shape of the btCompoundShape by its index.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Real} index\n///     The index of the child shape to retrieve.\n///\n/// @return {Pointer} A pointer to the child shape (btCollisionShape) at the\n/// specified index.\n","externalName":"","help":"btCompoundShape_getChildShape(compoundShape, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_getChildTransform","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_getChildTransform(compoundShape, index)\n///\n/// @desc\n/// Gets the transform of a specific child shape of the btCompoundShape by its\n/// index.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Real} index\n///     The index of the child shape to retrieve the transform for.\n///\n/// @return {Pointer} A pointer to the transform (btTransform) of the child\n/// shape at the specified index.\n","externalName":"","help":"btCompoundShape_getChildTransform(compoundShape, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_updateChildTransform","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_updateChildTransform(compoundShape, childIndex, newChildTransform[, shouldRecalculateLocalAabb])\n///\n/// @desc\n/// Updates the transform of a specific child shape in the btCompoundShape.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Real} childIndex\n///     The index of the child shape to update.\n/// @param {Pointer} newChildTransform\n///     A pointer to the new transform (btTransform) for the child shape.\n/// @param {Bool} [shouldRecalculateLocalAabb]\n///     If true, recalculate the local AABB (Axis-Aligned Bounding Box) after\n///     the transform update. Defaults to true.\n","externalName":"","help":"btCompoundShape_updateChildTransform(compoundShape, childIndex, newChildTransform[, shouldRecalculateLocalAabb])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_getChildList","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_getChildList(compoundShape, outArray)\n///\n/// @desc\n/// Retrieves an array of pointers to the child shapes within the\n/// btCompoundShape.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Array<Pointer>} outArray\n///     An array to store the pointers to the child shapes (btCompoundShapeChild).\n","externalName":"","help":"btCompoundShape_getChildList(compoundShape, outArray)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_recalculateLocalAabb","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_recalculateLocalAabb(compoundShape)\n///\n/// @desc\n/// Recalculates the local axis-aligned bounding box (AABB) of the\n/// btCompoundShape. The local AABB is the minimal AABB enclosing all child\n/// shapes' AABBs after a transformation.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n","externalName":"","help":"btCompoundShape_recalculateLocalAabb(compoundShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_createAabbTreeFromChildren","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_createAabbTreeFromChildren(compoundShape)\n///\n/// @desc\n/// Creates an axis-aligned bounding box (AABB) tree based on the children\n/// shapes of the btCompoundShape. The AABB tree can be used for efficient\n/// collision detection and broad-phase optimization.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n","externalName":"","help":"btCompoundShape_createAabbTreeFromChildren(compoundShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_calculatePrincipalAxisTransform","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_calculatePrincipalAxisTransform(compoundShape, masses, principal, inertia)\n///\n/// @desc\n/// Calculates the principal axis transformation and inertia tensor for the\n/// btCompoundShape based on specified masses.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n/// @param {Array<Real>} masses\n///     An array of masses corresponding to the child shapes of the compound\n///     shape. The length of this array should match the number of child shapes.\n/// @param {Pointer} principal\n///     A pointer to the btTransform where the calculated principal axis\n///     transformation will be stored.\n/// @param {Pointer} inertia\n///     A pointer to the btVector3 where the calculated inertia tensor will be\n///     stored.\n","externalName":"","help":"btCompoundShape_calculatePrincipalAxisTransform(compoundShape, masses, principal, inertia)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btCompoundShape_getUpdateRevision","argCount":0,"args":[],"documentation":"/// @func btCompoundShape_getUpdateRevision(compoundShape)\n///\n/// @desc\n/// Gets the update revision for the btCompoundShape, which can be used to track\n/// changes in the shape.\n///\n/// @param {Pointer} compoundShape\n///     A pointer to the btCompoundShape object.\n///\n/// @return {Real} Returns the update revision of the btCompoundShape.\n","externalName":"","help":"btCompoundShape_getUpdateRevision(compoundShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_create","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_create(meshInterface, useQuantizedAabbCompression[, buildBvh])\n///\n/// @desc\n/// Creates a new instance of a Bullet BvhTriangleMeshShape.\n///\n/// @param {Pointer} meshInterface\n///     A pointer to the btStridingMeshInterface object representing the mesh.\n/// @param {Bool} useQuantizedAabbCompression\n///     A boolean indicating whether to use quantized AABB compression.\n/// @param {Bool} [buildBvh]\n///     A boolean indicating whether to build the BVH structure. Default is true.\n///\n/// @return {Pointer} A pointer to the created btBvhTriangleMeshShape object.\n","externalName":"","help":"btBvhTriangleMeshShape_create(meshInterface, useQuantizedAabbCompression[, buildBvh])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_createAabb","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_createAabb(meshInterface, useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax[, buildBvh])\n///\n/// @desc\n/// Creates a new instance of a Bullet BvhTriangleMeshShape with specified AABB.\n///\n/// @param {Pointer} meshInterface\n///     A pointer to the btStridingMeshInterface object representing the mesh.\n/// @param {Bool} useQuantizedAabbCompression\n///     A boolean indicating whether to use quantized AABB compression.\n/// @param {Pointer} bvhAabbMin\n///     A pointer to the minimum AABB (Axis-Aligned Bounding Box) coordinates as\n///     a btVector3.\n/// @param {Pointer} bvhAabbMax\n///     A pointer to the maximum AABB (Axis-Aligned Bounding Box) coordinates as\n///     a btVector3.\n/// @param {Bool} [buildBvh]\n///     A boolean indicating whether to build the BVH structure. Default is true.\n///\n/// @return {Pointer} A pointer to the created btBvhTriangleMeshShape object.\n","externalName":"","help":"btBvhTriangleMeshShape_createAabb(meshInterface, useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax[, buildBvh])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_createAabbXYZ","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_createAabbXYZ(meshInterface, useQuantizedAabbCompression, bvhAabbMinX, bvhAabbMinY, bvhAabbMinZ, bvhAabbMaxX, bvhAabbMaxY, bvhAabbMaxZ[, buildBvh])\n///\n/// @desc\n/// Creates a new instance of a Bullet BvhTriangleMeshShape with specified AABB\n/// using individual coordinates.\n///\n/// @param {Pointer} meshInterface\n///     A pointer to the btStridingMeshInterface object representing the mesh.\n/// @param {Bool} useQuantizedAabbCompression\n///     A boolean indicating whether to use quantized AABB compression.\n/// @param {Real} bvhAabbMinX\n///     The minimum x-coordinate of the AABB.\n/// @param {Real} bvhAabbMinY\n///     The minimum y-coordinate of the AABB.\n/// @param {Real} bvhAabbMinZ\n///     The minimum z-coordinate of the AABB.\n/// @param {Real} bvhAabbMaxX\n///     The maximum x-coordinate of the AABB.\n/// @param {Real} bvhAabbMaxY\n///     The maximum y-coordinate of the AABB.\n/// @param {Real} bvhAabbMaxZ\n///     The maximum z-coordinate of the AABB.\n/// @param {Bool} [buildBvh]\n///     A boolean indicating whether to build the BVH structure. Default is true.\n///\n/// @return {Pointer} A pointer to the created btBvhTriangleMeshShape object.\n","externalName":"","help":"btBvhTriangleMeshShape_createAabbXYZ(meshInterface, useQuantizedAabbCompression, bvhAabbMinX, bvhAabbMinY, bvhAabbMinZ, bvhAabbMaxX, bvhAabbMaxY, bvhAabbMaxZ[, buildBvh])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_destroy","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_destroy(bvhTriangleMeshShape)\n///\n/// @desc\n/// Destroys an instance of a Bullet BvhTriangleMeshShape.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object to be destroyed.\n","externalName":"","help":"btBvhTriangleMeshShape_destroy(bvhTriangleMeshShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_getOwnsBvh","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_getOwnsBvh(bvhTriangleMeshShape)\n///\n/// @desc\n/// Gets a boolean indicating whether the BvhTriangleMeshShape owns a BVH\n/// (Bounding Volume Hierarchy).\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n///\n/// @return {Bool} A boolean indicating whether the BvhTriangleMeshShape owns\n/// a BVH.\n","externalName":"","help":"btBvhTriangleMeshShape_getOwnsBvh(bvhTriangleMeshShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_performRaycast","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_performRaycast(bvhTriangleMeshShape, callback, raySource, rayTarget)\n///\n/// @desc\n/// Performs a raycast on the triangle mesh shape and invokes the specified\n/// callback for each triangle hit by the ray.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} callback\n///     A pointer to the callback object that will be invoked for each hit\n///     triangle.\n/// @param {Pointer} raySource\n///     A pointer to a btVector3 representing the ray's source position.\n/// @param {Pointer} rayTarget\n///     A pointer to a btVector3 representing the ray's target position.\n","externalName":"","help":"btBvhTriangleMeshShape_performRaycast(bvhTriangleMeshShape, callback, raySource, rayTarget)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_performConvexcast","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_performConvexcast(bvhTriangleMeshShape, callback, boxSource, boxTarget, boxMin, boxMax)\n///\n/// @desc\n/// Performs a convex cast against the BvhTriangleMeshShape, calling a callback\n/// for each triangle hit.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} callback\n///     A pointer to the callback function to be invoked for each triangle hit.\n/// @param {Pointer} boxSource\n///     A pointer to the source box.\n/// @param {Pointer} boxTarget\n///     A pointer to the target box.\n/// @param {Pointer} boxMin\n///     A pointer to the minimum box coordinates.\n/// @param {Pointer} boxMax\n///     A pointer to the maximum box coordinates.\n","externalName":"","help":"btBvhTriangleMeshShape_performConvexcast(bvhTriangleMeshShape, callback, boxSource, boxTarget, boxMin, boxMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_processAllTriangles","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_processAllTriangles(bvhTriangleMeshShape, callback, boxMin, boxMax)\n///\n/// @desc\n/// Processes all triangles in the BvhTriangleMeshShape that intersect with a\n/// given bounding box, calling a callback for each triangle.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} callback\n///     A pointer to the callback function to be invoked for each triangle\n///     within the bounding box.\n/// @param {Pointer} boxMin\n///     A pointer to the minimum box coordinates.\n/// @param {Pointer} boxMax\n///     A pointer to the maximum box coordinates.\n","externalName":"","help":"btBvhTriangleMeshShape_processAllTriangles(bvhTriangleMeshShape, callback, boxMin, boxMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_refitTree","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_refitTree(bvhTriangleMeshShape, boxMin, boxMax)\n///\n/// @desc\n/// Refits the BvhTriangleMeshShape's bounding box hierarchy using the specified\n/// minimum and maximum bounding box coordinates.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} boxMin\n///     A pointer to the minimum bounding box coordinates.\n/// @param {Pointer} boxMax\n///     A pointer to the maximum bounding box coordinates.\n","externalName":"","help":"btBvhTriangleMeshShape_refitTree(bvhTriangleMeshShape, boxMin, boxMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_partialRefitTree","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_partialRefitTree(bvhTriangleMeshShape, boxMin, boxMax)\n///\n/// @desc\n/// Partially refits the BvhTriangleMeshShape's bounding box hierarchy using the\n/// specified minimum and maximum bounding box coordinates.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} boxMin\n///     A pointer to the minimum bounding box coordinates.\n/// @param {Pointer} boxMax\n///     A pointer to the maximum bounding box coordinates.\n","externalName":"","help":"btBvhTriangleMeshShape_partialRefitTree(bvhTriangleMeshShape, boxMin, boxMax)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_getOptimizedBvh","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_getOptimizedBvh(bvhTriangleMeshShape)\n///\n/// @desc\n/// Gets the optimized bounding volume hierarchy (BVH) used by the\n/// BvhTriangleMeshShape.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n///\n/// @return {Pointer} A pointer to the optimized BVH used by the\n/// BvhTriangleMeshShape.\n","externalName":"","help":"btBvhTriangleMeshShape_getOptimizedBvh(bvhTriangleMeshShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_setOptimizedBvh","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_setOptimizedBvh(bvhTriangleMeshShape, bvh[, localScaling])\n///\n/// @desc\n/// Sets the optimized bounding volume hierarchy (BVH) for the\n/// BvhTriangleMeshShape, optionally with local scaling.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n/// @param {Pointer} bvh\n///     A pointer to the optimized BVH to set.\n/// @param {Pointer} [localScaling]\n///     A pointer to the local scaling vector to apply to the BVH. Defaults to\n///     (1, 1, 1) if not provided.\n","externalName":"","help":"btBvhTriangleMeshShape_setOptimizedBvh(bvhTriangleMeshShape, bvh[, localScaling])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_buildOptimizedBvh","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_buildOptimizedBvh(bvhTriangleMeshShape)\n///\n/// @desc\n/// Builds the optimized bounding volume hierarchy (BVH) for the\n/// BvhTriangleMeshShape.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n","externalName":"","help":"btBvhTriangleMeshShape_buildOptimizedBvh(bvhTriangleMeshShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btBvhTriangleMeshShape_usesQuantizedAabbCompression","argCount":0,"args":[],"documentation":"/// @func btBvhTriangleMeshShape_usesQuantizedAabbCompression(bvhTriangleMeshShape)\n///\n/// @desc\n/// Checks if the BvhTriangleMeshShape uses quantized AABB (Axis-Aligned\n/// Bounding Box) compression.\n///\n/// @param {Pointer} bvhTriangleMeshShape\n///     A pointer to the btBvhTriangleMeshShape object.\n///\n/// @return {Bool} Returns true if quantized AABB compression is used, false\n/// otherwise.\n","externalName":"","help":"btBvhTriangleMeshShape_usesQuantizedAabbCompression(bvhTriangleMeshShape)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_create","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_create()\n///\n/// @desc\n/// Creates a new instance of btVehicleTuning, which contains tuning parameters\n/// for a vehicle.\n///\n/// @return {Pointer} A pointer to the newly created btVehicleTuning object.\n","externalName":"","help":"btVehicleTuning_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_destroy","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_destroy(vehicleTuning)\n///\n/// @desc\n/// Destroys a btVehicleTuning object and frees the associated memory.\n///\n/// @param {Pointer} vehicleTuning A pointer to the btVehicleTuning object to be\n/// destroyed.\n","externalName":"","help":"btVehicleTuning_destroy(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getSuspensionStiffness(vehicleTuning)\n///\n/// @desc\n/// Gets the suspension stiffness for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The suspension stiffness for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_getSuspensionStiffness(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setSuspensionStiffness(vehicleTuning, suspensionStiffness)\n///\n/// @desc\n/// Sets the suspension stiffness for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} suspensionStiffness\n///     The suspension stiffness to set for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_setSuspensionStiffness(vehicleTuning, suspensionStiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getSuspensionCompression","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getSuspensionCompression(vehicleTuning)\n///\n/// @desc\n/// Gets the suspension compression for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The suspension compression for the vehicle tuning\n/// configuration.\n","externalName":"","help":"btVehicleTuning_getSuspensionCompression(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setSuspensionCompression","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setSuspensionCompression(vehicleTuning, suspensionCompression)\n///\n/// @desc\n/// Sets the suspension compression for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} suspensionCompression\n///     The suspension compression to set for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_setSuspensionCompression(vehicleTuning, suspensionCompression)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getSuspensionDamping","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getSuspensionDamping(vehicleTuning)\n///\n/// @desc\n/// Gets the suspension damping for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The suspension damping for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_getSuspensionDamping(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setSuspensionDamping","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setSuspensionDamping(vehicleTuning, suspensionDamping)\n///\n/// @desc\n/// Sets the suspension damping for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} suspensionDamping\n///     The suspension damping to set for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_setSuspensionDamping(vehicleTuning, suspensionDamping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getSuspensionTravelCm(vehicleTuning)\n///\n/// @desc\n/// Gets the maximum suspension travel in centimeters for a vehicle tuning\n/// configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The maximum suspension travel in centimeters for the vehicle\n/// tuning configuration.\n","externalName":"","help":"btVehicleTuning_getSuspensionTravelCm(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setSuspensionTravelCm(vehicleTuning, suspensionTravelCm)\n///\n/// @desc\n/// Sets the maximum suspension travel in centimeters for a vehicle tuning\n/// configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} suspensionTravelCm\n///     The maximum suspension travel in centimeters to set for the vehicle\n///     tuning configuration.\n","externalName":"","help":"btVehicleTuning_setSuspensionTravelCm(vehicleTuning, suspensionTravelCm)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getFrictionSlip(vehicleTuning)\n///\n/// @desc\n/// Gets the friction slip value for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The friction slip value for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_getFrictionSlip(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setFrictionSlip(vehicleTuning, frictionSlip)\n///\n/// @desc\n/// Sets the friction slip value for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} frictionSlip\n///     The friction slip value to set for the vehicle tuning configuration.\n","externalName":"","help":"btVehicleTuning_setFrictionSlip(vehicleTuning, frictionSlip)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_getMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_getMaxSuspensionForce(vehicleTuning)\n///\n/// @desc\n/// Gets the maximum suspension force value for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n///\n/// @return {Real} The maximum suspension force value for the vehicle tuning\n/// configuration.\n","externalName":"","help":"btVehicleTuning_getMaxSuspensionForce(vehicleTuning)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btVehicleTuning_setMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btVehicleTuning_setMaxSuspensionForce(vehicleTuning, maxSuspensionForce)\n///\n/// @desc\n/// Sets the maximum suspension force value for a vehicle tuning configuration.\n///\n/// @param {Pointer} vehicleTuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Real} maxSuspensionForce\n///     The maximum suspension force value to set for the vehicle tuning\n///     configuration.\n","externalName":"","help":"btVehicleTuning_setMaxSuspensionForce(vehicleTuning, maxSuspensionForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_create","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_create(tuning, chassis, raycaster)\n///\n/// @desc\n/// Creates a btRaycastVehicle using the provided tuning, chassis rigid body,\n/// and raycaster.\n///\n/// @param {Pointer} tuning\n///     A pointer to the btVehicleTuning object.\n/// @param {Pointer} chassis\n///     A pointer to the btRigidBody that represents the chassis of the vehicle.\n/// @param {Pointer} raycaster\n///     A pointer to the btVehicleRaycaster to be used for raycasting in the\n///     vehicle.\n///\n/// @return {Pointer} A pointer to the newly created btRaycastVehicle.\n","externalName":"","help":"btRaycastVehicle_create(tuning, chassis, raycaster)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_destroy","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_destroy(raycastVehicle)\n///\n/// @desc\n/// Destroys a btRaycastVehicle instance, releasing associated resources.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object to be destroyed.\n","externalName":"","help":"btRaycastVehicle_destroy(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_updateAction","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_updateAction(raycastVehicle, collisionWorld, step)\n///\n/// @desc\n/// Updates the action of a btRaycastVehicle for the specified time step using\n/// the provided collision world.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object to update.\n/// @param {Pointer} collisionWorld\n///     A pointer to the btCollisionWorld in which the vehicle operates.\n/// @param {Real} step\n///     The time step for the update.\n","externalName":"","help":"btRaycastVehicle_updateAction(raycastVehicle, collisionWorld, step)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getChassisWorldTransform","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getChassisWorldTransform(raycastVehicle)\n///\n/// @desc\n/// Gets the world transform of the chassis of the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Pointer} A pointer to the btTransform representing the world\n/// transform of the chassis.\n","externalName":"","help":"btRaycastVehicle_getChassisWorldTransform(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_rayCast","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_rayCast(raycastVehicle, wheel)\n///\n/// @desc\n/// Cast a ray for a wheel of the btRaycastVehicle to find collision information.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Pointer} wheel\n///     A pointer to the btWheelInfo object representing the wheel for which the\n///     ray is cast.\n","externalName":"","help":"btRaycastVehicle_rayCast(raycastVehicle, wheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_resetSuspension","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_resetSuspension(raycastVehicle)\n///\n/// @desc\n/// Reset the suspension of the btRaycastVehicle, bringing it to its rest\n/// position.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object whose suspension needs to be\n///     reset.\n","externalName":"","help":"btRaycastVehicle_resetSuspension(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getSteeringValue","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getSteeringValue(raycastVehicle, wheel)\n///\n/// @desc\n/// Get the steering value for a specific wheel of the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} wheel\n///     The index of the wheel for which the steering value is requested.\n///\n/// @return {Real} The steering value for the specified wheel.\n","externalName":"","help":"btRaycastVehicle_getSteeringValue(raycastVehicle, wheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_setSteeringValue","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_setSteeringValue(raycastVehicle, steering, wheel)\n///\n/// @desc\n/// Set the steering value for a specific wheel of the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} steering\n///     The steering value to set for the specified wheel. Should be in the\n///     range -1..1.\n/// @param {Real} wheel\n///     The index of the wheel for which the steering value should be set.\n","externalName":"","help":"btRaycastVehicle_setSteeringValue(raycastVehicle, steering, wheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_applyEngineForce","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_applyEngineForce(raycastVehicle, force, wheel)\n///\n/// @desc\n/// Apply engine force to a specific wheel of the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} force\n///     The engine force to apply to the specified wheel.\n/// @param {Real} wheel\n///     The index of the wheel to which the engine force should be applied.\n","externalName":"","help":"btRaycastVehicle_applyEngineForce(raycastVehicle, force, wheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getWheelTransformWS","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getWheelTransformWS(raycastVehicle, wheelIndex)\n///\n/// @desc\n/// Get the world transform of a specific wheel on the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} wheelIndex\n///     The index of the wheel for which to retrieve the world transform.\n///\n/// @return {Pointer} A pointer to the btTransform object representing the world\n/// transform of the specified wheel.\n","externalName":"","help":"btRaycastVehicle_getWheelTransformWS(raycastVehicle, wheelIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_updateWheelTransform","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_updateWheelTransform(raycastVehicle, wheelIndex[, interpolatedTransform])\n///\n/// @desc\n/// Update the wheel transform for a specific wheel on the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} wheelIndex\n///     The index of the wheel for which to update the transform.\n/// @param {Bool} [interpolatedTransform]\n///     A boolean indicating whether to use interpolated transform for the wheel.\n///     Defaults to true.\n","externalName":"","help":"btRaycastVehicle_updateWheelTransform(raycastVehicle, wheelIndex[, interpolatedTransform])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_addWheel","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_addWheel(raycastVehicle, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel)\n///\n/// @desc\n/// Add a wheel to the btRaycastVehicle with specified parameters.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Pointer} connectionPointCS0\n///     The connection point of the wheel in chassis space.\n/// @param {Pointer} wheelDirectionCS0\n///     The direction of the wheel in chassis space.\n/// @param {Pointer} wheelAxleCS\n///     The axle direction of the wheel in chassis space.\n/// @param {Real} suspensionRestLength\n///     The rest length of the suspension in the uncompressed state.\n/// @param {Real} wheelRadius\n///     The radius of the wheel.\n/// @param {Pointer} tuning\n///     A pointer to the btVehicleTuning object specifying tuning parameters for\n///     the wheel.\n/// @param {Bool} isFrontWheel\n///     A boolean indicating whether the wheel is a front wheel.\n","externalName":"","help":"btRaycastVehicle_addWheel(raycastVehicle, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getNumWheels","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getNumWheels(raycastVehicle)\n///\n/// @desc\n/// Get the number of wheels in the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Real} The number of wheels in the btRaycastVehicle.\n","externalName":"","help":"btRaycastVehicle_getNumWheels(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getWheelInfo","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getWheelInfo(raycastVehicle, index)\n///\n/// @desc\n/// Get information about a wheel at a specific index in the btRaycastVehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} index\n///     The index of the wheel for which information is required.\n///\n/// @return {Pointer} A pointer to the btWheelInfo object containing information\n/// about the specified wheel.\n","externalName":"","help":"btRaycastVehicle_getWheelInfo(raycastVehicle, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_updateWheelTransformsWS","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_updateWheelTransformsWS(raycastVehicle, wheel[, interpolatedTransform])\n///\n/// @desc\n/// Update the wheel transforms in world space for a specified wheel.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} wheel\n///     The index of the wheel for which to update the transform.\n/// @param {Bool} [interpolatedTransform]\n///     If true, the transform will be interpolated. Default is true.\n","externalName":"","help":"btRaycastVehicle_updateWheelTransformsWS(raycastVehicle, wheel[, interpolatedTransform])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_setBrake","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_setBrake(raycastVehicle, brake, wheelIndex)\n///\n/// @desc\n/// Set the braking force for a specific wheel of the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} brake\n///     The braking force to apply to the wheel.\n/// @param {Real} wheelIndex\n///     The index of the wheel for which to set the brake.\n","externalName":"","help":"btRaycastVehicle_setBrake(raycastVehicle, brake, wheelIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_setPitchControl","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_setPitchControl(raycastVehicle, pitch)\n///\n/// @desc\n/// Set the pitch control factor for the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} pitch\n///     The pitch control factor to set for the vehicle.\n","externalName":"","help":"btRaycastVehicle_setPitchControl(raycastVehicle, pitch)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_updateSuspension","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_updateSuspension(raycastVehicle, deltaTime)\n///\n/// @desc\n/// Update the suspension for the raycast vehicle based on the elapsed time.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} deltaTime\n///     The elapsed time since the last suspension update.\n","externalName":"","help":"btRaycastVehicle_updateSuspension(raycastVehicle, deltaTime)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_updateFriction","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_updateFriction(raycastVehicle, timeStep)\n///\n/// @desc\n/// Update the friction for the raycast vehicle based on the time step.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} timeStep\n///     The time step for the friction update.\n","externalName":"","help":"btRaycastVehicle_updateFriction(raycastVehicle, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getRigidBody","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getRigidBody(raycastVehicle)\n///\n/// @desc\n/// Get the rigid body associated with the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Pointer} A pointer to the associated rigid body.\n","externalName":"","help":"btRaycastVehicle_getRigidBody(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getRightAxis","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getRightAxis(raycastVehicle)\n///\n/// @desc\n/// Get the right axis index for the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Real} The index representing the right axis.\n","externalName":"","help":"btRaycastVehicle_getRightAxis(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getUpAxis","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getUpAxis(raycastVehicle)\n///\n/// @desc\n/// Get the up axis index for the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Real} The index representing the up axis.\n","externalName":"","help":"btRaycastVehicle_getUpAxis(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getForwardAxis","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getForwardAxis(raycastVehicle)\n///\n/// @desc\n/// Get the forward axis index for the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Real} The index representing the forward axis.\n","externalName":"","help":"btRaycastVehicle_getForwardAxis(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getForwardVector","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getForwardVector(raycastVehicle, outVector3)\n///\n/// @desc\n/// Get the forward vector of the raycast vehicle.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the forward vector will be copied.\n","externalName":"","help":"btRaycastVehicle_getForwardVector(raycastVehicle, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_getCurrentSpeedKmHour","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_getCurrentSpeedKmHour(raycastVehicle)\n///\n/// @desc\n/// Get the current speed of the raycast vehicle in kilometers per hour (km/h).\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n///\n/// @return {Real} The current speed of the vehicle in kilometers per hour.\n","externalName":"","help":"btRaycastVehicle_getCurrentSpeedKmHour(raycastVehicle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastVehicle_setCoordinateSystem","argCount":0,"args":[],"documentation":"/// @func btRaycastVehicle_setCoordinateSystem(raycastVehicle, rightIndex, upIndex, forwardIndex)\n///\n/// @desc\n/// Set the coordinate system for the raycast vehicle. This specifies the\n/// mapping of axes.\n///\n/// @param {Pointer} raycastVehicle\n///     A pointer to the btRaycastVehicle object.\n/// @param {Real} rightIndex\n///     The index specifying the right axis in the vehicle's local coordinate\n///     system.\n/// @param {Real} upIndex\n///     The index specifying the up axis in the vehicle's local coordinate\n///     system.\n/// @param {Real} forwardIndex\n///     The index specifying the forward axis in the vehicle's local coordinate\n///     system.\n","externalName":"","help":"btRaycastVehicle_setCoordinateSystem(raycastVehicle, rightIndex, upIndex, forwardIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultVehicleRaycaster_create","argCount":0,"args":[],"documentation":"/// @func btDefaultVehicleRaycaster_create(world)\n///\n/// @desc\n/// Create a new instance of the btDefaultVehicleRaycaster.\n///\n/// @param {Pointer} world\n///     A pointer to the btDynamicsWorld object.\n///\n/// @return {Pointer} A pointer to the newly created btDefaultVehicleRaycaster\n/// object.\n","externalName":"","help":"btDefaultVehicleRaycaster_create(world)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultVehicleRaycaster_destroy","argCount":0,"args":[],"documentation":"/// @func btDefaultVehicleRaycaster_destroy(defaultVehicleRaycaster)\n///\n/// @desc\n/// Destroy the btDefaultVehicleRaycaster instance.\n///\n/// @param {Pointer} defaultVehicleRaycaster\n///     A pointer to the btDefaultVehicleRaycaster object.\n","externalName":"","help":"btDefaultVehicleRaycaster_destroy(defaultVehicleRaycaster)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btDefaultVehicleRaycaster_castRay","argCount":0,"args":[],"documentation":"/// @func btDefaultVehicleRaycaster_castRay(defaultVehicleRaycaster, from, to, result)\n///\n/// @desc\n/// Cast a ray using the btDefaultVehicleRaycaster.\n///\n/// @param {Pointer} defaultVehicleRaycaster\n///     A pointer to the btDefaultVehicleRaycaster object.\n/// @param {Pointer} from\n///     A pointer to a btVector3 representing the starting point of the ray.\n/// @param {Pointer} to\n///     A pointer to a btVector3 representing the end point of the ray.\n/// @param {Pointer} result\n///     A pointer to a btVehicleRaycasterResult object where the result of the\n///     raycast will be stored.\n","externalName":"","help":"btDefaultVehicleRaycaster_castRay(defaultVehicleRaycaster, from, to, result)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_create","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_create()\n///\n/// @desc\n/// Create a new instance of the btWheelInfoConstructionInfo.\n///\n/// @return {Pointer} A pointer to the newly created btWheelInfoConstructionInfo\n/// object.\n","externalName":"","help":"btWheelInfoConstructionInfo_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_destroy","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_destroy(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Destroy the btWheelInfoConstructionInfo instance.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n","externalName":"","help":"btWheelInfoConstructionInfo_destroy(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setChassisConnectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setChassisConnectionCS(wheelInfoConstructionInfo, chassisConnectionCS)\n///\n/// @desc\n/// Set the chassis connection point in the chassis local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} chassisConnectionCS\n///     A pointer to a btVector3 representing the chassis connection point in\n///     the chassis local coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_setChassisConnectionCS(wheelInfoConstructionInfo, chassisConnectionCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getChassisConnectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getChassisConnectionCS(wheelInfoConstructionInfo, outVector3)\n///\n/// @desc\n/// Get the chassis connection point in the chassis local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the chassis connection point in the\n///     chassis local coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_getChassisConnectionCS(wheelInfoConstructionInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setWheelDirectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setWheelDirectionCS(wheelInfoConstructionInfo, wheelDirectionCS)\n///\n/// @desc\n/// Set the wheel direction in the wheel local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} wheelDirectionCS\n///     A pointer to a btVector3 representing the wheel direction in the wheel\n///     local coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_setWheelDirectionCS(wheelInfoConstructionInfo, wheelDirectionCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getWheelDirectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getWheelDirectionCS(wheelInfoConstructionInfo, outVector3)\n///\n/// @desc\n/// Get the wheel direction in the wheel local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the wheel direction in the wheel local\n///     coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_getWheelDirectionCS(wheelInfoConstructionInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setWheelAxleCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setWheelAxleCS(wheelInfoConstructionInfo, wheelAxleCS)\n///\n/// @desc\n/// Set the wheel axle direction in the wheel local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} wheelAxleCS\n///     A pointer to a btVector3 representing the wheel axle direction in the\n///     wheel local coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_setWheelAxleCS(wheelInfoConstructionInfo, wheelAxleCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getWheelAxleCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getWheelAxleCS(wheelInfoConstructionInfo, outVector3)\n///\n/// @desc\n/// Get the wheel axle direction in the wheel local coordinate system.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the wheel axle direction in the wheel\n///     local coordinate system.\n","externalName":"","help":"btWheelInfoConstructionInfo_getWheelAxleCS(wheelInfoConstructionInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setSuspensionRestLength","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setSuspensionRestLength(wheelInfoConstructionInfo, suspensionRestLength)\n///\n/// @desc\n/// Set the suspension rest length for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} suspensionRestLength\n///     The suspension rest length for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setSuspensionRestLength(wheelInfoConstructionInfo, suspensionRestLength)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getSuspensionRestLength","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getSuspensionRestLength(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the suspension rest length for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The suspension rest length for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getSuspensionRestLength(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setMaxSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setMaxSuspensionTravelCm(wheelInfoConstructionInfo, maxSuspensionTravelCm)\n///\n/// @desc\n/// Set the maximum suspension travel in centimeters for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} maxSuspensionTravelCm\n///     The maximum suspension travel in centimeters for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setMaxSuspensionTravelCm(wheelInfoConstructionInfo, maxSuspensionTravelCm)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getMaxSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getMaxSuspensionTravelCm(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the maximum suspension travel in centimeters for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The maximum suspension travel in centimeters for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getMaxSuspensionTravelCm(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setWheelRadius","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setWheelRadius(wheelInfoConstructionInfo, wheelRadius)\n///\n/// @desc\n/// Set the wheel radius for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} wheelRadius\n///     The wheel radius for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setWheelRadius(wheelInfoConstructionInfo, wheelRadius)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getWheelRadius","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getWheelRadius(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the wheel radius for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The wheel radius for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getWheelRadius(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setSuspensionStiffness(wheelInfoConstructionInfo, suspensionStiffness)\n///\n/// @desc\n/// Set the suspension stiffness for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} suspensionStiffness\n///     The suspension stiffness for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setSuspensionStiffness(wheelInfoConstructionInfo, suspensionStiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getSuspensionStiffness(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the suspension stiffness for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The suspension stiffness for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getSuspensionStiffness(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setWheelsDampingCompression","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setWheelsDampingCompression(wheelInfoConstructionInfo, wheelsDampingCompression)\n///\n/// @desc\n/// Set the wheels damping compression for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} wheelsDampingCompression\n///     The wheels damping compression for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setWheelsDampingCompression(wheelInfoConstructionInfo, wheelsDampingCompression)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getWheelsDampingCompression","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getWheelsDampingCompression(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the wheels damping compression for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The wheels damping compression for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getWheelsDampingCompression(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setWheelsDampingRelaxation","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setWheelsDampingRelaxation(wheelInfoConstructionInfo, wheelsDampingRelaxation)\n///\n/// @desc\n/// Set the wheels damping relaxation for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} wheelsDampingRelaxation\n///     The wheels damping relaxation for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setWheelsDampingRelaxation(wheelInfoConstructionInfo, wheelsDampingRelaxation)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getWheelsDampingRelaxation","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getWheelsDampingRelaxation(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the wheels damping relaxation for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The wheels damping relaxation for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getWheelsDampingRelaxation(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setFrictionSlip(wheelInfoConstructionInfo, frictionSlip)\n///\n/// @desc\n/// Set the friction slip for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} frictionSlip\n///     The friction slip for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setFrictionSlip(wheelInfoConstructionInfo, frictionSlip)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getFrictionSlip(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the friction slip for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The friction slip for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getFrictionSlip(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setMaxSuspensionForce(wheelInfoConstructionInfo, maxSuspensionForce)\n///\n/// @desc\n/// Set the maximum suspension force for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Real} maxSuspensionForce\n///     The maximum suspension force for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setMaxSuspensionForce(wheelInfoConstructionInfo, maxSuspensionForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getMaxSuspensionForce(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Get the maximum suspension force for the wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Real} The maximum suspension force for the wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_getMaxSuspensionForce(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_setIsFrontWheel","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_setIsFrontWheel(wheelInfoConstructionInfo, isFrontWheel)\n///\n/// @desc\n/// Set whether the wheel is a front wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n/// @param {Bool} isFrontWheel\n///     A boolean indicating whether the wheel is a front wheel.\n","externalName":"","help":"btWheelInfoConstructionInfo_setIsFrontWheel(wheelInfoConstructionInfo, isFrontWheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfoConstructionInfo_getIsFrontWheel","argCount":0,"args":[],"documentation":"/// @func btWheelInfoConstructionInfo_getIsFrontWheel(wheelInfoConstructionInfo)\n///\n/// @desc\n/// Check if the wheel is a front wheel.\n///\n/// @param {Pointer} wheelInfoConstructionInfo\n///     A pointer to the btWheelInfoConstructionInfo object.\n///\n/// @return {Bool} True if the wheel is a front wheel, false otherwise.\n","externalName":"","help":"btWheelInfoConstructionInfo_getIsFrontWheel(wheelInfoConstructionInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getContactNormalWS","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getContactNormalWS(raycastInfo, outVector3)\n///\n/// @desc\n/// Get the contact normal in world space from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the contact normal will be copied.\n","externalName":"","help":"btRaycastInfo_getContactNormalWS(raycastInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getContactPointWS","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getContactPointWS(raycastInfo, outVector3)\n///\n/// @desc\n/// Get the contact point in world space from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the contact point will be copied.\n","externalName":"","help":"btRaycastInfo_getContactPointWS(raycastInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getSuspensionLength","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getSuspensionLength(raycastInfo)\n///\n/// @desc\n/// Get the suspension length from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n///\n/// @return {Real} The suspension length.\n","externalName":"","help":"btRaycastInfo_getSuspensionLength(raycastInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getHardPointWS","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getHardPointWS(raycastInfo, outVector3)\n///\n/// @desc\n/// Get the hard point in world space from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the hard point will be copied.\n","externalName":"","help":"btRaycastInfo_getHardPointWS(raycastInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getWheelDirectionWS","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getWheelDirectionWS(raycastInfo, outVector3)\n///\n/// @desc\n/// Get the wheel direction in world space from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the wheel direction will be copied.\n","externalName":"","help":"btRaycastInfo_getWheelDirectionWS(raycastInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getWheelAxleWS","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getWheelAxleWS(raycastInfo, outVector3)\n///\n/// @desc\n/// Get the wheel axle in world space from the raycast info.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the wheel axle will be copied.\n","externalName":"","help":"btRaycastInfo_getWheelAxleWS(raycastInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getIsInContact","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getIsInContact(raycastInfo)\n///\n/// @desc\n/// Check if the raycast is in contact with an object.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n///\n/// @return {Bool} True if in contact, false otherwise.\n","externalName":"","help":"btRaycastInfo_getIsInContact(raycastInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRaycastInfo_getGroundObject","argCount":0,"args":[],"documentation":"/// @func btRaycastInfo_getGroundObject(raycastInfo)\n///\n/// @desc\n/// Get the object in contact with the raycast.\n///\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo object.\n///\n/// @return {Pointer} A pointer to the object in contact.\n","externalName":"","help":"btRaycastInfo_getGroundObject(raycastInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_create","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_create([ci])\n///\n/// @desc\n/// Create a btWheelInfo instance.\n///\n/// @param {Pointer} [ci]\n///     A pointer to a btWheelInfoConstructionInfo object for wheel construction\n///     info.\n///\n/// @return {Pointer} A pointer to the created btWheelInfo instance.\n","externalName":"","help":"btWheelInfo_create([ci])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_destroy","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_destroy(wheelInfo)\n///\n/// @desc\n/// Destroy a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance to be destroyed.\n","externalName":"","help":"btWheelInfo_destroy(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getRaycastInfo","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getRaycastInfo(wheelInfo)\n///\n/// @desc\n/// Get the raycast information associated with a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Pointer} A pointer to the btRaycastInfo associated with the\n/// wheelInfo.\n","externalName":"","help":"btWheelInfo_getRaycastInfo(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWorldTransform","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWorldTransform(wheelInfo)\n///\n/// @desc\n/// Get the world transform associated with a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Pointer} A pointer to the btTransform representing the world\n/// transform of the wheelInfo.\n","externalName":"","help":"btWheelInfo_getWorldTransform(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setChassisConnectionPointCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setChassisConnectionPointCS(wheelInfo, chassisConnectionPointCS)\n///\n/// @desc\n/// Set the chassis connection point in chassis space for a btWheelInfo\n/// instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} chassisConnectionPointCS\n///     A pointer to a btVector3 representing the chassis connection point in\n///     chassis space.\n","externalName":"","help":"btWheelInfo_setChassisConnectionPointCS(wheelInfo, chassisConnectionPointCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getChassisConnectionPointCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getChassisConnectionPointCS(wheelInfo, outVector3)\n///\n/// @desc\n/// Get the chassis connection point in chassis space from a btWheelInfo\n/// instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the chassis connection point in\n///     chassis space.\n","externalName":"","help":"btWheelInfo_getChassisConnectionPointCS(wheelInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setWheelDirectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setWheelDirectionCS(wheelInfo, wheelDirectionCS)\n///\n/// @desc\n/// Set the wheel direction in local space for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} wheelDirectionCS\n///     A pointer to a btVector3 representing the wheel direction in local space.\n","externalName":"","help":"btWheelInfo_setWheelDirectionCS(wheelInfo, wheelDirectionCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWheelDirectionCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWheelDirectionCS(wheelInfo, outVector3)\n///\n/// @desc\n/// Get the wheel direction in local space from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the wheel direction in local space.\n","externalName":"","help":"btWheelInfo_getWheelDirectionCS(wheelInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setWheelAxleCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setWheelAxleCS(wheelInfo, wheelAxleCS)\n///\n/// @desc\n/// Set the wheel axle direction in local space for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} wheelAxleCS\n///     A pointer to a btVector3 representing the wheel axle direction in local\n///     space.\n","externalName":"","help":"btWheelInfo_setWheelAxleCS(wheelInfo, wheelAxleCS)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWheelAxleCS","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWheelAxleCS(wheelInfo, outVector3)\n///\n/// @desc\n/// Get the wheel axle direction in local space from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the wheel axle direction in local\n///     space.\n","externalName":"","help":"btWheelInfo_getWheelAxleCS(wheelInfo, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setSuspensionRestLength1","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setSuspensionRestLength1(wheelInfo, suspensionRestLength1)\n///\n/// @desc\n/// Set the suspension rest length for the wheel in a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} suspensionRestLength1\n///     The suspension rest length for the wheel.\n","externalName":"","help":"btWheelInfo_setSuspensionRestLength1(wheelInfo, suspensionRestLength1)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getSuspensionRestLength1","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getSuspensionRestLength1(wheelInfo)\n///\n/// @desc\n/// Get the suspension rest length for the wheel from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The suspension rest length for the wheel.\n","externalName":"","help":"btWheelInfo_getSuspensionRestLength1(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setMaxSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setMaxSuspensionTravelCm(wheelInfo, maxSuspensionTravelCm)\n///\n/// @desc\n/// Set the maximum suspension travel in centimeters for the wheel in a\n/// btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} maxSuspensionTravelCm\n///     The maximum suspension travel in centimeters for the wheel.\n","externalName":"","help":"btWheelInfo_setMaxSuspensionTravelCm(wheelInfo, maxSuspensionTravelCm)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getMaxSuspensionTravelCm","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getMaxSuspensionTravelCm(wheelInfo)\n///\n/// @desc\n/// Get the maximum suspension travel in centimeters for the wheel from a\n/// btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The maximum suspension travel in centimeters for the wheel.\n","externalName":"","help":"btWheelInfo_getMaxSuspensionTravelCm(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getSuspensionRestLength","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getSuspensionRestLength(wheelInfo)\n///\n/// @desc\n/// Get the suspension rest length for the wheel from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The suspension rest length for the wheel.\n","externalName":"","help":"btWheelInfo_getSuspensionRestLength(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setWheelsRadius","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setWheelsRadius(wheelInfo, wheelsRadius)\n///\n/// @desc\n/// Set the radius of the wheel for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} wheelsRadius\n///     The radius of the wheel.\n","externalName":"","help":"btWheelInfo_setWheelsRadius(wheelInfo, wheelsRadius)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWheelsRadius","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWheelsRadius(wheelInfo)\n///\n/// @desc\n/// Get the radius of the wheel from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The radius of the wheel.\n","externalName":"","help":"btWheelInfo_getWheelsRadius(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setSuspensionStiffness(wheelInfo, suspensionStiffness)\n///\n/// @desc\n/// Set the suspension stiffness for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} suspensionStiffness\n///     The suspension stiffness value to set.\n","externalName":"","help":"btWheelInfo_setSuspensionStiffness(wheelInfo, suspensionStiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getSuspensionStiffness","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getSuspensionStiffness(wheelInfo)\n///\n/// @desc\n/// Get the suspension stiffness from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The suspension stiffness value.\n","externalName":"","help":"btWheelInfo_getSuspensionStiffness(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setWheelsDampingCompression","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setWheelsDampingCompression(wheelInfo, wheelsDampingCompression)\n///\n/// @desc\n/// Set the damping compression for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} wheelsDampingCompression\n///     The damping compression value to set.\n","externalName":"","help":"btWheelInfo_setWheelsDampingCompression(wheelInfo, wheelsDampingCompression)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWheelsDampingCompression","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWheelsDampingCompression(wheelInfo)\n///\n/// @desc\n/// Get the damping compression from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The damping compression value.\n","externalName":"","help":"btWheelInfo_getWheelsDampingCompression(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setWheelsDampingRelaxation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setWheelsDampingRelaxation(wheelInfo, wheelsDampingRelaxation)\n///\n/// @desc\n/// Set the wheels damping relaxation for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} wheelsDampingRelaxation\n///     The wheels damping relaxation value to set.\n","externalName":"","help":"btWheelInfo_setWheelsDampingRelaxation(wheelInfo, wheelsDampingRelaxation)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getWheelsDampingRelaxation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getWheelsDampingRelaxation(wheelInfo)\n///\n/// @desc\n/// Get the wheels damping relaxation from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The wheels damping relaxation value.\n","externalName":"","help":"btWheelInfo_getWheelsDampingRelaxation(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setFrictionSlip(wheelInfo, frictionSlip)\n///\n/// @desc\n/// Set the friction slip for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} frictionSlip\n///     The friction slip value to set.\n","externalName":"","help":"btWheelInfo_setFrictionSlip(wheelInfo, frictionSlip)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getFrictionSlip","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getFrictionSlip(wheelInfo)\n///\n/// @desc\n/// Get the friction slip from a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The friction slip value.\n","externalName":"","help":"btWheelInfo_getFrictionSlip(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setSteering","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setSteering(wheelInfo, steering)\n///\n/// @desc\n/// Set the steering value for a btWheelInfo instance, controlling the steering\n/// angle.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} steering\n///     The steering value to set.\n","externalName":"","help":"btWheelInfo_setSteering(wheelInfo, steering)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getSteering","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getSteering(wheelInfo)\n///\n/// @desc\n/// Get the steering value from a btWheelInfo instance, representing the\n/// steering angle.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The steering value (steering angle).\n","externalName":"","help":"btWheelInfo_getSteering(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setRotation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setRotation(wheelInfo, rotation)\n///\n/// @desc\n/// Set the rotation value for a btWheelInfo instance, representing the wheel's\n/// rotation.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} rotation\n///     The rotation value to set.\n","externalName":"","help":"btWheelInfo_setRotation(wheelInfo, rotation)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getRotation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getRotation(wheelInfo)\n///\n/// @desc\n/// Get the rotation value from a btWheelInfo instance, representing the wheel's\n/// rotation.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The rotation value.\n","externalName":"","help":"btWheelInfo_getRotation(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setDeltaRotation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setDeltaRotation(wheelInfo, deltaRotation)\n///\n/// @desc\n/// Set the delta rotation value for a btWheelInfo instance, controlling the\n/// change in rotation per time step.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} deltaRotation\n///     The delta rotation value to set.\n","externalName":"","help":"btWheelInfo_setDeltaRotation(wheelInfo, deltaRotation)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getDeltaRotation","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getDeltaRotation(wheelInfo)\n///\n/// @desc\n/// Get the delta rotation value from a btWheelInfo instance, representing the\n/// change in rotation per time step.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The delta rotation value.\n","externalName":"","help":"btWheelInfo_getDeltaRotation(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setRollInfluence","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setRollInfluence(wheelInfo, rollInfluence)\n///\n/// @desc\n/// Set the roll influence value for a btWheelInfo instance, affecting the\n/// vehicle's roll stability.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} rollInfluence\n///     The roll influence value to set, affecting roll stability.\n","externalName":"","help":"btWheelInfo_setRollInfluence(wheelInfo, rollInfluence)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getRollInfluence","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getRollInfluence(wheelInfo)\n///\n/// @desc\n/// Get the roll influence value from a btWheelInfo instance, affecting the\n/// vehicle's roll stability.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The roll influence value affecting roll stability.\n","externalName":"","help":"btWheelInfo_getRollInfluence(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setMaxSuspensionForce(wheelInfo, maxSuspensionForce)\n///\n/// @desc\n/// Set the maximum suspension force for a btWheelInfo instance, affecting\n/// suspension behavior.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} maxSuspensionForce\n///     The maximum suspension force value to set.\n","externalName":"","help":"btWheelInfo_setMaxSuspensionForce(wheelInfo, maxSuspensionForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getMaxSuspensionForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getMaxSuspensionForce(wheelInfo)\n///\n/// @desc\n/// Get the maximum suspension force from a btWheelInfo instance, affecting\n/// suspension behavior.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The maximum suspension force value.\n","externalName":"","help":"btWheelInfo_getMaxSuspensionForce(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setEngineForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setEngineForce(wheelInfo, engineForce)\n///\n/// @desc\n/// Set the engine force for a btWheelInfo instance, controlling the driving\n/// force applied to the wheel.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} engineForce\n///     The engine force value to set.\n","externalName":"","help":"btWheelInfo_setEngineForce(wheelInfo, engineForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getEngineForce","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getEngineForce(wheelInfo)\n///\n/// @desc\n/// Get the engine force from a btWheelInfo instance, representing the driving\n/// force applied to the wheel.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The engine force value (driving force).\n","externalName":"","help":"btWheelInfo_getEngineForce(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setBrake","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setBrake(wheelInfo, brake)\n///\n/// @desc\n/// Set the brake value for a btWheelInfo instance, controlling the braking\n/// force applied to the wheel.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Real} brake\n///     The brake value to set.\n","externalName":"","help":"btWheelInfo_setBrake(wheelInfo, brake)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getBrake","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getBrake(wheelInfo)\n///\n/// @desc\n/// Get the brake value from a btWheelInfo instance, representing the braking\n/// force applied to the wheel.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Real} The brake value (braking force).\n","externalName":"","help":"btWheelInfo_getBrake(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_setIsFrontWheel","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_setIsFrontWheel(wheelInfo, isFrontWheel)\n///\n/// @desc\n/// Set whether the wheel is a front wheel for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n/// @param {Bool} isFrontWheel\n///     A boolean value indicating whether the wheel is a front wheel (true) or\n///     not (false).\n","externalName":"","help":"btWheelInfo_setIsFrontWheel(wheelInfo, isFrontWheel)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_getIsFrontWheel","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_getIsFrontWheel(wheelInfo)\n///\n/// @desc\n/// Get whether the wheel is a front wheel for a btWheelInfo instance.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance.\n///\n/// @return {Bool} A boolean value indicating whether the wheel is a front wheel\n/// (true) or not (false).\n","externalName":"","help":"btWheelInfo_getIsFrontWheel(wheelInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btWheelInfo_updateWheel","argCount":0,"args":[],"documentation":"/// @func btWheelInfo_updateWheel(wheelInfo, chassis, raycastInfo)\n///\n/// @desc\n/// Update the wheel using the provided chassis and raycast information.\n///\n/// @param {Pointer} wheelInfo\n///     A pointer to the btWheelInfo instance to be updated.\n/// @param {Pointer} chassis\n///     A pointer to the btRigidBody representing the chassis of the vehicle.\n/// @param {Pointer} raycastInfo\n///     A pointer to the btRaycastInfo providing information about the wheel's\n///     raycast.\n","externalName":"","help":"btWheelInfo_updateWheel(wheelInfo, chassis, raycastInfo)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_create1(rigidBodyA, pivotInA, axisInA[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a btHingeConstraint between a single rigid body and a pivot point\n/// and axis in the local space of the rigid body.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the btRigidBody representing the first rigid body.\n/// @param {Pointer} pivotInA\n///     The pointer to the pivot point in the local space of the first rigid\n///     body (btVector3).\n/// @param {Pointer} axisInA\n///     The pointer to the axis in the local space of the first rigid body\n///    (btVector3).\n/// @param {Bool} [useReferenceFrameA]\n///     Indicates whether to use the reference frame of the first rigid body for\n///     the constraint. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created btHingeConstraint.\n","externalName":"","help":"btHingeConstraint_create1(rigidBodyA, pivotInA, axisInA[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a btHingeConstraint between two rigid bodies using specified pivot\n/// points and axes in their local spaces.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first btRigidBody participating in the constraint.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second btRigidBody participating in the constraint.\n/// @param {Pointer} pivotInA\n///     The pointer to the pivot point in the local space of the first rigid\n///     body (btVector3).\n/// @param {Pointer} pivotInB\n///     The pointer to the pivot point in the local space of the second rigid\n///     body (btVector3).\n/// @param {Pointer} axisInA\n///     The pointer to the axis in the local space of the first rigid body\n///     (btVector3).\n/// @param {Pointer} axisInB\n///     The pointer to the axis in the local space of the second rigid body\n///     (btVector3).\n/// @param {Bool} [useReferenceFrameA]\n///     Indicates whether to use the reference frame of the first rigid body for\n///     the constraint. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created btHingeConstraint.\n","externalName":"","help":"btHingeConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_create1Transform","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_create1Transform(rigidBodyA, rigidBodyAFrame[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a btHingeConstraint between a single rigid body and a specified\n/// frame in the local space of the rigid body.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the btRigidBody representing the first rigid body.\n/// @param {Pointer} rigidBodyAFrame\n///     The pointer to the frame in the local space of the first rigid body\n///     (btTransform).\n/// @param {Bool} [useReferenceFrameA]\n///     Indicates whether to use the reference frame of the first rigid body for\n///     the constraint. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created btHingeConstraint.\n","externalName":"","help":"btHingeConstraint_create1Transform(rigidBodyA, rigidBodyAFrame[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_create2Transform","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_create2Transform(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a btHingeConstraint between two rigid bodies using specified frames\n/// in their local spaces.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first btRigidBody participating in the constraint.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second btRigidBody participating in the constraint.\n/// @param {Pointer} rigidBodyAFrame\n///     The pointer to the frame in the local space of the first rigid body\n///    (btTransform).\n/// @param {Pointer} rigidBodyBFrame\n///     The pointer to the frame in the local space of the second rigid body\n///     (btTransform).\n/// @param {Bool} [useReferenceFrameA]\n///     Indicates whether to use the reference frame of the first rigid body for\n///     the constraint. Default is false.\n///\n/// @return {Pointer}\n///     Returns a pointer to the created btHingeConstraint.\n","externalName":"","help":"btHingeConstraint_create2Transform(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_destroy(hingeConstraint)\n///\n/// @desc\n/// Destroys the btHingeConstraint and releases the allocated memory.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint to be destroyed.\n","externalName":"","help":"btHingeConstraint_destroy(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_updateRHS","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_updateRHS(hingeConstraint, timeStep)\n///\n/// @desc\n/// Updates the right-hand side of the hinge constraint based on the given time\n/// step.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} timeStep\n///     The time step for the update.\n","externalName":"","help":"btHingeConstraint_updateRHS(hingeConstraint, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getRigidBodyA","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getRigidBodyA(hingeConstraint)\n///\n/// @desc\n/// Gets the first rigid body connected to the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the first btRigidBody connected to the hinge\n/// constraint.\n","externalName":"","help":"btHingeConstraint_getRigidBodyA(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getRigidBodyB","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getRigidBodyB(hingeConstraint)\n///\n/// @desc\n/// Gets the second rigid body connected to the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the second btRigidBody connected to the hinge\n/// constraint.\n","externalName":"","help":"btHingeConstraint_getRigidBodyB(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getFrameOffsetA","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getFrameOffsetA(hingeConstraint)\n///\n/// @desc\n/// Gets the frame offset of the first rigid body in the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the btTransform representing the frame offset\n/// for the first rigid body.\n","externalName":"","help":"btHingeConstraint_getFrameOffsetA(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getFrameOffsetB","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getFrameOffsetB(hingeConstraint)\n///\n/// @desc\n/// Gets the frame offset of the second rigid body in the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the btTransform representing the frame offset\n/// for the second rigid body.\n","externalName":"","help":"btHingeConstraint_getFrameOffsetB(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setFrames","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setFrames(hingeConstraint, frameA, frameB)\n///\n/// @desc\n/// Sets the transformation frames for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Pointer} frameA\n///     A pointer to the btTransform representing the frame of the first rigid\n///     body.\n/// @param {Pointer} frameB\n///     A pointer to the btTransform representing the frame of the second rigid\n///     body.\n","externalName":"","help":"btHingeConstraint_setFrames(hingeConstraint, frameA, frameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setAngularOnly","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setAngularOnly(hingeConstraint, angularOnly)\n///\n/// @desc\n/// Sets whether the hinge constraint allows only angular motion.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Bool} angularOnly\n///     A boolean indicating whether to allow only angular motion.\n","externalName":"","help":"btHingeConstraint_setAngularOnly(hingeConstraint, angularOnly)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_enableAngularMotor","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_enableAngularMotor(hingeConstraint, enableMotor, targetVelocity, maxMotorImpulse)\n///\n/// @desc\n/// Enables the angular motor for the hinge constraint with specified parameters.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Bool} enableMotor\n///     A boolean indicating whether to enable the motor.\n/// @param {Real} targetVelocity\n///     The target angular velocity for the motor.\n/// @param {Real} maxMotorImpulse\n///     The maximum impulse the motor can apply.\n","externalName":"","help":"btHingeConstraint_enableAngularMotor(hingeConstraint, enableMotor, targetVelocity, maxMotorImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_enableMotor","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_enableMotor(hingeConstraint, enableMotor)\n///\n/// @desc\n/// Enables or disables the motor for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Bool} enableMotor\n///     A boolean indicating whether to enable the motor.\n","externalName":"","help":"btHingeConstraint_enableMotor(hingeConstraint, enableMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setMaxMotorImpulse","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setMaxMotorImpulse(hingeConstraint, maxMotorImpulse)\n///\n/// @desc\n/// Sets the maximum impulse the motor can apply for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} maxMotorImpulse\n///     The maximum impulse the motor can apply.\n","externalName":"","help":"btHingeConstraint_setMaxMotorImpulse(hingeConstraint, maxMotorImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setMotorTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setMotorTargetVelocity(hingeConstraint, motorTargetVelocity)\n///\n/// @desc\n/// Sets the target angular velocity for the motor of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} motorTargetVelocity\n///     The target angular velocity for the motor.\n","externalName":"","help":"btHingeConstraint_setMotorTargetVelocity(hingeConstraint, motorTargetVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setMotorTargetQuaternion","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setMotorTargetQuaternion(hingeConstraint, qAinB, dt)\n///\n/// @desc\n/// Sets the target rotation for the motor using a quaternion for the hinge\n/// constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Pointer} qAinB\n///     A pointer to the btQuaternion representing the target rotation.\n/// @param {Real} dt\n///     The time step for the motor.\n","externalName":"","help":"btHingeConstraint_setMotorTargetQuaternion(hingeConstraint, qAinB, dt)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setMotorTargetAngle","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setMotorTargetAngle(hingeConstraint, targetAngle, dt)\n///\n/// @desc\n/// Sets the target angle for the motor for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} targetAngle\n///     The target angle for the motor.\n/// @param {Real} dt\n///     The time step for the motor.\n","externalName":"","help":"btHingeConstraint_setMotorTargetAngle(hingeConstraint, targetAngle, dt)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setLimit(hingeConstraint, low, high[, softness[, biasFactor[, relaxationFactor]]])\n///\n/// @desc\n/// Sets the limits for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} low\n///     The lower limit for the hinge angle.\n/// @param {Real} high\n///     The upper limit for the hinge angle.\n/// @param {Real} [softness]\n///     The softness for the limits. Default is 0.9.\n/// @param {Real} [biasFactor]\n///     The bias factor for the limits. Default is 0.3.\n/// @param {Real} [relaxationFactor]\n///     The relaxation factor for the limits. Default is 1.0.\n","externalName":"","help":"btHingeConstraint_setLimit(hingeConstraint, low, high[, softness[, biasFactor[, relaxationFactor]]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getLimitSoftness(hingeConstraint)\n///\n/// @desc\n/// Gets the softness parameter for the hinge constraint's limits.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The softness parameter for the limits.\n","externalName":"","help":"btHingeConstraint_getLimitSoftness(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getLimitBiasFactor","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getLimitBiasFactor(hingeConstraint)\n///\n/// @desc\n/// Gets the bias factor parameter for the hinge constraint's limits.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The bias factor parameter for the limits.\n","externalName":"","help":"btHingeConstraint_getLimitBiasFactor(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getLimitRelaxationFactor","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getLimitRelaxationFactor(hingeConstraint)\n///\n/// @desc\n/// Gets the relaxation factor parameter for the hinge constraint's limits.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The relaxation factor parameter for the limits.\n","externalName":"","help":"btHingeConstraint_getLimitRelaxationFactor(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setAxis","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setAxis(hingeConstraint, axisInA)\n///\n/// @desc\n/// Sets the axis for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Pointer} axisInA\n///     The axis in local space of the first rigid body, represented as a\n///     btVector3.\n","externalName":"","help":"btHingeConstraint_setAxis(hingeConstraint, axisInA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setAxisXYZ","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setAxisXYZ(hingeConstraint, axisInAX, axisInAY, axisInAZ)\n///\n/// @desc\n/// Sets the axis for the hinge constraint using individual components.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Real} axisInAX\n///     The x-component of the axis in local space of the first rigid body.\n/// @param {Real} axisInAY\n///     The y-component of the axis in local space of the first rigid body.\n/// @param {Real} axisInAZ\n///     The z-component of the axis in local space of the first rigid body.\n","externalName":"","help":"btHingeConstraint_setAxisXYZ(hingeConstraint, axisInAX, axisInAY, axisInAZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_hasLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_hasLimit(hingeConstraint)\n///\n/// @desc\n/// Checks if the hinge constraint has a defined limit.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Bool} Returns true if the hinge constraint has a limit, false\n/// otherwise.\n","externalName":"","help":"btHingeConstraint_hasLimit(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getLowerLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getLowerLimit(hingeConstraint)\n///\n/// @desc\n/// Gets the lower limit of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The lower limit of the hinge constraint in radians.\n","externalName":"","help":"btHingeConstraint_getLowerLimit(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getUpperLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getUpperLimit(hingeConstraint)\n///\n/// @desc\n/// Gets the upper limit of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The upper limit of the hinge constraint in radians.\n","externalName":"","help":"btHingeConstraint_getUpperLimit(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getHingeAngle","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getHingeAngle(hingeConstraint)\n///\n/// @desc\n/// Gets the hinge angle of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} The hinge angle in radians.\n","externalName":"","help":"btHingeConstraint_getHingeAngle(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getHingeAngleTransform","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getHingeAngleTransform(hingeConstraint, transA, transB)\n///\n/// @desc\n/// Gets the hinge angle of the hinge constraint using specified transforms.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Pointer} transA\n///     The transform for the first body.\n/// @param {Pointer} transB\n///     The transform for the second body.\n///\n/// @return {Real} The hinge angle in radians.\n","externalName":"","help":"btHingeConstraint_getHingeAngleTransform(hingeConstraint, transA, transB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_testLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_testLimit(hingeConstraint, transA, transB)\n///\n/// @desc\n/// Tests the hinge angle against the limits of the hinge constraint using\n/// specified transforms.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Pointer} transA\n///     The transform for the first body.\n/// @param {Pointer} transB\n///     The transform for the second body.\n","externalName":"","help":"btHingeConstraint_testLimit(hingeConstraint, transA, transB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getAFrame","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getAFrame(hingeConstraint)\n///\n/// @desc\n/// Gets the A frame of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the btTransform representing the A frame.\n","externalName":"","help":"btHingeConstraint_getAFrame(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getBFrame","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getBFrame(hingeConstraint)\n///\n/// @desc\n/// Gets the B frame of the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Pointer} A pointer to the btTransform representing the B frame.\n","externalName":"","help":"btHingeConstraint_getBFrame(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getSolveLimit","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getSolveLimit(hingeConstraint)\n///\n/// @desc\n/// Gets the flag indicating whether the limits are solved.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} Returns 1 if the limits are solved, 0 otherwise.\n","externalName":"","help":"btHingeConstraint_getSolveLimit(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getLimitSign","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getLimitSign(hingeConstraint)\n///\n/// @desc\n/// Gets the sign of the hinge constraint's applied limits.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} Returns the sign of the applied limits. 1 for positive, -1\n/// for negative.\n","externalName":"","help":"btHingeConstraint_getLimitSign(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getAngularOnly","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getAngularOnly(hingeConstraint)\n///\n/// @desc\n/// Gets a boolean indicating if the hinge constraint is angular only.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Bool} Returns true if the constraint is angular only, false\n/// otherwise.\n","externalName":"","help":"btHingeConstraint_getAngularOnly(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getEnableAngularMotor","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getEnableAngularMotor(hingeConstraint)\n///\n/// @desc\n/// Gets a boolean indicating if the angular motor is enabled for the hinge\n/// constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Bool} Returns true if the angular motor is enabled, false otherwise.\n","externalName":"","help":"btHingeConstraint_getEnableAngularMotor(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getMotorTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getMotorTargetVelocity(hingeConstraint)\n///\n/// @desc\n/// Gets the target velocity of the angular motor for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} Returns the target velocity for the angular motor.\n","externalName":"","help":"btHingeConstraint_getMotorTargetVelocity(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getMaxMotorImpulse","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getMaxMotorImpulse(hingeConstraint)\n///\n/// @desc\n/// Gets the maximum motor impulse for the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} Returns the maximum motor impulse for the hinge constraint.\n","externalName":"","help":"btHingeConstraint_getMaxMotorImpulse(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getUseFrameOffset(hingeConstraint)\n///\n/// @desc\n/// Gets whether the hinge constraint uses frame offset.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Bool} Returns true if the hinge constraint uses frame offset, false\n/// otherwise.\n","externalName":"","help":"btHingeConstraint_getUseFrameOffset(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setUseFrameOffset(hingeConstraint, frameOffsetOnOff)\n///\n/// @desc\n/// Sets whether the hinge constraint uses frame offset.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Bool} frameOffsetOnOff\n///     True to enable frame offset, false to disable.\n","externalName":"","help":"btHingeConstraint_setUseFrameOffset(hingeConstraint, frameOffsetOnOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getUseReferenceFrameA","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getUseReferenceFrameA(hingeConstraint)\n///\n/// @desc\n/// Gets whether the hinge constraint uses reference frame A.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Bool} Returns true if the hinge constraint uses reference frame A,\n/// false otherwise.\n","externalName":"","help":"btHingeConstraint_getUseReferenceFrameA(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_setUseReferenceFrameA","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_setUseReferenceFrameA(hingeConstraint, useReferenceFrameA)\n///\n/// @desc\n/// Sets whether the hinge constraint uses reference frame A.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n/// @param {Bool} useReferenceFrameA\n///     True to enable reference frame A, false to disable.\n","externalName":"","help":"btHingeConstraint_setUseReferenceFrameA(hingeConstraint, useReferenceFrameA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeConstraint_getFlags","argCount":0,"args":[],"documentation":"/// @func btHingeConstraint_getFlags(hingeConstraint)\n///\n/// @desc\n/// Gets the flags associated with the hinge constraint.\n///\n/// @param {Pointer} hingeConstraint\n///     The pointer to the btHingeConstraint.\n///\n/// @return {Real} Returns the flags associated with the hinge constraint.\n","externalName":"","help":"btHingeConstraint_getFlags(hingeConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_create1(rigidBodyA, pivotInA, axisInA[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a hinge constraint with accumulated angle and links it to a single\n/// rigid body.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} pivotInA\n///     The pivot point in local space of the first rigid body.\n/// @param {Pointer} axisInA\n///     The axis in local space of the first rigid body around which the hinge\n///     rotates.\n/// @param {Bool} [useReferenceFrameA]\n///     A boolean indicating whether to use the reference frame of the first\n///     body. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created hinge constraint with\n/// accumulated angle.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_create1(rigidBodyA, pivotInA, axisInA[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a hinge constraint with accumulated angle and links it to two rigid\n/// bodies.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second rigid body.\n/// @param {Pointer} pivotInA\n///     The pivot point in local space of the first rigid body.\n/// @param {Pointer} pivotInB\n///     The pivot point in local space of the second rigid body.\n/// @param {Pointer} axisInA\n///     The axis in local space of the first rigid body around which the hinge\n///     rotates.\n/// @param {Pointer} axisInB\n///     The axis in local space of the second rigid body around which the hinge\n///     rotates.\n/// @param {Bool} [useReferenceFrameA]\n///     A boolean indicating whether to use the reference frame of the first\n///     body. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created hinge constraint with\n/// accumulated angle.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_create1Transform","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_create1Transform(rigidBodyA, rigidBodyAFrame[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a hinge constraint with accumulated angle and links it to a single\n/// rigid body using transforms.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} rigidBodyAFrame\n///     The transform representing the frame of the first rigid body.\n/// @param {Bool} [useReferenceFrameA]\n///     A boolean indicating whether to use the reference frame of the first\n///     body. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created hinge constraint with\n/// accumulated angle.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_create1Transform(rigidBodyA, rigidBodyAFrame[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_create2Transform","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_create2Transform(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame[, useReferenceFrameA])\n///\n/// @desc\n/// Creates a hinge constraint with accumulated angle and links it to two rigid\n/// bodies using transforms.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second rigid body.\n/// @param {Pointer} rigidBodyAFrame\n///     The transform representing the frame of the first rigid body.\n/// @param {Pointer} rigidBodyBFrame\n///     The transform representing the frame of the second rigid body.\n/// @param {Bool} [useReferenceFrameA]\n///     A boolean indicating whether to use the reference frame of the first\n///     body. Default is false.\n///\n/// @return {Pointer} Returns a pointer to the created hinge constraint with\n/// accumulated angle.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_create2Transform(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame[, useReferenceFrameA])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_destroy(hingeAccumulatedAngleConstraint)\n///\n/// @desc\n/// Destroys a previously created hinge constraint with accumulated angle.\n///\n/// @param {Pointer} hingeAccumulatedAngleConstraint\n///     The pointer to the hinge constraint to be destroyed.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_destroy(hingeAccumulatedAngleConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle(hingeAccumulatedAngleConstraint)\n///\n/// @desc\n/// Gets the accumulated hinge angle of the hinge constraint.\n///\n/// @param {Pointer} hingeAccumulatedAngleConstraint\n///     The pointer to the hinge constraint.\n///\n/// @return {Real} Returns the accumulated hinge angle in radians.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle(hingeAccumulatedAngleConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle","argCount":0,"args":[],"documentation":"/// @func btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle(hingeAccumulatedAngleConstraint, accAngle)\n///\n/// @desc\n/// Sets the accumulated hinge angle of the hinge constraint.\n///\n/// @param {Pointer} hingeAccumulatedAngleConstraint\n///     The pointer to the hinge constraint.\n/// @param {Real} accAngle\n///     The accumulated hinge angle to be set in radians.\n","externalName":"","help":"btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle(hingeAccumulatedAngleConstraint, accAngle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_create","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_create()\n///\n/// @desc\n/// Create a new btJointFeedback instance.\n///\n/// @return {Pointer} A pointer to the newly created btJointFeedback instance.\n","externalName":"","help":"btJointFeedback_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_destroy","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_destroy(jointFeedback)\n///\n/// @desc\n/// Destroy a btJointFeedback instance, releasing associated resources.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance to be destroyed.\n","externalName":"","help":"btJointFeedback_destroy(jointFeedback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_setAppliedForceBodyA","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_setAppliedForceBodyA(jointFeedback, appliedForceBodyA)\n///\n/// @desc\n/// Set the applied force on body A for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Real} appliedForceBodyA\n///     The applied force on body A as a btVector3.\n","externalName":"","help":"btJointFeedback_setAppliedForceBodyA(jointFeedback, appliedForceBodyA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_getAppliedForceBodyA","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_getAppliedForceBodyA(jointFeedback, outVector3)\n///\n/// @desc\n/// Get the applied force on body A for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the applied force on body A.\n","externalName":"","help":"btJointFeedback_getAppliedForceBodyA(jointFeedback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_setAppliedTorqueBodyA","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_setAppliedTorqueBodyA(jointFeedback, appliedTorqueBodyA)\n///\n/// @desc\n/// Set the applied torque on body A for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Real} appliedTorqueBodyA\n///     The applied torque on body A as a btVector3.\n","externalName":"","help":"btJointFeedback_setAppliedTorqueBodyA(jointFeedback, appliedTorqueBodyA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_getAppliedTorqueBodyA","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_getAppliedTorqueBodyA(jointFeedback, outVector3)\n///\n/// @desc\n/// Get the applied torque on body A for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the applied torque on body A.\n","externalName":"","help":"btJointFeedback_getAppliedTorqueBodyA(jointFeedback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_setAppliedForceBodyB","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_setAppliedForceBodyB(jointFeedback, appliedForceBodyB)\n///\n/// @desc\n/// Set the applied force on body B for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Real} appliedForceBodyB\n///     The applied force on body B as a btVector3.\n","externalName":"","help":"btJointFeedback_setAppliedForceBodyB(jointFeedback, appliedForceBodyB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_getAppliedForceBodyB","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_getAppliedForceBodyB(jointFeedback, outVector3)\n///\n/// @desc\n/// Get the applied force on body B for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the applied force on body B.\n","externalName":"","help":"btJointFeedback_getAppliedForceBodyB(jointFeedback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_setAppliedTorqueBodyB","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_setAppliedTorqueBodyB(jointFeedback, appliedTorqueBodyB)\n///\n/// @desc\n/// Set the applied torque on body B for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Real} appliedTorqueBodyB\n///     The applied torque on body B as a btVector3.\n","externalName":"","help":"btJointFeedback_setAppliedTorqueBodyB(jointFeedback, appliedTorqueBodyB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btJointFeedback_getAppliedTorqueBodyB","argCount":0,"args":[],"documentation":"/// @func btJointFeedback_getAppliedTorqueBodyB(jointFeedback, outVector3)\n///\n/// @desc\n/// Get the applied torque on body B for a joint feedback.\n///\n/// @param {Pointer} jointFeedback\n///     A pointer to the btJointFeedback instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the applied torque on body B.\n","externalName":"","help":"btJointFeedback_getAppliedTorqueBodyB(jointFeedback, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_destroy(typedConstraint)\n///\n/// @desc\n/// Destroy the btTypedConstraint instance.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint object.\n","externalName":"","help":"btTypedConstraint_destroy(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getOverrideNumSolverIterations","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getOverrideNumSolverIterations(typedConstraint)\n///\n/// @desc\n/// Get the override number of solver iterations for a typed constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The override number of solver iterations as an integer.\n","externalName":"","help":"btTypedConstraint_getOverrideNumSolverIterations(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setOverrideNumSolverIterations","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setOverrideNumSolverIterations(typedConstraint, overrideNumIterations)\n///\n/// @desc\n/// Set the override number of solver iterations for a typed constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} overrideNumIterations\n///     The override number of solver iterations to set as an integer.\n","externalName":"","help":"btTypedConstraint_setOverrideNumSolverIterations(typedConstraint, overrideNumIterations)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getBreakingImpulseThreshold","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getBreakingImpulseThreshold(typedConstraint)\n///\n/// @desc\n/// Get the breaking impulse threshold for a typed constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The breaking impulse threshold.\n","externalName":"","help":"btTypedConstraint_getBreakingImpulseThreshold(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setBreakingImpulseThreshold","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setBreakingImpulseThreshold(typedConstraint, threshold)\n///\n/// @desc\n/// Set the breaking impulse threshold for a typed constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} threshold\n///     The breaking impulse threshold to set.\n","externalName":"","help":"btTypedConstraint_setBreakingImpulseThreshold(typedConstraint, threshold)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_isEnabled","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_isEnabled(typedConstraint)\n///\n/// @desc\n/// Check if the typed constraint is currently enabled.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Bool} Returns true if the constraint is enabled, false otherwise.\n","externalName":"","help":"btTypedConstraint_isEnabled(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setEnabled","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setEnabled(typedConstraint, enabled)\n///\n/// @desc\n/// Set the enabled status of the typed constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Bool} enabled\n///     Use true to enable or false to disable.\n","externalName":"","help":"btTypedConstraint_setEnabled(typedConstraint, enabled)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getRigidBodyA","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getRigidBodyA(typedConstraint)\n///\n/// @desc\n/// Get a pointer to the rigid body associated with the first end of the constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Pointer} A pointer to the btRigidBody associated with the first end\n/// of the constraint.\n","externalName":"","help":"btTypedConstraint_getRigidBodyA(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getRigidBodyB","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getRigidBodyB(typedConstraint)\n///\n/// @desc\n/// Get a pointer to the rigid body associated with the second end of the constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Pointer} A pointer to the btRigidBody associated with the second\n/// end of the constraint.\n","externalName":"","help":"btTypedConstraint_getRigidBodyB(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getUserConstraintType","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getUserConstraintType(typedConstraint)\n///\n/// @desc\n/// Get the user-defined constraint type associated with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The user-defined constraint type associated with this\n/// constraint.\n","externalName":"","help":"btTypedConstraint_getUserConstraintType(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setUserConstraintType","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setUserConstraintType(typedConstraint, userConstraintType)\n///\n/// @desc\n/// Set a user-defined constraint type to associate with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} userConstraintType\n///     The user-defined constraint type to set for this constraint.\n","externalName":"","help":"btTypedConstraint_setUserConstraintType(typedConstraint, userConstraintType)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setUserConstraintId","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setUserConstraintId(typedConstraint, uid)\n///\n/// @desc\n/// Set a user-defined constraint ID to associate with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} uid\n///     The user-defined constraint ID to set for this constraint.\n","externalName":"","help":"btTypedConstraint_setUserConstraintId(typedConstraint, uid)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getUserConstraintId","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getUserConstraintId(typedConstraint)\n///\n/// @desc\n/// Get the user-defined constraint ID associated with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The user-defined constraint ID associated with this\n/// constraint.\n","externalName":"","help":"btTypedConstraint_getUserConstraintId(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setUserConstraintPtr","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setUserConstraintPtr(typedConstraint, ptr)\n///\n/// @desc\n/// Set a user-defined pointer to associate with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Pointer} ptr\n///     The user-defined pointer to set for this constraint.\n","externalName":"","help":"btTypedConstraint_setUserConstraintPtr(typedConstraint, ptr)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getUserConstraintPtr","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getUserConstraintPtr(typedConstraint)\n///\n/// @desc\n/// Get the user-defined pointer associated with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Pointer} The user-defined pointer associated with this constraint.\n","externalName":"","help":"btTypedConstraint_getUserConstraintPtr(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setJointFeedback","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setJointFeedback(typedConstraint, jointFeedback)\n///\n/// @desc\n/// Set a btJointFeedback instance to provide feedback for this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Pointer} jointFeedback\n///     A pointer to a btJointFeedback instance to set for providing feedback.\n","externalName":"","help":"btTypedConstraint_setJointFeedback(typedConstraint, jointFeedback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getJointFeedback","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getJointFeedback(typedConstraint)\n///\n/// @desc\n/// Get the btJointFeedback instance associated with this constraint for\n/// providing feedback.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Pointer} A pointer to the associated btJointFeedback instance\n/// providing feedback for this constraint.\n","externalName":"","help":"btTypedConstraint_getJointFeedback(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getUid","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getUid(typedConstraint)\n///\n/// @desc\n/// Get the unique identifier (uid) associated with this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The unique identifier (uid) associated with this constraint.\n","externalName":"","help":"btTypedConstraint_getUid(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_needsFeedback","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_needsFeedback(typedConstraint)\n///\n/// @desc\n/// Check if this constraint needs feedback for simulation.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Bool} True if this constraint needs feedback for simulation, false\n/// otherwise.\n","externalName":"","help":"btTypedConstraint_needsFeedback(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_enableFeedback","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_enableFeedback(typedConstraint, needsFeedback)\n///\n/// @desc\n/// Enable or disable feedback for this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Bool} needsFeedback\n///     True to enable feedback, false to disable feedback for this constraint.\n","externalName":"","help":"btTypedConstraint_enableFeedback(typedConstraint, needsFeedback)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getAppliedImpulse","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getAppliedImpulse(typedConstraint)\n///\n/// @desc\n/// Get the applied impulse of this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The applied impulse of this constraint.\n","externalName":"","help":"btTypedConstraint_getAppliedImpulse(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getConstraintType","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getConstraintType(typedConstraint)\n///\n/// @desc\n/// Get the type of this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n///\n/// @return {Real} The type of this constraint as an integer value.\n///\n/// @see btTypedConstraintType\n","externalName":"","help":"btTypedConstraint_getConstraintType(typedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_setParam","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_setParam(typedConstraint, num, value[, axis])\n///\n/// @desc\n/// Set a numerical parameter for this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} num\n///     The numerical parameter identifier.\n/// @param {Real} value\n///     The value to set for the specified numerical parameter.\n/// @param {Real} [axis]\n///      The axis identifier for multi-axis constraints. Default is -1.\n///\n/// @see btConstraintParams\n","externalName":"","help":"btTypedConstraint_setParam(typedConstraint, num, value[, axis])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTypedConstraint_getParam","argCount":0,"args":[],"documentation":"/// @func btTypedConstraint_getParam(typedConstraint, num[, axis])\n///\n/// @desc\n/// Get a numerical parameter of this constraint.\n///\n/// @param {Pointer} typedConstraint\n///     A pointer to the btTypedConstraint instance.\n/// @param {Real} num\n///     The numerical parameter identifier.\n/// @param {Real} [axis]\n///     The axis identifier for multi-axis constraints. Default is -1.\n///\n/// @return {Real} The value of the specified numerical parameter.\n///\n/// @see btConstraintParams\n","externalName":"","help":"btTypedConstraint_getParam(typedConstraint, num[, axis])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAdjustAngleToLimits","argCount":0,"args":[],"documentation":"/// @func btAdjustAngleToLimits(angleInRadians, angleLowerLimitInRadian, angleUpperLimitInRadians)\n///\n/// @desc\n/// Adjust an angle to be within specified lower and upper limits.\n///\n/// @param {Real} angleInRadians\n///     The input angle in radians.\n/// @param {Real} angleLowerLimitInRadian\n///     The lower limit for the angle in radians.\n/// @param {Real} angleUpperLimitInRadians\n///     The upper limit for the angle in radians.\n///\n/// @return {Real} The adjusted angle within the specified limits.\n","externalName":"","help":"btAdjustAngleToLimits(angleInRadians, angleLowerLimitInRadian, angleUpperLimitInRadians)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_create","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_create()\n///\n/// @desc\n/// Creates a new instance of btAngularLimit.\n///\n/// @return {Pointer} A pointer to the created btAngularLimit instance.\n","externalName":"","help":"btAngularLimit_create()","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_destroy","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_destroy(angularLimit)\n///\n/// @desc\n/// Destroys an instance of btAngularLimit, releasing associated resources.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance to be destroyed.\n","externalName":"","help":"btAngularLimit_destroy(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_set","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_set(angularLimit, low, high[, softness[, biasFactor[, relaxationFactor]]])\n///\n/// @desc\n/// Sets the angular limits for the btAngularLimit instance.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n/// @param {Real} low\n///     The lower limit in radians.\n/// @param {Real} high\n///     The upper limit in radians.\n/// @param {Real} [softness]\n///     The softness factor. Default is 0.9.\n/// @param {Real} [biasFactor]\n///     The bias factor. Default is 0.3.\n/// @param {Real} [relaxationFactor]\n///     The relaxation factor. Default is 1.0.\n","externalName":"","help":"btAngularLimit_set(angularLimit, low, high[, softness[, biasFactor[, relaxationFactor]]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_test","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_test(angularLimit, angle)\n///\n/// @desc\n/// Tests if the given angle is within the specified angular limits.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n/// @param {Real} angle\n///     The angle in radians to be tested.\n","externalName":"","help":"btAngularLimit_test(angularLimit, angle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getSoftness","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getSoftness(angularLimit)\n///\n/// @desc\n/// Gets the softness factor of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The softness factor of the angular limit.\n","externalName":"","help":"btAngularLimit_getSoftness(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getBiasFactor","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getBiasFactor(angularLimit)\n///\n/// @desc\n/// Gets the bias factor of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The bias factor of the angular limit.\n","externalName":"","help":"btAngularLimit_getBiasFactor(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getRelaxationFactor","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getRelaxationFactor(angularLimit)\n///\n/// @desc\n/// Gets the relaxation factor of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The relaxation factor of the angular limit.\n","externalName":"","help":"btAngularLimit_getRelaxationFactor(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getCorrection","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getCorrection(angularLimit)\n///\n/// @desc\n/// Gets the correction value of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The correction value of the angular limit.\n","externalName":"","help":"btAngularLimit_getCorrection(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getSign","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getSign(angularLimit)\n///\n/// @desc\n/// Gets the sign of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The sign of the angular limit.\n","externalName":"","help":"btAngularLimit_getSign(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getHalfRange","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getHalfRange(angularLimit)\n///\n/// @desc\n/// Gets the half range of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The half range of the angular limit.\n","externalName":"","help":"btAngularLimit_getHalfRange(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_isLimit","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_isLimit(angularLimit)\n///\n/// @desc\n/// Checks if the angular limit is active.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Bool} Returns true if the angular limit is active, otherwise false.\n","externalName":"","help":"btAngularLimit_isLimit(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_fit","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_fit(angularLimit, angle)\n///\n/// @desc\n/// Fits the given angle within the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n/// @param {Real} angle\n///     The angle to fit within the limit.\n///\n/// @return {Real} Returns the fitted angle within the limit.\n","externalName":"","help":"btAngularLimit_fit(angularLimit, angle)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getError","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getError(angularLimit)\n///\n/// @desc\n/// Gets the error of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The error of the angular limit.\n","externalName":"","help":"btAngularLimit_getError(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getLow","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getLow(angularLimit)\n///\n/// @desc\n/// Gets the lower limit of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The lower limit of the angular limit.\n","externalName":"","help":"btAngularLimit_getLow(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btAngularLimit_getHigh","argCount":0,"args":[],"documentation":"/// @func btAngularLimit_getHigh(angularLimit)\n///\n/// @desc\n/// Gets the upper limit of the angular limit.\n///\n/// @param {Pointer} angularLimit\n///     The pointer to the btAngularLimit instance.\n///\n/// @return {Real} The upper limit of the angular limit.\n","externalName":"","help":"btAngularLimit_getHigh(angularLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_setTau","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_setTau(constraintSetting, tau)\n///\n/// @desc\n/// Sets the tau value in the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n/// @param {Real} tau\n///     The tau value to set.\n","externalName":"","help":"btConstraintSetting_setTau(constraintSetting, tau)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_getTau","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_getTau(constraintSetting)\n///\n/// @desc\n/// Gets the tau value from the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n///\n/// @return {Real} The tau value from the constraint setting.\n","externalName":"","help":"btConstraintSetting_getTau(constraintSetting)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_setDamping","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_setDamping(constraintSetting, damping)\n///\n/// @desc\n/// Sets the damping value in the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n/// @param {Real} damping\n///     The damping value to set.\n","externalName":"","help":"btConstraintSetting_setDamping(constraintSetting, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_getDamping","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_getDamping(constraintSetting)\n///\n/// @desc\n/// Gets the damping value from the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n///\n/// @return {Real} The damping value from the constraint setting.\n","externalName":"","help":"btConstraintSetting_getDamping(constraintSetting)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_setImpulseClamp","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_setImpulseClamp(constraintSetting, impulseClamp)\n///\n/// @desc\n/// Sets the impulse clamp value in the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n/// @param {Real} impulseClamp\n///     The impulse clamp value to set.\n","externalName":"","help":"btConstraintSetting_setImpulseClamp(constraintSetting, impulseClamp)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConstraintSetting_getImpulseClamp","argCount":0,"args":[],"documentation":"/// @func btConstraintSetting_getImpulseClamp(constraintSetting)\n///\n/// @desc\n/// Gets the impulse clamp value from the constraint setting.\n///\n/// @param {Pointer} constraintSetting\n///     The pointer to the btConstraintSetting instance.\n///\n/// @return {Real} The impulse clamp value from the constraint setting.\n","externalName":"","help":"btConstraintSetting_getImpulseClamp(constraintSetting)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_create1(rigidBodyA, pivotInA)\n///\n/// @desc\n/// Creates a btPoint2PointConstraint between a rigid body and a pivot point in\n/// the local coordinate system of the rigid body.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the btRigidBody that the constraint is attached to.\n/// @param {Pointer} pivotInA\n///     The pointer to a btVector3 specifying the pivot point in the local\n///     coordinate system of rigidBodyA.\n///\n/// @return {Pointer} A pointer to the created btPoint2PointConstraint.\n","externalName":"","help":"btPoint2PointConstraint_create1(rigidBodyA, pivotInA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_create1XYZ","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_create1XYZ(rigidBodyA, pivotInAX, pivotInAY, pivotInAZ)\n///\n/// @desc\n/// Creates a btPoint2PointConstraint between a rigid body and a pivot point\n/// specified by coordinates in the local coordinate system of the rigid body.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the btRigidBody that the constraint is attached to.\n/// @param {Real} pivotInAX\n///     The x-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n/// @param {Real} pivotInAY\n///     The y-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n/// @param {Real} pivotInAZ\n///     The z-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n///\n/// @return {Pointer} A pointer to the created btPoint2PointConstraint.\n","externalName":"","help":"btPoint2PointConstraint_create1XYZ(rigidBodyA, pivotInAX, pivotInAY, pivotInAZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB)\n///\n/// @desc\n/// Creates a btPoint2PointConstraint between two rigid bodies, each with their\n/// respective pivot points in their local coordinate systems.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first btRigidBody that the constraint is attached to.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second btRigidBody that the constraint is attached to.\n/// @param {Pointer} pivotInA\n///     The pointer to a btVector3 specifying the pivot point in the local\n///     coordinate system of rigidBodyA.\n/// @param {Pointer} pivotInB\n///     The pointer to a btVector3 specifying the pivot point in the local\n///     coordinate system of rigidBodyB.\n///\n/// @return {Pointer} A pointer to the created btPoint2PointConstraint.\n","externalName":"","help":"btPoint2PointConstraint_create2(rigidBodyA, rigidBodyB, pivotInA, pivotInB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_create2XYZ","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_create2XYZ(rigidBodyA, rigidBodyB, pivotInAX, pivotInAY, pivotInAZ, pivotInBX, pivotInBY, pivotInBZ)\n///\n/// @desc\n/// Creates a btPoint2PointConstraint between two rigid bodies, each with their\n/// respective pivot points specified by coordinates in their local coordinate\n/// systems.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first btRigidBody that the constraint is attached to.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second btRigidBody that the constraint is attached to.\n/// @param {Real} pivotInAX\n///     The x-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n/// @param {Real} pivotInAY\n///     The y-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n/// @param {Real} pivotInAZ\n///     The z-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyA.\n/// @param {Real} pivotInBX\n///     The x-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyB.\n/// @param {Real} pivotInBY\n///     The y-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyB.\n/// @param {Real} pivotInBZ\n///     The z-coordinate of the pivot point in the local coordinate system of\n///     rigidBodyB.\n///\n/// @return {Pointer} A pointer to the created btPoint2PointConstraint.\n","externalName":"","help":"btPoint2PointConstraint_create2XYZ(rigidBodyA, rigidBodyB, pivotInAX, pivotInAY, pivotInAZ, pivotInBX, pivotInBY, pivotInBZ)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_destroy(point2PointConstraint)\n///\n/// @desc\n/// Destroys the btPoint2PointConstraint object, freeing its allocated memory.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint object to be destroyed.\n","externalName":"","help":"btPoint2PointConstraint_destroy(point2PointConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_getSetting","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_getSetting(point2PointConstraint)\n///\n/// @desc\n/// Gets the pointer to the btConstraintSetting object associated with the\n/// btPoint2PointConstraint.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n///\n/// @return {Pointer} A pointer to the btConstraintSetting associated with the\n/// btPoint2PointConstraint.\n","externalName":"","help":"btPoint2PointConstraint_getSetting(point2PointConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_updateRHS","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_updateRHS(point2PointConstraint, timeStep)\n///\n/// @desc\n/// Updates the right-hand side (RHS) of the point-to-point constraint based on\n/// the given time step.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n/// @param {Real} timeStep\n///     The time step used for the update.\n","externalName":"","help":"btPoint2PointConstraint_updateRHS(point2PointConstraint, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_setPivotA","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_setPivotA(point2PointConstraint, pivotA)\n///\n/// @desc\n/// Sets the pivot point in local space for the first rigid body of the\n/// point-to-point constraint.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n/// @param {Pointer} pivotA\n///     The pointer to a btVector3 representing the pivot point in local space\n///     of the first rigid body.\n","externalName":"","help":"btPoint2PointConstraint_setPivotA(point2PointConstraint, pivotA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_setPivotB","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_setPivotB(point2PointConstraint, pivotB)\n///\n/// @desc\n/// Sets the pivot point in local space for the second rigid body of the\n/// point-to-point constraint.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n/// @param {Pointer} pivotB\n///     The pointer to a btVector3 representing the pivot point in local space\n///     of the second rigid body.\n","externalName":"","help":"btPoint2PointConstraint_setPivotB(point2PointConstraint, pivotB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_getPivotInA","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_getPivotInA(point2PointConstraint, outVector3)\n///\n/// @desc\n/// Gets the pivot point in local space for the first rigid body of the\n/// point-to-point constraint and stores it in the provided btVector3.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n/// @param {Pointer} outVector3\n///     The pointer to a btVector3 to store the pivot point in local space of\n///     the first rigid body.\n","externalName":"","help":"btPoint2PointConstraint_getPivotInA(point2PointConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_getPivotInB","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_getPivotInB(point2PointConstraint, outVector3)\n///\n/// @desc\n/// Gets the pivot point in local space for the second rigid body of the\n/// point-to-point constraint and stores it in the provided btVector3.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n/// @param {Pointer} outVector3\n///     The pointer to a btVector3 to store the pivot point in local space of\n///     the second rigid body.\n","externalName":"","help":"btPoint2PointConstraint_getPivotInB(point2PointConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btPoint2PointConstraint_getFlags","argCount":0,"args":[],"documentation":"/// @func btPoint2PointConstraint_getFlags(point2PointConstraint)\n///\n/// @desc\n/// Gets the flags of the point-to-point constraint.\n///\n/// @param {Pointer} point2PointConstraint\n///     The pointer to the btPoint2PointConstraint.\n///\n/// @return {Real} Returns an integer representing the flags of the\n/// point-to-point constraint.\n","externalName":"","help":"btPoint2PointConstraint_getFlags(point2PointConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_create1(rigidBodyA, rigidBodyAFrame)\n///\n/// @desc\n/// Creates a cone twist constraint between a single rigid body and a specified\n/// frame of reference.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} rigidBodyAFrame\n///     The pointer to the frame of reference for the first rigid body.\n///\n/// @return {Pointer} Returns a pointer to the created cone twist constraint.\n","externalName":"","help":"btConeTwistConstraint_create1(rigidBodyA, rigidBodyAFrame)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_create2(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame)\n///\n/// @desc\n/// Creates a cone twist constraint between two rigid bodies based on specified\n/// frames of reference.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second rigid body.\n/// @param {Pointer} rigidBodyAFrame\n///     The pointer to the frame of reference for the first rigid body.\n/// @param {Pointer} rigidBodyBFrame\n///     The pointer to the frame of reference for the second rigid body.\n///\n/// @return {Pointer} Returns a pointer to the created cone twist constraint.\n","externalName":"","help":"btConeTwistConstraint_create2(rigidBodyA, rigidBodyB, rigidBodyAFrame, rigidBodyBFrame)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_destroy(coneTwistConstraint)\n///\n/// @desc\n/// Destroys the cone twist constraint object.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint object to be destroyed.\n","externalName":"","help":"btConeTwistConstraint_destroy(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_updateRHS","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_updateRHS(coneTwistConstraint, timeStep)\n///\n/// @desc\n/// Updates the right-hand side of the cone twist constraint based on the given\n/// time step.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} timeStep\n///     The time step used to update the right-hand side.\n","externalName":"","help":"btConeTwistConstraint_updateRHS(coneTwistConstraint, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getRigidBodyA","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getRigidBodyA(coneTwistConstraint)\n///\n/// @desc\n/// Gets the pointer to the first rigid body connected to the cone twist\n/// constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} Returns a pointer to the first rigid body connected to the\n/// constraint.\n","externalName":"","help":"btConeTwistConstraint_getRigidBodyA(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getRigidBodyB","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getRigidBodyB(coneTwistConstraint)\n///\n/// @desc\n/// Gets the pointer to the second rigid body connected to the cone twist\n/// constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} Returns a pointer to the second rigid body connected to\n/// the constraint.\n","externalName":"","help":"btConeTwistConstraint_getRigidBodyB(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setAngularOnly","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setAngularOnly(coneTwistConstraint, angularOnly)\n///\n/// @desc\n/// Sets whether the constraint is angular only or not.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Bool} angularOnly\n///     Set to true if the constraint is angular only, false otherwise.\n","externalName":"","help":"btConeTwistConstraint_setAngularOnly(coneTwistConstraint, angularOnly)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getAngularOnly","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getAngularOnly(coneTwistConstraint)\n///\n/// @desc\n/// Gets whether the constraint is angular only or not.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Bool} Returns true if the constraint is angular only, false\n/// otherwise.\n","externalName":"","help":"btConeTwistConstraint_getAngularOnly(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setLimitIndex","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setLimitIndex(coneTwistConstraint, limitIndex, limitValue)\n///\n/// @desc\n/// Sets the limit value for a specific limit of the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} limitIndex\n///     The index of the limit to set.\n/// @param {Real} limitValue\n///     The value of the limit to set.\n","externalName":"","help":"btConeTwistConstraint_setLimitIndex(coneTwistConstraint, limitIndex, limitValue)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getLimitIndex","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getLimitIndex(coneTwistConstraint, limitIndex)\n///\n/// @desc\n/// Gets the limit value for a specific limit index of the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} limitIndex\n///     The index of the limit to get.\n///\n/// @return {Real} Returns the value of the specified limit.\n","externalName":"","help":"btConeTwistConstraint_getLimitIndex(coneTwistConstraint, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setLimit","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setLimit(coneTwistConstraint, swingSpan1, swingSpan2, twistSpan[, softness[, biasFactor[, relaxationFactor]]])\n///\n/// @desc\n/// Sets the limits for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} swingSpan1\n///     The maximum angle in radians for the first swing limit.\n/// @param {Real} swingSpan2\n///     The maximum angle in radians for the second swing limit.\n/// @param {Real} twistSpan\n///     The maximum angle in radians for the twist limit.\n/// @param {Real} [softness]\n///     The softness factor for the limit. Default is 1.0.\n/// @param {Real} [biasFactor]\n///     The bias factor for the limit. Default is 0.3.\n/// @param {Real} [relaxationFactor]\n///     The relaxation factor for the limit. Default is 1.0.\n","externalName":"","help":"btConeTwistConstraint_setLimit(coneTwistConstraint, swingSpan1, swingSpan2, twistSpan[, softness[, biasFactor[, relaxationFactor]]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getAFrame","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getAFrame(coneTwistConstraint)\n///\n/// @desc\n/// Gets the frame of reference for the constraint's rigid body A in the\n/// constraint space.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} Returns a pointer to the frame of reference for rigid body\n/// A in the constraint space.\n","externalName":"","help":"btConeTwistConstraint_getAFrame(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getBFrame","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getBFrame(coneTwistConstraint)\n///\n/// @desc\n/// Gets the frame of reference for the constraint's rigid body B in the\n/// constraint space.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} Returns a pointer to the frame of reference for rigid body\n/// B in the constraint space.\n","externalName":"","help":"btConeTwistConstraint_getBFrame(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getSolveTwistLimit","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getSolveTwistLimit(coneTwistConstraint)\n///\n/// @desc\n/// Gets the state indicating if the twist limit is being solved.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns a value indicating whether the twist limit is being\n/// solved. Non-zero (true) if being solved, zero (false) otherwise.\n","externalName":"","help":"btConeTwistConstraint_getSolveTwistLimit(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getSolveSwingLimit","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getSolveSwingLimit(coneTwistConstraint)\n///\n/// @desc\n/// Gets the state indicating if the swing limits are being solved.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns a value indicating whether the swing limits are being\n/// solved. Non-zero (true) if being solved, zero (false) otherwise.\n","externalName":"","help":"btConeTwistConstraint_getSolveSwingLimit(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getTwistLimitSign","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getTwistLimitSign(coneTwistConstraint)\n///\n/// @desc\n/// Gets the sign of the twist limit (1.0 if positive, -1.0 if negative, 0.0 if\n/// no twist limit).\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the sign of the twist limit. 1.0 if positive, -1.0 if\n/// negative, 0.0 if no twist limit.\n","externalName":"","help":"btConeTwistConstraint_getTwistLimitSign(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getSwingSpan1","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getSwingSpan1(coneTwistConstraint)\n///\n/// @desc\n/// Gets the maximum angle in radians for the first perpendicular axis (swing\n/// span).\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the maximum angle in radians for the first\n/// perpendicular axis (swing span).\n","externalName":"","help":"btConeTwistConstraint_getSwingSpan1(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getSwingSpan2","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getSwingSpan2(coneTwistConstraint)\n///\n/// @desc\n/// Gets the maximum angle in radians for the second perpendicular axis (swing\n/// span).\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the maximum angle in radians for the second\n/// perpendicular axis (swing span).\n","externalName":"","help":"btConeTwistConstraint_getSwingSpan2(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getTwistSpan","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getTwistSpan(coneTwistConstraint)\n///\n/// @desc\n/// Gets the maximum angle in radians for the twist around the axis.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the maximum angle in radians for the twist around the\n/// axis.\n","externalName":"","help":"btConeTwistConstraint_getTwistSpan(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getLimitSoftness(coneTwistConstraint)\n///\n/// @desc\n/// Gets the softness for each limit.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the softness for each limit.\n","externalName":"","help":"btConeTwistConstraint_getLimitSoftness(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getBiasFactor","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getBiasFactor(coneTwistConstraint)\n///\n/// @desc\n/// Gets the bias factor (between 0 and 1) for limiting the error correction\n/// during constraint solving.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the bias factor for limiting the error correction\n/// during constraint solving.\n","externalName":"","help":"btConeTwistConstraint_getBiasFactor(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getRelaxationFactor","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getRelaxationFactor(coneTwistConstraint)\n///\n/// @desc\n/// Gets the relaxation factor (controls the amount of relaxation applied to the\n/// constraint) for limiting.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the relaxation factor for limiting.\n","externalName":"","help":"btConeTwistConstraint_getRelaxationFactor(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getTwistAngle","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getTwistAngle(coneTwistConstraint)\n///\n/// @desc\n/// Gets the twist angle in radians around the swing axis.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the twist angle in radians around the swing axis.\n","externalName":"","help":"btConeTwistConstraint_getTwistAngle(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_isPastSwingLimit","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_isPastSwingLimit(coneTwistConstraint)\n///\n/// @desc\n/// Checks if the constraint is past its swing limit.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Bool} Returns true if the constraint is past its swing limit, false\n/// otherwise.\n","externalName":"","help":"btConeTwistConstraint_isPastSwingLimit(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getDamping","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getDamping(coneTwistConstraint)\n///\n/// @desc\n/// Gets the damping value used to damp the swinging motion of the constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the damping value used to damp the swinging motion of\n/// the constraint.\n","externalName":"","help":"btConeTwistConstraint_getDamping(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setDamping","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setDamping(coneTwistConstraint, damping)\n///\n/// @desc\n/// Sets the damping value used to damp the swinging motion of the constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} damping\n///     The damping value to set. Should be a non-negative real number.\n","externalName":"","help":"btConeTwistConstraint_setDamping(coneTwistConstraint, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_enableMotor","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_enableMotor(coneTwistConstraint, enable)\n///\n/// @desc\n/// Enables or disables the motor on the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Bool} enable\n///     Set to true to enable the motor, false to disable.\n","externalName":"","help":"btConeTwistConstraint_enableMotor(coneTwistConstraint, enable)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_isMotorEnabled","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_isMotorEnabled(coneTwistConstraint)\n///\n/// @desc\n/// Checks if the motor on the cone twist constraint is enabled.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Bool} Returns true if the motor is enabled, false otherwise.\n","externalName":"","help":"btConeTwistConstraint_isMotorEnabled(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getMaxMotorImpulse","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getMaxMotorImpulse(coneTwistConstraint)\n///\n/// @desc\n/// Gets the maximum motor impulse applied by the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the maximum motor impulse.\n","externalName":"","help":"btConeTwistConstraint_getMaxMotorImpulse(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_isMaxMotorImpulseNormalized","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_isMaxMotorImpulseNormalized(coneTwistConstraint)\n///\n/// @desc\n/// Checks if the maximum motor impulse is normalized by the cone twist\n/// constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Bool} Returns true if the maximum motor impulse is normalized,\n/// false otherwise.\n","externalName":"","help":"btConeTwistConstraint_isMaxMotorImpulseNormalized(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setMaxMotorImpulse","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setMaxMotorImpulse(coneTwistConstraint, maxMotorImpulse)\n///\n/// @desc\n/// Sets the maximum motor impulse applied by the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} maxMotorImpulse\n///     The maximum motor impulse to set.\n","externalName":"","help":"btConeTwistConstraint_setMaxMotorImpulse(coneTwistConstraint, maxMotorImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setMaxMotorImpulseNormalized","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setMaxMotorImpulseNormalized(coneTwistConstraint, maxMotorImpulse)\n///\n/// @desc\n/// Sets the maximum motor impulse applied by the cone twist constraint\n/// (normalized).\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} maxMotorImpulse\n///     The maximum motor impulse to set (normalized).\n","externalName":"","help":"btConeTwistConstraint_setMaxMotorImpulseNormalized(coneTwistConstraint, maxMotorImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getFixThresh","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getFixThresh(coneTwistConstraint)\n///\n/// @desc\n/// Gets the fix threshold for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} Returns the fix threshold.\n","externalName":"","help":"btConeTwistConstraint_getFixThresh(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setFixThresh","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setFixThresh(coneTwistConstraint, fixThresh)\n///\n/// @desc\n/// Sets the fix threshold for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} fixThresh\n///     The fix threshold to set.\n","externalName":"","help":"btConeTwistConstraint_setFixThresh(coneTwistConstraint, fixThresh)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setMotorTarget","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setMotorTarget(coneTwistConstraint, quaternion)\n///\n/// @desc\n/// Sets the motor target for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Pointer} quaternion\n///     The pointer to a quaternion specifying the motor target.\n","externalName":"","help":"btConeTwistConstraint_setMotorTarget(coneTwistConstraint, quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getMotorTarget","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getMotorTarget(coneTwistConstraint, outQuaternion)\n///\n/// @desc\n/// Gets the motor target for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Pointer} outQuaternion\n///     The pointer to store the motor target quaternion.\n","externalName":"","help":"btConeTwistConstraint_getMotorTarget(coneTwistConstraint, outQuaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setMotorTargetInConstraintSpace","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setMotorTargetInConstraintSpace(coneTwistConstraint, quaternion)\n///\n/// @desc\n/// Sets the motor target in constraint space for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Pointer} quaternion\n///     The pointer to a quaternion specifying the motor target in constraint\n///     space.\n","externalName":"","help":"btConeTwistConstraint_setMotorTargetInConstraintSpace(coneTwistConstraint, quaternion)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_GetPointForAngle","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_GetPointForAngle(coneTwistConstraint, fAngleInRadians, fLength, outVector3)\n///\n/// @desc\n/// Computes a point in the constraint space for a given angle and length.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Real} fAngleInRadians\n///     The angle in radians.\n/// @param {Real} fLength\n///     The length.\n/// @param {Pointer} outVector3\n///     The pointer to store the computed point as a btVector3.\n","externalName":"","help":"btConeTwistConstraint_GetPointForAngle(coneTwistConstraint, fAngleInRadians, fLength, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_setFrames","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_setFrames(coneTwistConstraint, frameA, frameB)\n///\n/// @desc\n/// Sets the frames for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n/// @param {Pointer} frameA\n///     The pointer to the first frame as a btTransform.\n/// @param {Pointer} frameB\n///     The pointer to the second frame as a btTransform.\n","externalName":"","help":"btConeTwistConstraint_setFrames(coneTwistConstraint, frameA, frameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getFrameOffsetA","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getFrameOffsetA(coneTwistConstraint)\n///\n/// @desc\n/// Gets the offset frame A for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} The pointer to the frame offset A as a btTransform.\n","externalName":"","help":"btConeTwistConstraint_getFrameOffsetA(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getFrameOffsetB","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getFrameOffsetB(coneTwistConstraint)\n///\n/// @desc\n/// Gets the offset frame B for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Pointer} The pointer to the frame offset B as a btTransform.\n","externalName":"","help":"btConeTwistConstraint_getFrameOffsetB(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btConeTwistConstraint_getFlags","argCount":0,"args":[],"documentation":"/// @func btConeTwistConstraint_getFlags(coneTwistConstraint)\n///\n/// @desc\n/// Gets the constraint flags for the cone twist constraint.\n///\n/// @param {Pointer} coneTwistConstraint\n///     The pointer to the cone twist constraint.\n///\n/// @return {Real} The constraint flags as an integer value.\n","externalName":"","help":"btConeTwistConstraint_getFlags(coneTwistConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setLoLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setLoLimit(rotationalLimitMotor, loLimit)\n///\n/// @desc\n/// Sets the lower limit for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} loLimit\n///     The lower limit value to set.\n","externalName":"","help":"btRotationalLimitMotor_setLoLimit(rotationalLimitMotor, loLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getLoLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getLoLimit(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the lower limit from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The lower limit value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getLoLimit(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setHiLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setHiLimit(rotationalLimitMotor, hiLimit)\n///\n/// @desc\n/// Sets the upper limit for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} hiLimit\n///     The upper limit value to set.\n","externalName":"","help":"btRotationalLimitMotor_setHiLimit(rotationalLimitMotor, hiLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getHiLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getHiLimit(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the upper limit from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The upper limit value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getHiLimit(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setTargetVelocity(rotationalLimitMotor, targetVelocity)\n///\n/// @desc\n/// Sets the target velocity for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} targetVelocity\n///     The target velocity value to set.\n","externalName":"","help":"btRotationalLimitMotor_setTargetVelocity(rotationalLimitMotor, targetVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getTargetVelocity(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the target velocity from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The target velocity value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getTargetVelocity(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setMaxMotorForce(rotationalLimitMotor, maxMotorForce)\n///\n/// @desc\n/// Sets the maximum motor force for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} maxMotorForce\n///     The maximum motor force value to set.\n","externalName":"","help":"btRotationalLimitMotor_setMaxMotorForce(rotationalLimitMotor, maxMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getMaxMotorForce(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the maximum motor force from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The maximum motor force value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getMaxMotorForce(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setMaxLimitForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setMaxLimitForce(rotationalLimitMotor, maxLimitForce)\n///\n/// @desc\n/// Sets the maximum limit force for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} maxLimitForce\n///     The maximum limit force value to set.\n","externalName":"","help":"btRotationalLimitMotor_setMaxLimitForce(rotationalLimitMotor, maxLimitForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getMaxLimitForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getMaxLimitForce(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the maximum limit force from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The maximum limit force value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getMaxLimitForce(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setDamping","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setDamping(rotationalLimitMotor, damping)\n///\n/// @desc\n/// Sets the damping for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} damping\n///     The damping value to set.\n","externalName":"","help":"btRotationalLimitMotor_setDamping(rotationalLimitMotor, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getDamping","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getDamping(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the damping from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The damping value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getDamping(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setLimitSoftness(rotationalLimitMotor, limitSoftness)\n///\n/// @desc\n/// Sets the limit softness for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} limitSoftness\n///     The limit softness value to set.\n","externalName":"","help":"btRotationalLimitMotor_setLimitSoftness(rotationalLimitMotor, limitSoftness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getLimitSoftness(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the limit softness from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The limit softness value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getLimitSoftness(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setNormalCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setNormalCFM(rotationalLimitMotor, normalCFM)\n///\n/// @desc\n/// Sets the normal CFM (Constraint Force Mixing) for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} normalCFM\n///     The normal CFM value to set.\n","externalName":"","help":"btRotationalLimitMotor_setNormalCFM(rotationalLimitMotor, normalCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getNormalCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getNormalCFM(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the normal CFM (Constraint Force Mixing) from the rotational limit\n/// motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The normal CFM value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getNormalCFM(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setStopERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setStopERP(rotationalLimitMotor, stopERP)\n///\n/// @desc\n/// Sets the stop ERP (Error Reduction Parameter) for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} stopERP\n///     The stop ERP value to set.\n","externalName":"","help":"btRotationalLimitMotor_setStopERP(rotationalLimitMotor, stopERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getStopERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getStopERP(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the stop ERP (Error Reduction Parameter) from the rotational limit\n/// motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The stop ERP value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getStopERP(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setStopCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setStopCFM(rotationalLimitMotor, stopCFM)\n///\n/// @desc\n/// Sets the stop CFM (Constraint Force Mixing) for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} stopCFM\n///     The stop CFM value to set.\n","externalName":"","help":"btRotationalLimitMotor_setStopCFM(rotationalLimitMotor, stopCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getStopCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getStopCFM(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the stop CFM (Constraint Force Mixing) from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The stop CFM value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getStopCFM(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setBounce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setBounce(rotationalLimitMotor, bounce)\n///\n/// @desc\n/// Sets the bounce value for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} bounce\n///     The bounce value to set.\n","externalName":"","help":"btRotationalLimitMotor_setBounce(rotationalLimitMotor, bounce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getBounce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getBounce(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the bounce value from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The bounce value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getBounce(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setEnableMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setEnableMotor(rotationalLimitMotor, enableMotor)\n///\n/// @desc\n/// Sets whether the motor for the rotational limit motor is enabled or disabled.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Bool} enableMotor\n///     A boolean value indicating whether the motor is enabled (true) or\n///     disabled (false).\n","externalName":"","help":"btRotationalLimitMotor_setEnableMotor(rotationalLimitMotor, enableMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getEnableMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getEnableMotor(rotationalLimitMotor)\n///\n/// @desc\n/// Gets whether the motor for the rotational limit motor is enabled or disabled.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Bool} A boolean value indicating whether the motor is enabled (true)\n/// or disabled (false).\n","externalName":"","help":"btRotationalLimitMotor_getEnableMotor(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setCurrentLimitError(rotationalLimitMotor, currentLimitError)\n///\n/// @desc\n/// Sets the current limit error for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} currentLimitError\n///     The current limit error value to set.\n","externalName":"","help":"btRotationalLimitMotor_setCurrentLimitError(rotationalLimitMotor, currentLimitError)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getCurrentLimitError(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the current limit error from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The current limit error value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getCurrentLimitError(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setCurrentPosition","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setCurrentPosition(rotationalLimitMotor, currentPosition)\n///\n/// @desc\n/// Sets the current position for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} currentPosition\n///     The current position value to set.\n","externalName":"","help":"btRotationalLimitMotor_setCurrentPosition(rotationalLimitMotor, currentPosition)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getCurrentPosition","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getCurrentPosition(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the current position from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The current position value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getCurrentPosition(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setCurrentLimit(rotationalLimitMotor, currentLimit)\n///\n/// @desc\n/// Sets the current limit for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} currentLimit\n///     The current limit value to set.\n","externalName":"","help":"btRotationalLimitMotor_setCurrentLimit(rotationalLimitMotor, currentLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getCurrentLimit(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the current limit from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The current limit value as an integer.\n","externalName":"","help":"btRotationalLimitMotor_getCurrentLimit(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_setAccumulatedImpulse","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_setAccumulatedImpulse(rotationalLimitMotor, accumulatedImpulse)\n///\n/// @desc\n/// Sets the accumulated impulse for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} accumulatedImpulse\n///     The accumulated impulse value to set.\n","externalName":"","help":"btRotationalLimitMotor_setAccumulatedImpulse(rotationalLimitMotor, accumulatedImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_getAccumulatedImpulse","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_getAccumulatedImpulse(rotationalLimitMotor)\n///\n/// @desc\n/// Gets the accumulated impulse from the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Real} The accumulated impulse value as a real number.\n","externalName":"","help":"btRotationalLimitMotor_getAccumulatedImpulse(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_isLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_isLimited(rotationalLimitMotor)\n///\n/// @desc\n/// Checks if the rotational limit motor is limited.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Bool} Returns true if the motor is limited, false otherwise.\n","externalName":"","help":"btRotationalLimitMotor_isLimited(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_needApplyTorques","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_needApplyTorques(rotationalLimitMotor)\n///\n/// @desc\n/// Checks if applying torques is needed for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n///\n/// @return {Bool} Returns true if applying torques is needed, false otherwise.\n","externalName":"","help":"btRotationalLimitMotor_needApplyTorques(rotationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_testLimitValue","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_testLimitValue(rotationalLimitMotor, testValue)\n///\n/// @desc\n/// Tests a limit value with the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} testValue\n///     The test value to check against the limit.\n///\n/// @return {Real} Returns an integer indicating the test result.\n","externalName":"","help":"btRotationalLimitMotor_testLimitValue(rotationalLimitMotor, testValue)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor_solveAngularLimits","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor_solveAngularLimits(rotationalLimitMotor, timeStep, axis, jacDiagABInv, body0, body1)\n///\n/// @desc\n/// Solves the angular limits for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor\n///     The pointer to the rotational limit motor.\n/// @param {Real} timeStep\n///     The time step value.\n/// @param {Pointer} axis\n///     The axis of rotation.\n/// @param {Real} jacDiagABInv\n///     The inverse of the diagonal of the jacobi matrix.\n/// @param {Pointer} body0\n///     The first body involved.\n/// @param {Pointer} body1\n///     The second body involved.\n///\n/// @return {Real} Returns a real number based on the solving of angular limits.\n","externalName":"","help":"btRotationalLimitMotor_solveAngularLimits(rotationalLimitMotor, timeStep, axis, jacDiagABInv, body0, body1)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setLowerLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setLowerLimit(translationalLimitMotor, lowerLimit)\n///\n/// @desc\n/// Sets the lower limit for translational movement in the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} lowerLimit\n///     The lower limit for translational movement specified as a btVector3\n///     pointer.\n","externalName":"","help":"btTranslationalLimitMotor_setLowerLimit(translationalLimitMotor, lowerLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getLowerLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getLowerLimit(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the lower limit for translational movement from the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the lower limit.\n","externalName":"","help":"btTranslationalLimitMotor_getLowerLimit(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setUpperLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setUpperLimit(translationalLimitMotor, upperLimit)\n///\n/// @desc\n/// Sets the upper limit for translational movement in the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} upperLimit\n///     The upper limit for translational movement specified as a btVector3\n///     pointer.\n","externalName":"","help":"btTranslationalLimitMotor_setUpperLimit(translationalLimitMotor, upperLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getUpperLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getUpperLimit(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the upper limit for translational movement from the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the upper limit.\n","externalName":"","help":"btTranslationalLimitMotor_getUpperLimit(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setAccumulatedImpulse","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setAccumulatedImpulse(translationalLimitMotor, accumulatedImpulse)\n///\n/// @desc\n/// Sets the accumulated impulse for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} accumulatedImpulse\n///     The accumulated impulse specified as a btVector3 pointer.\n","externalName":"","help":"btTranslationalLimitMotor_setAccumulatedImpulse(translationalLimitMotor, accumulatedImpulse)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getAccumulatedImpulse","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getAccumulatedImpulse(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the accumulated impulse from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the accumulated impulse.\n","externalName":"","help":"btTranslationalLimitMotor_getAccumulatedImpulse(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setLimitSoftness(translationalLimitMotor, limitSoftness)\n///\n/// @desc\n/// Sets the limit softness for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} limitSoftness\n///     The limit softness value to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setLimitSoftness(translationalLimitMotor, limitSoftness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getLimitSoftness","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getLimitSoftness(translationalLimitMotor)\n///\n/// @desc\n/// Gets the limit softness from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n///\n/// @return {Real} The limit softness value.\n","externalName":"","help":"btTranslationalLimitMotor_getLimitSoftness(translationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setDamping","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setDamping(translationalLimitMotor, damping)\n///\n/// @desc\n/// Sets the damping for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} damping\n///     The damping value to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setDamping(translationalLimitMotor, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getDamping","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getDamping(translationalLimitMotor)\n///\n/// @desc\n/// Gets the damping from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n///\n/// @return {Real} The damping value.\n","externalName":"","help":"btTranslationalLimitMotor_getDamping(translationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setRestitution","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setRestitution(translationalLimitMotor, restitution)\n///\n/// @desc\n/// Sets the restitution for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} restitution\n///     The restitution value to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setRestitution(translationalLimitMotor, restitution)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getRestitution","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getRestitution(translationalLimitMotor)\n///\n/// @desc\n/// Gets the restitution from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n///\n/// @return {Real} The restitution value.\n","externalName":"","help":"btTranslationalLimitMotor_getRestitution(translationalLimitMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setNormalCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setNormalCFM(translationalLimitMotor, normalCFM)\n///\n/// @desc\n/// Sets the normal constraint force mixing factor for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} normalCFM\n///     The pointer to a vector representing the normal constraint force mixing\n///     factor to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setNormalCFM(translationalLimitMotor, normalCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getNormalCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getNormalCFM(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the normal constraint force mixing factor from the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the normal constraint force mixing\n///     factor will be stored.\n","externalName":"","help":"btTranslationalLimitMotor_getNormalCFM(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setStopERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setStopERP(translationalLimitMotor, stopERP)\n///\n/// @desc\n/// Sets the error reduction parameter for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} stopERP\n///     The pointer to a vector representing the error reduction parameter to be\n///     set.\n","externalName":"","help":"btTranslationalLimitMotor_setStopERP(translationalLimitMotor, stopERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getStopERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getStopERP(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the error reduction parameter from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the error reduction parameter will\n///     be stored.\n","externalName":"","help":"btTranslationalLimitMotor_getStopERP(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setStopCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setStopCFM(translationalLimitMotor, stopCFM)\n///\n/// @desc\n/// Sets the constraint force mixing factor for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} stopCFM\n///     The pointer to a vector representing the constraint force mixing factor\n///     to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setStopCFM(translationalLimitMotor, stopCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getStopCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getStopCFM(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the constraint force mixing factor from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the constraint force mixing factor\n///     will be stored.\n","externalName":"","help":"btTranslationalLimitMotor_getStopCFM(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setEnableMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setEnableMotor(translationalLimitMotor, index, enableMotor)\n///\n/// @desc\n/// Sets whether the specified translational limit motor is enabled for a given\n/// index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} index\n///     The index of the translational limit motor to enable or disable.\n/// @param {Bool} enableMotor\n///     The boolean value indicating whether to enable (true) or disable (false)\n///     the motor.\n","externalName":"","help":"btTranslationalLimitMotor_setEnableMotor(translationalLimitMotor, index, enableMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getEnableMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getEnableMotor(translationalLimitMotor, index)\n///\n/// @desc\n/// Gets whether the specified translational limit motor is enabled for a given\n/// index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} index\n///     The index of the translational limit motor to query.\n///\n/// @return {Bool} Returns true if the motor at the specified index is enabled,\n/// false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor_getEnableMotor(translationalLimitMotor, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setTargetVelocity(translationalLimitMotor, targetVelocity)\n///\n/// @desc\n/// Sets the target velocity for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} targetVelocity\n///     The pointer to a vector representing the target velocity to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setTargetVelocity(translationalLimitMotor, targetVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getTargetVelocity(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the target velocity from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the target velocity will be stored.\n","externalName":"","help":"btTranslationalLimitMotor_getTargetVelocity(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setMaxMotorForce(translationalLimitMotor, maxMotorForce)\n///\n/// @desc\n/// Sets the maximum motor force for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} maxMotorForce\n///     The pointer to a vector representing the maximum motor force to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setMaxMotorForce(translationalLimitMotor, maxMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getMaxMotorForce(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the maximum motor force from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the maximum motor force will be\n///     stored.\n","externalName":"","help":"btTranslationalLimitMotor_getMaxMotorForce(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setCurrentLimitError(translationalLimitMotor, currentLimitError)\n///\n/// @desc\n/// Sets the current limit error for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} currentLimitError\n///     The pointer to a vector representing the current limit error to be set.\n","externalName":"","help":"btTranslationalLimitMotor_setCurrentLimitError(translationalLimitMotor, currentLimitError)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getCurrentLimitError(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the current limit error from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the current limit error will be\n///     stored.\n","externalName":"","help":"btTranslationalLimitMotor_getCurrentLimitError(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setCurrentLinearDiff","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setCurrentLinearDiff(translationalLimitMotor, currentLinearDiff)\n///\n/// @desc\n/// Sets the current linear difference for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} currentLinearDiff\n///     The pointer to a vector representing the current linear difference to be\n///     set.\n","externalName":"","help":"btTranslationalLimitMotor_setCurrentLinearDiff(translationalLimitMotor, currentLinearDiff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getCurrentLinearDiff","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getCurrentLinearDiff(translationalLimitMotor, outVector3)\n///\n/// @desc\n/// Gets the current linear difference from the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Pointer} outVector3\n///     The pointer to an output vector where the current linear difference will\n///     be stored.\n","externalName":"","help":"btTranslationalLimitMotor_getCurrentLinearDiff(translationalLimitMotor, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_setCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_setCurrentLimit(translationalLimitMotor, index, currentLimit)\n///\n/// @desc\n/// Sets the current limit for the translational limit motor at the specified\n/// index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} index\n///     The index specifying the limit to be set.\n/// @param {Real} currentLimit\n///     The current limit value to be set for the specified index.\n","externalName":"","help":"btTranslationalLimitMotor_setCurrentLimit(translationalLimitMotor, index, currentLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_getCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_getCurrentLimit(translationalLimitMotor, index)\n///\n/// @desc\n/// Gets the current limit from the translational limit motor at the specified\n/// index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} index\n///     The index specifying the limit to be retrieved.\n///\n/// @return {Real} The current limit value at the specified index.\n","externalName":"","help":"btTranslationalLimitMotor_getCurrentLimit(translationalLimitMotor, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_isLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_isLimited(translationalLimitMotor, limitIndex)\n///\n/// @desc\n/// Checks if the translational limit motor is limited at the specified index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} limitIndex\n///     The index specifying the limit to be checked.\n///\n/// @return {Bool} True if the translational limit motor is limited at the\n/// specified index, false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor_isLimited(translationalLimitMotor, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_needApplyForce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_needApplyForce(translationalLimitMotor, limitIndex)\n///\n/// @desc\n/// Checks if force needs to be applied for the translational limit motor at the\n/// specified index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} limitIndex\n///     The index specifying the limit to be checked.\n///\n/// @return {Bool} True if force needs to be applied for the translational limit\n/// motor at the specified index, false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor_needApplyForce(translationalLimitMotor, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_testLimitValue","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_testLimitValue(translationalLimitMotor, limitIndex, testValue)\n///\n/// @desc\n/// Tests the limit value for the translational limit motor at the specified\n/// index.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} limitIndex\n///     The index specifying the limit to be tested.\n/// @param {Real} testValue\n///     The test value against the limit.\n///\n/// @return {Real} The result of the limit test.\n","externalName":"","help":"btTranslationalLimitMotor_testLimitValue(translationalLimitMotor, limitIndex, testValue)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor_solveLinearAxis","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor_solveLinearAxis(translationalLimitMotor, timeStep, jacDiagABInv, body1, pointInA, body2, pointInB, limitIndex, axisNormalOnA, anchorPos)\n///\n/// @desc\n/// Solves the linear axis for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor\n///     The pointer to the translational limit motor.\n/// @param {Real} timeStep\n///     The time step for the simulation.\n/// @param {Real} jacDiagABInv\n///     The inverse diagonal coefficient of the constraint jacobi matrix.\n/// @param {Pointer} body1\n///     The pointer to the first rigid body involved in the constraint.\n/// @param {Pointer} pointInA\n///     The pointer to the point of constraint application on body1 in local\n///     space.\n/// @param {Pointer} body2\n///     The pointer to the second rigid body involved in the constraint.\n/// @param {Pointer} pointInB\n///     The pointer to the point of constraint application on body2 in local\n///     space.\n/// @param {Real} limitIndex\n///     The index specifying the limit.\n/// @param {Pointer} axisNormalOnA\n///     The pointer to the axis normal on body1 in local space.\n/// @param {Pointer} anchorPos\n///     The pointer to the anchor position.\n///\n/// @return {Real} The result of solving the linear axis.\n","externalName":"","help":"btTranslationalLimitMotor_solveLinearAxis(translationalLimitMotor, timeStep, jacDiagABInv, body1, pointInA, body2, pointInB, limitIndex, axisNormalOnA, anchorPos)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_create1(rigidBodyB, frameInB, useLinearReferenceFrameB)\n///\n/// @desc\n/// Creates a btGeneric6DofConstraint using a single rigid body and frame for\n/// the constraint.\n///\n/// @param {Pointer} rigidBodyB\n///     The pointer to the rigid body involved in the constraint.\n/// @param {Pointer} frameInB\n///     The transform frame associated with the rigid body (btTransform type).\n/// @param {Bool} useLinearReferenceFrameB\n///     A boolean indicating whether to use the linear reference frame for the\n///     constraint.\n///\n/// @return {Pointer} The pointer to the created btGeneric6DofConstraint.\n","externalName":"","help":"btGeneric6DofConstraint_create1(rigidBodyB, frameInB, useLinearReferenceFrameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameA)\n///\n/// @desc\n/// Creates a btGeneric6DofConstraint using two rigid bodies and their\n/// respective frames for the constraint.\n///\n/// @param {Pointer} rigidBodyA\n///     The pointer to the first rigid body involved in the constraint.\n/// @param {Pointer} rigidBodyB\n///     The pointer to the second rigid body involved in the constraint.\n/// @param {Pointer} frameInA\n///     The transform frame associated with the first rigid body (btTransform\n///     type).\n/// @param {Pointer} frameInB\n///     The transform frame associated with the second rigid body (btTransform\n///     type).\n/// @param {Bool} useLinearReferenceFrameA\n///     A boolean indicating whether to use the linear reference frame for the\n///     first rigid body.\n///\n/// @return {Pointer} The pointer to the created btGeneric6DofConstraint.\n","externalName":"","help":"btGeneric6DofConstraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_destroy(generic6DofConstraint)\n///\n/// @desc\n/// Destroys the btGeneric6DofConstraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint to be destroyed.\n","externalName":"","help":"btGeneric6DofConstraint_destroy(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_calculateTransforms","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_calculateTransforms(generic6DofConstraint[, transA, transB])\n///\n/// @desc\n/// Calculates the transforms for the constraint.\n/// Optionally, you can provide the transforms for the involved bodies.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint.\n/// @param {Pointer} [transA]\n///     The transform associated with the first rigid body (btTransform type).\n/// @param {Pointer} [transB]\n///     The transform associated with the second rigid body (btTransform type).\n","externalName":"","help":"btGeneric6DofConstraint_calculateTransforms(generic6DofConstraint[, transA, transB])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getCalculatedTransformA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getCalculatedTransformA(generic6DofConstraint)\n///\n/// @desc\n/// Gets the calculated transform of the first rigid body in the constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint.\n///\n/// @return {Pointer} The pointer to the calculated transform (btTransform) of\n/// the first rigid body.\n","externalName":"","help":"btGeneric6DofConstraint_getCalculatedTransformA(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getCalculatedTransformB","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getCalculatedTransformB(generic6DofConstraint)\n///\n/// @desc\n/// Gets the calculated transform of the second rigid body in the constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint.\n///\n/// @return {Pointer} The pointer to the calculated transform (btTransform) of\n/// the second rigid body.\n","externalName":"","help":"btGeneric6DofConstraint_getCalculatedTransformB(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getFrameOffsetA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getFrameOffsetA(generic6DofConstraint)\n///\n/// @desc\n/// Gets the frame offset associated with the first rigid body in the constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint.\n///\n/// @return {Pointer} The pointer to the frame offset (btTransform) of the first\n/// rigid body.\n","externalName":"","help":"btGeneric6DofConstraint_getFrameOffsetA(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getFrameOffsetB","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getFrameOffsetB(generic6DofConstraint)\n///\n/// @desc\n/// Gets the frame offset associated with the second rigid body in the\n/// constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     The pointer to the btGeneric6DofConstraint.\n///\n/// @return {Pointer} The pointer to the frame offset (btTransform) of the\n/// second rigid body.\n","externalName":"","help":"btGeneric6DofConstraint_getFrameOffsetB(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_updateRHS","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_updateRHS(generic6DofConstraint, timeStep)\n///\n/// @desc\n/// Updates the right-hand side (RHS) of the equations for a generic\n/// 6-degree-of-freedom constraint, considering the provided time step.\n///\n/// @param {Pointer} generic6DofConstraint\n///     A pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} timeStep\n///     The time step used to update the constraint equations.\n","externalName":"","help":"btGeneric6DofConstraint_updateRHS(generic6DofConstraint, timeStep)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getAxis","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getAxis(generic6DofConstraint, axisIndex, outVector3)\n///\n/// @desc\n/// Retrieves the axis associated with the specified index from the generic\n/// 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     A pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} axisIndex\n///     The index of the axis to retrieve.\n/// @param {Pointer} outVector3\n///     A pointer to the btVector3 where the retrieved axis will be stored.\n///     The retrieved axis is represented as a 3D vector (x, y, z).\n","externalName":"","help":"btGeneric6DofConstraint_getAxis(generic6DofConstraint, axisIndex, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getAngle","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getAngle(generic6DofConstraint, axisIndex)\n///\n/// @desc\n/// Retrieves the angle for the specified axis index from the generic 6-degree-\n/// of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} axisIndex\n///     Index of the axis for which the angle is to be retrieved.\n///\n/// @return {Real} The angle (in radians) associated with the specified axis\n/// index.\n","externalName":"","help":"btGeneric6DofConstraint_getAngle(generic6DofConstraint, axisIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getRelativePivotPosition","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getRelativePivotPosition(generic6DofConstraint, axisIndex)\n///\n/// @desc\n/// Retrieves the relative pivot position for the specified axis index from the\n/// generic 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @param {Real} axisIndex\n///     Index of the axis for which the relative pivot position is to be\n///     retrieved.\n///\n/// @return {Real} The relative pivot position associated with the specified\n/// axis index.\n","externalName":"","help":"btGeneric6DofConstraint_getRelativePivotPosition(generic6DofConstraint, axisIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setFrames","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setFrames(generic6DofConstraint, frameA, frameB)\n///\n/// @desc\n/// Sets the frames of the generic 6-degree-of-freedom constraint based on the\n/// provided btTransform instances for each rigid body involved.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} frameA\n///     Pointer to the btTransform representing the frame associated with the\n///     first rigid body.\n/// @param {Pointer} frameB\n///     Pointer to the btTransform representing the frame associated with the\n///     second rigid body.\n","externalName":"","help":"btGeneric6DofConstraint_setFrames(generic6DofConstraint, frameA, frameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_testAngularLimitMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_testAngularLimitMotor(generic6DofConstraint, axisIndex)\n///\n/// @desc\n/// Tests the angular limit motor for the specified axis index in the generic \n/// 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} axisIndex\n///     Index of the axis for which the angular limit motor is to be tested.\n/// @return {Bool}\n///     Returns true if the angular limit motor is active for the specified axis,\n///     false otherwise.\n","externalName":"","help":"btGeneric6DofConstraint_testAngularLimitMotor(generic6DofConstraint, axisIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setLinearLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setLinearLowerLimit(generic6DofConstraint, linearLower)\n///\n/// @desc\n/// Sets the lower limit for linear motion in the generic 6-degree-of-freedom \n/// constraint for all axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} linearLower\n///     Pointer to the btVector3 representing the lower linear limits.\n","externalName":"","help":"btGeneric6DofConstraint_setLinearLowerLimit(generic6DofConstraint, linearLower)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getLinearLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getLinearLowerLimit(generic6DofConstraint, outVector3)\n///\n/// @desc\n/// Retrieves the lower limit for linear motion in the generic 6-degree-of-freedom \n/// constraint for all axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to the btVector3 where the retrieved lower linear limits will be\n///     stored.\n","externalName":"","help":"btGeneric6DofConstraint_getLinearLowerLimit(generic6DofConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setLinearUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setLinearUpperLimit(generic6DofConstraint, linearUpper)\n///\n/// @desc\n/// Sets the upper limit for linear motion in the generic 6-degree-of-freedom \n/// constraint for all axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} linearUpper\n///     Pointer to the btVector3 representing the upper linear limits.\n","externalName":"","help":"btGeneric6DofConstraint_setLinearUpperLimit(generic6DofConstraint, linearUpper)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getLinearUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getLinearUpperLimit(generic6DofConstraint, outVector3)\n///\n/// @desc\n/// Retrieves the upper limit for linear motion in the generic 6-degree-of-\n/// freedom constraint for all axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to the btVector3 where the retrieved upper linear limits will be\n///     stored.\n","externalName":"","help":"btGeneric6DofConstraint_getLinearUpperLimit(generic6DofConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setAngularLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setAngularLowerLimit(generic6DofConstraint, angularLower)\n///\n/// @desc\n/// Sets the lower limit for angular motion in the generic 6-degree-of-freedom \n/// constraint for all rotational axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} angularLower\n///     Pointer to the btVector3 representing the lower angular limits.\n","externalName":"","help":"btGeneric6DofConstraint_setAngularLowerLimit(generic6DofConstraint, angularLower)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getAngularLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getAngularLowerLimit(generic6DofConstraint, outVector3)\n///\n/// @desc\n/// Retrieves the lower limit for angular motion in the generic\n/// 6-degree-of-freedom constraint for all rotational axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to the btVector3 where the retrieved lower angular limits will\n///     be stored.\n","externalName":"","help":"btGeneric6DofConstraint_getAngularLowerLimit(generic6DofConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setAngularUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setAngularUpperLimit(generic6DofConstraint, angularUpper)\n///\n/// @desc\n/// Sets the upper limit for angular motion in the generic 6-degree-of-freedom \n/// constraint for all rotational axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} angularUpper\n///     Pointer to the btVector3 representing the upper angular limits.\n","externalName":"","help":"btGeneric6DofConstraint_setAngularUpperLimit(generic6DofConstraint, angularUpper)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getAngularUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getAngularUpperLimit(generic6DofConstraint, outVector3)\n///\n/// @desc\n/// Retrieves the upper limit for angular motion in the generic 6-degree-of-\n/// freedom constraint for all rotational axes.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to the btVector3 where the retrieved upper angular limits will\n///     be stored.\n","externalName":"","help":"btGeneric6DofConstraint_getAngularUpperLimit(generic6DofConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getRotationalLimitMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getRotationalLimitMotor(generic6DofConstraint, index)\n///\n/// @desc\n/// Gets the rotational limit motor for the specified axis index in the generic \n/// 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} index\n///     Index of the axis for which the rotational limit motor is to be\n///     retrieved.\n///\n/// @return {Pointer} Pointer to the btRotationalLimitMotor for the specified\n/// axis index.\n","externalName":"","help":"btGeneric6DofConstraint_getRotationalLimitMotor(generic6DofConstraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getTranslationalLimitMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getTranslationalLimitMotor(generic6DofConstraint)\n///\n/// @desc\n/// Gets the translational limit motor associated with the generic 6-degree-of-\n/// freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @return {Pointer} Pointer to the btTranslationalLimitMotor associated with\n/// the constraint.\n","externalName":"","help":"btGeneric6DofConstraint_getTranslationalLimitMotor(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setLimit(generic6DofConstraint, axis, low, high)\n///\n/// @desc\n/// Sets the limits for a specific axis in the generic 6-degree-of-freedom\n/// constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} axis\n///     Index of the axis for which the limits are to be set.\n/// @param {Real} low\n///     The lower limit for the specified axis.\n/// @param {Real} high\n///     The upper limit for the specified axis.\n","externalName":"","help":"btGeneric6DofConstraint_setLimit(generic6DofConstraint, axis, low, high)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_isLimited","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_isLimited(generic6DofConstraint, limitIndex)\n///\n/// @desc\n/// Checks if the specified limit (rotational or translational) is active in the\n/// generic 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Real} limitIndex\n///     Index of the limit to be checked (for rotational or translational).\n///\n/// @return {Bool} Returns true if the specified limit is active, false otherwise.\n","externalName":"","help":"btGeneric6DofConstraint_isLimited(generic6DofConstraint, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_calcAnchorPos","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_calcAnchorPos(generic6DofConstraint)\n///\n/// @desc\n/// Calculates the anchor position for the generic 6-degree-of-freedom\n/// constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n","externalName":"","help":"btGeneric6DofConstraint_calcAnchorPos(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getUseFrameOffset(generic6DofConstraint)\n///\n/// @desc\n/// Checks if the frame offset is being used in the generic 6-degree-of-freedom \n/// constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @return {Bool} Returns true if the frame offset is being used, false otherwise.\n","externalName":"","help":"btGeneric6DofConstraint_getUseFrameOffset(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setUseFrameOffset(generic6DofConstraint, frameOffsetOnOff)\n///\n/// @desc\n/// Sets whether to use the frame offset in the generic 6-degree-of-freedom \n/// constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @param {Bool} frameOffsetOnOff A boolean indicating whether to use the frame\n/// offset (true) or not (false).\n","externalName":"","help":"btGeneric6DofConstraint_setUseFrameOffset(generic6DofConstraint, frameOffsetOnOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getUseLinearReferenceFrameA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getUseLinearReferenceFrameA(generic6DofConstraint)\n///\n/// @desc\n/// Checks if the linear reference frame A is being used in the generic \n/// 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @return {Bool} Returns true if the linear reference frame A is being used,\n/// false otherwise.\n","externalName":"","help":"btGeneric6DofConstraint_getUseLinearReferenceFrameA(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setUseLinearReferenceFrameA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setUseLinearReferenceFrameA(generic6DofConstraint, linearReferenceFrameA)\n///\n/// @desc\n/// Sets whether to use the linear reference frame A in the generic 6-degree-of-\n/// freedom  constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Bool} linearReferenceFrameA\n///     A boolean indicating whether to use the linear reference frame A (true)\n/// or not (false).\n","externalName":"","help":"btGeneric6DofConstraint_setUseLinearReferenceFrameA(generic6DofConstraint, linearReferenceFrameA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_setAxis","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_setAxis(generic6DofConstraint, axis1, axis2)\n///\n/// @desc\n/// Sets the axis vectors for the generic 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n/// @param {Pointer} axis1\n///     Pointer to the btVector3 representing the first axis vector.\n/// @param {Pointer} axis2\n///     Pointer to the btVector3 representing the second axis vector.\n","externalName":"","help":"btGeneric6DofConstraint_setAxis(generic6DofConstraint, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofConstraint_getFlags","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofConstraint_getFlags(generic6DofConstraint)\n///\n/// @desc\n/// Gets the flags associated with the generic 6-degree-of-freedom constraint.\n///\n/// @param {Pointer} generic6DofConstraint\n///     Pointer to the btGeneric6DofConstraint instance.\n///\n/// @return {Real} The flags associated with the constraint.\n","externalName":"","help":"btGeneric6DofConstraint_getFlags(generic6DofConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_create1(rigidBodyB, frameInB, useLinearReferenceFrameB)\n///\n/// @desc\n/// Creates a new generic 6-degree-of-freedom spring constraint using a single\n/// rigid body and frame for the constraint.\n///\n/// @param {Pointer} rigidBodyB\n///     Pointer to the second rigid body for the constraint.\n/// @param {Pointer} frameInB\n///     Pointer to the frame transformation (btTransform) in the local space of\n///     the  second rigid body.\n/// @param {Bool} useLinearReferenceFrameB\n///     A boolean indicating whether to use the linear reference frame B (true)\n///     or not (false).\n///\n/// @return {Pointer} Pointer to the created btGeneric6DofSpringConstraint\n/// instance.\n","externalName":"","help":"btGeneric6DofSpringConstraint_create1(rigidBodyB, frameInB, useLinearReferenceFrameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameB)\n///\n/// @desc\n/// Creates a new generic 6-degree-of-freedom spring constraint using two rigid\n/// bodies and respective frames for the constraint.\n///\n/// @param {Pointer} rigidBodyA\n///     Pointer to the first rigid body for the constraint.\n/// @param {Pointer} rigidBodyB\n///     Pointer to the second rigid body for the constraint.\n/// @param {Pointer} frameInA\n///     Pointer to the frame transformation (btTransform) in the local space of\n/// the first rigid body.\n/// @param {Pointer} frameInB\n///     Pointer to the frame transformation (btTransform) in the local space of\n///     the second rigid body.\n/// @param {Bool} useLinearReferenceFrameB\n///     A boolean indicating whether to use the linear reference frame B (true)\n///     or not (false).\n///\n/// @return {Pointer} Pointer to the created btGeneric6DofSpringConstraint\n/// instance.\n","externalName":"","help":"btGeneric6DofSpringConstraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_destroy(generic6DofSpringConstraint)\n///\n/// @desc\n/// Destroys the specified generic 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance to be destroyed.\n","externalName":"","help":"btGeneric6DofSpringConstraint_destroy(generic6DofSpringConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_enableSpring","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_enableSpring(generic6DofSpringConstraint, index, onOff)\n///\n/// @desc\n/// Enables or disables spring for a specified degree of freedom (DOF) in the\n/// generic 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to enable or disable\n///     spring.\n/// @param {Bool} onOff\n///     A boolean indicating whether to enable (true) or disable (false) the\n///     spring.\n","externalName":"","help":"btGeneric6DofSpringConstraint_enableSpring(generic6DofSpringConstraint, index, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_setStiffness","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_setStiffness(generic6DofSpringConstraint, index, stiffness)\n///\n/// @desc\n/// Sets the stiffness for a specified degree of freedom (DOF) in the generic\n/// 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to set the stiffness.\n/// @param {Real} stiffness\n///     The stiffness value to set for the specified degree of freedom.\n","externalName":"","help":"btGeneric6DofSpringConstraint_setStiffness(generic6DofSpringConstraint, index, stiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_setDamping","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_setDamping(generic6DofSpringConstraint, index, damping)\n///\n/// @desc\n/// Sets the damping for a specified degree of freedom (DOF) in the generic\n/// 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to set the damping.\n/// @param {Real} damping\n///     The damping value to set for the specified degree of freedom.\n","externalName":"","help":"btGeneric6DofSpringConstraint_setDamping(generic6DofSpringConstraint, index, damping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_setEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_setEquilibriumPoint(generic6DofSpringConstraint[, index[, val]])\n///\n/// @desc\n/// Sets the equilibrium point (desired position) for a specified degree of\n/// freedom (DOF) in the generic 6-degree-of-freedom spring constraint. If no\n/// index or damping is provided, sets the equilibrium point for all DOFs.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} [index]\n///     The index of the degree of freedom (DOF) for which to set the\n///     equilibrium point. If not provided, sets the equilibrium point for all\n///     DOFs.\n/// @param {Real} [val]\n///     The value for the equilibrium point. If not provided, uses the default\n///     equilibrium point for the specified DOF.\n","externalName":"","help":"btGeneric6DofSpringConstraint_setEquilibriumPoint(generic6DofSpringConstraint[, index[, val]])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_isSpringEnabled","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_isSpringEnabled(generic6DofSpringConstraint, index)\n///\n/// @desc\n/// Checks if the spring is enabled for a specified degree of freedom (DOF) in\n/// the generic 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) to check for spring enablement.\n///\n/// @return {Bool} True if spring is enabled for the specified DOF, false\n/// otherwise.\n","externalName":"","help":"btGeneric6DofSpringConstraint_isSpringEnabled(generic6DofSpringConstraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_getStiffness","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_getStiffness(generic6DofSpringConstraint, index)\n///\n/// @desc\n/// Gets the stiffness for a specified degree of freedom (DOF) in the generic\n/// 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to get the stiffness.\n///\n/// @return {Real} The stiffness value for the specified degree of freedom.\n","externalName":"","help":"btGeneric6DofSpringConstraint_getStiffness(generic6DofSpringConstraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_getDamping","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_getDamping(generic6DofSpringConstraint, index)\n///\n/// @desc\n/// Gets the damping for a specified degree of freedom (DOF) in the generic \n/// 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to get the damping.\n///\n/// @return {Real} The damping value for the specified degree of freedom.\n","externalName":"","help":"btGeneric6DofSpringConstraint_getDamping(generic6DofSpringConstraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_getEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_getEquilibriumPoint(generic6DofSpringConstraint, index)\n///\n/// @desc\n/// Gets the equilibrium point (desired position) for a specified degree of \n/// freedom (DOF) in the generic 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Real} index\n///     The index of the degree of freedom (DOF) for which to get the\n///     equilibrium point.\n///\n/// @return {Real} The equilibrium point (desired position) for the specified\n/// degree of freedom.\n","externalName":"","help":"btGeneric6DofSpringConstraint_getEquilibriumPoint(generic6DofSpringConstraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpringConstraint_setAxis","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpringConstraint_setAxis(generic6DofSpringConstraint, axis1, axis2)\n///\n/// @desc\n/// Sets the axes for spring calculation in the generic 6-degree-of-freedom \n/// spring constraint.\n///\n/// @param {Pointer} generic6DofSpringConstraint\n///     Pointer to the btGeneric6DofSpringConstraint instance.\n/// @param {Pointer} axis1\n///     The first axis for spring calculation.\n/// @param {Pointer} axis2\n///     The second axis for spring calculation.\n","externalName":"","help":"btGeneric6DofSpringConstraint_setAxis(generic6DofSpringConstraint, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_create","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_create(rigidBodyA, rigidBodyB, anchor, axis1, axis2)\n///\n/// @desc\n/// Creates a new universal constraint between two rigid bodies.\n///\n/// @param {Pointer} rigidBodyA\n///     Pointer to the first rigid body involved in the constraint.\n/// @param {Pointer} rigidBodyB\n///     Pointer to the second rigid body involved in the constraint.\n/// @param {Pointer} anchor\n///     The anchor point for the constraint, specified as a btVector3.\n/// @param {Pointer} axis1\n///     The first rotational axis, specified as a btVector3.\n/// @param {Pointer} axis2\n///     The second rotational axis, specified as a btVector3.\n///\n/// @return {Pointer} A pointer to the created btUniversalConstraint instance.\n","externalName":"","help":"btUniversalConstraint_create(rigidBodyA, rigidBodyB, anchor, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_destroy(universalConstraint)\n///\n/// @desc\n/// Destroys the specified universal constraint, releasing allocated resources.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance to be destroyed.\n","externalName":"","help":"btUniversalConstraint_destroy(universalConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAnchor","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAnchor(universalConstraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point for the first rigid body in the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to a btVector3 to store the anchor point.\n","externalName":"","help":"btUniversalConstraint_getAnchor(universalConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAnchor2","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAnchor2(universalConstraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point for the second rigid body in the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to a btVector3 to store the anchor point.\n","externalName":"","help":"btUniversalConstraint_getAnchor2(universalConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAxis1","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAxis1(universalConstraint, outVector3)\n///\n/// @desc\n/// Gets the first rotational axis of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to a btVector3 to store the first rotational axis.\n","externalName":"","help":"btUniversalConstraint_getAxis1(universalConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAxis2","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAxis2(universalConstraint, outVector3)\n///\n/// @desc\n/// Gets the second rotational axis of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Pointer} outVector3\n///     Pointer to a btVector3 to store the second rotational axis.\n","externalName":"","help":"btUniversalConstraint_getAxis2(universalConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAngle1","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAngle1(universalConstraint)\n///\n/// @desc\n/// Gets the angle around the first rotational axis of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n///\n/// @return {Real} The angle around the first rotational axis.\n","externalName":"","help":"btUniversalConstraint_getAngle1(universalConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_getAngle2","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_getAngle2(universalConstraint)\n///\n/// @desc\n/// Gets the angle around the second rotational axis of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n///\n/// @return {Real} The angle around the second rotational axis.\n","externalName":"","help":"btUniversalConstraint_getAngle2(universalConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_setUpperLimit","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_setUpperLimit(universalConstraint, ang1max, ang2max)\n///\n/// @desc\n/// Sets the upper limits for the rotational angles around the two rotational\n/// axes of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Real} ang1max\n///     The upper limit for the first rotational angle (angle around the first\n///     rotational axis).\n/// @param {Real} ang2max\n///     The upper limit for the second rotational angle (angle around the second\n///     rotational axis).\n","externalName":"","help":"btUniversalConstraint_setUpperLimit(universalConstraint, ang1max, ang2max)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_setLowerLimit","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_setLowerLimit(universalConstraint, ang1min, ang2min)\n///\n/// @desc\n/// Sets the lower limits for the rotational angles around the two rotational\n/// axes of the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Real} ang1min\n///     The lower limit for the first rotational angle (angle around the first\n///     rotational axis).\n/// @param {Real} ang2min\n///     The lower limit for the second rotational angle (angle around the second\n///     rotational axis).\n","externalName":"","help":"btUniversalConstraint_setLowerLimit(universalConstraint, ang1min, ang2min)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btUniversalConstraint_setAxis","argCount":0,"args":[],"documentation":"/// @func btUniversalConstraint_setAxis(universalConstraint, axis1, axis2)\n///\n/// @desc\n/// Sets the rotational axes for the universal constraint.\n///\n/// @param {Pointer} universalConstraint\n///     Pointer to the btUniversalConstraint instance.\n/// @param {Pointer} axis1\n///     Pointer to a btVector3 representing the first rotational axis.\n/// @param {Pointer} axis2\n///     Pointer to a btVector3 representing the second rotational axis.\n","externalName":"","help":"btUniversalConstraint_setAxis(universalConstraint, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_create1","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_create1(rigidBodyB, transformB, useLinearReferenceFrameA)\n///\n/// @desc\n/// Creates a slider constraint between rigidBodyB and a specified transform,\n/// optionally using a linear reference frame A.\n///\n/// @param {Pointer} rigidBodyB\n///     Pointer to the btRigidBody instance for rigid body B.\n/// @param {Pointer} transformB\n///     Pointer to the btTransform instance specifying the transform for rigid\n///     body B.\n/// @param {Bool} useLinearReferenceFrameA\n///     A boolean indicating whether to use a linear reference frame A for the\n///     constraint.\n///\n/// @return {Pointer} Returns a pointer to the created btSliderConstraint\n/// instance.\n","externalName":"","help":"btSliderConstraint_create1(rigidBodyB, transformB, useLinearReferenceFrameA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_create2","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_create2(rigidBodyA, rigidBodyB, transformA, transformB, useLinearReferenceFrameA)\n///\n/// @desc\n/// Creates a slider constraint between rigidBodyA and rigidBodyB with specified\n/// transforms, optionally using a linear reference frame A.\n///\n/// @param {Pointer} rigidBodyA\n///     Pointer to the btRigidBody instance for rigid body A.\n/// @param {Pointer} rigidBodyB\n///     Pointer to the btRigidBody instance for rigid body B.\n/// @param {Pointer} transformA\n///     Pointer to the btTransform instance specifying the transform for rigid\n///     body A.\n/// @param {Pointer} transformB\n///     Pointer to the btTransform instance specifying the transform for rigid\n///     body B.\n/// @param {Bool} useLinearReferenceFrameA\n///     A boolean indicating whether to use a linear reference frame A for the\n///     constraint.\n///\n/// @return {Pointer} Returns a pointer to the created btSliderConstraint\n/// instance.\n","externalName":"","help":"btSliderConstraint_create2(rigidBodyA, rigidBodyB, transformA, transformB, useLinearReferenceFrameA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_destroy(sliderConstraint)\n///\n/// @desc\n/// Destroys the specified slider constraint, releasing its allocated resources.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance to be destroyed.\n","externalName":"","help":"btSliderConstraint_destroy(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRigidBodyA","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRigidBodyA(sliderConstraint)\n///\n/// @desc\n/// Gets the pointer to the rigid body associated with the first end of the\n/// slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the btRigidBody associated with the\n/// first end of the slider constraint.\n","externalName":"","help":"btSliderConstraint_getRigidBodyA(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRigidBodyB","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRigidBodyB(sliderConstraint)\n///\n/// @desc\n/// Gets the pointer to the rigid body associated with the second end of the\n/// slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the btRigidBody associated with the\n/// second end of the slider constraint.\n","externalName":"","help":"btSliderConstraint_getRigidBodyB(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getCalculatedTransformA","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getCalculatedTransformA(sliderConstraint)\n///\n/// @desc\n/// Gets the calculated transform of the first rigid body in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the calculated btTransform of the\n/// first rigid body in the slider constraint.\n","externalName":"","help":"btSliderConstraint_getCalculatedTransformA(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getCalculatedTransformB","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getCalculatedTransformB(sliderConstraint)\n///\n/// @desc\n/// Gets the calculated transform of the second rigid body in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the calculated btTransform of the\n/// second rigid body in the slider constraint.\n","externalName":"","help":"btSliderConstraint_getCalculatedTransformB(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getFrameOffsetA","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getFrameOffsetA(sliderConstraint)\n///\n/// @desc\n/// Gets the frame offset A of a btSliderConstraint instance. The frame offset A\n/// represents the transformation of the first rigid body in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// frame offset A of the slider constraint's first rigid body.\n","externalName":"","help":"btSliderConstraint_getFrameOffsetA(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getFrameOffsetB","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getFrameOffsetB(sliderConstraint)\n///\n/// @desc\n/// Gets the frame offset B of a btSliderConstraint instance. The frame offset B\n/// represents the transformation of the second rigid body in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// frame offset B of the slider constraint's second rigid body.\n","externalName":"","help":"btSliderConstraint_getFrameOffsetB(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getLowerLinLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getLowerLinLimit(sliderConstraint)\n///\n/// @desc\n/// Gets the lower linear limit of a btSliderConstraint instance. The lower\n/// linear limit represents the minimum allowable linear movement along the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the lower linear limit as a real value.\n","externalName":"","help":"btSliderConstraint_getLowerLinLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setLowerLinLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setLowerLinLimit(sliderConstraint, lowerLimit)\n///\n/// @desc\n/// Sets the lower linear limit of a btSliderConstraint instance. The lower\n/// linear limit represents the minimum allowable linear movement along the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} lowerLimit\n///     The lower linear limit to be set.\n","externalName":"","help":"btSliderConstraint_setLowerLinLimit(sliderConstraint, lowerLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getUpperLinLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getUpperLinLimit(sliderConstraint)\n///\n/// @desc\n/// Gets the upper linear limit of a btSliderConstraint instance. The upper\n/// linear limit represents the maximum allowable linear movement along the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the upper linear limit as a real value.\n","externalName":"","help":"btSliderConstraint_getUpperLinLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setUpperLinLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setUpperLinLimit(sliderConstraint, upperLimit)\n///\n/// @desc\n/// Sets the upper linear limit of a btSliderConstraint instance. The upper\n/// linear limit represents the maximum allowable linear movement along the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} upperLimit\n///     The upper linear limit to be set.\n","externalName":"","help":"btSliderConstraint_setUpperLinLimit(sliderConstraint, upperLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getLowerAngLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getLowerAngLimit(sliderConstraint)\n///\n/// @desc\n/// Gets the lower angular limit of a btSliderConstraint instance. The lower\n/// angular limit represents the minimum allowable angular movement around the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the lower angular limit as a real value.\n","externalName":"","help":"btSliderConstraint_getLowerAngLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setLowerAngLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setLowerAngLimit(sliderConstraint, lowerLimit)\n///\n/// @desc\n/// Sets the lower angular limit of a btSliderConstraint instance. The lower\n/// angular limit represents the minimum allowable angular movement around the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} lowerLimit\n///     The lower angular limit to be set.\n","externalName":"","help":"btSliderConstraint_setLowerAngLimit(sliderConstraint, lowerLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getUpperAngLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getUpperAngLimit(sliderConstraint)\n///\n/// @desc\n/// Gets the upper angular limit of a btSliderConstraint instance. The upper\n/// angular limit represents the maximum allowable angular movement around the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the upper angular limit as a real value.\n","externalName":"","help":"btSliderConstraint_getUpperAngLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setUpperAngLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setUpperAngLimit(sliderConstraint, upperLimit)\n///\n/// @desc\n/// Sets the upper angular limit of a btSliderConstraint instance. The upper\n/// angular limit represents the maximum allowable angular movement around the\n/// slider's axis.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} upperLimit\n///     The upper angular limit to be set.\n","externalName":"","help":"btSliderConstraint_setUpperAngLimit(sliderConstraint, upperLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getUseLinearReferenceFrameA","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getUseLinearReferenceFrameA(sliderConstraint)\n///\n/// @desc\n/// Gets whether the linear reference frame A is being used in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} Returns a boolean indicating whether the linear reference\n/// frame A is being used.\n","externalName":"","help":"btSliderConstraint_getUseLinearReferenceFrameA(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessDirLin(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for linear direction.\n","externalName":"","help":"btSliderConstraint_getSoftnessDirLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionDirLin(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for linear direction.\n","externalName":"","help":"btSliderConstraint_getRestitutionDirLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingDirLin(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for linear direction.\n","externalName":"","help":"btSliderConstraint_getDampingDirLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessDirAng(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for angular direction.\n","externalName":"","help":"btSliderConstraint_getSoftnessDirAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionDirAng(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for angular direction.\n","externalName":"","help":"btSliderConstraint_getRestitutionDirAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingDirAng(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for angular direction.\n","externalName":"","help":"btSliderConstraint_getDampingDirAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessLimLin(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for linear limit.\n","externalName":"","help":"btSliderConstraint_getSoftnessLimLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionLimLin(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for linear limit.\n","externalName":"","help":"btSliderConstraint_getRestitutionLimLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingLimLin(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for linear limit.\n","externalName":"","help":"btSliderConstraint_getDampingLimLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessLimAng(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for angular limit.\n","externalName":"","help":"btSliderConstraint_getSoftnessLimAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionLimAng(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for angular limit.\n","externalName":"","help":"btSliderConstraint_getRestitutionLimAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingLimAng(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for angular limit.\n","externalName":"","help":"btSliderConstraint_getDampingLimAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessOrthoLin(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for orthogonal linear movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for orthogonal linear movement.\n","externalName":"","help":"btSliderConstraint_getSoftnessOrthoLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionOrthoLin(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for orthogonal linear movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for orthogonal linear movement.\n","externalName":"","help":"btSliderConstraint_getRestitutionOrthoLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingOrthoLin(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for orthogonal linear movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for orthogonal linear movement.\n","externalName":"","help":"btSliderConstraint_getDampingOrthoLin(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSoftnessOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSoftnessOrthoAng(sliderConstraint)\n///\n/// @desc\n/// Gets the softness value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the softness value for orthogonal angular movement.\n","externalName":"","help":"btSliderConstraint_getSoftnessOrthoAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getRestitutionOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getRestitutionOrthoAng(sliderConstraint)\n///\n/// @desc\n/// Gets the restitution value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the restitution value for orthogonal angular movement.\n","externalName":"","help":"btSliderConstraint_getRestitutionOrthoAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getDampingOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getDampingOrthoAng(sliderConstraint)\n///\n/// @desc\n/// Gets the damping value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the damping value for orthogonal angular movement.\n","externalName":"","help":"btSliderConstraint_getDampingOrthoAng(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessDirLin(sliderConstraint, softnessDirLin)\n///\n/// @desc\n/// Sets the softness value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessDirLin\n///     The softness value for linear direction to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessDirLin(sliderConstraint, softnessDirLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionDirLin(sliderConstraint, restitutionDirLin)\n///\n/// @desc\n/// Sets the restitution value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionDirLin\n///     The restitution value for linear direction to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionDirLin(sliderConstraint, restitutionDirLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingDirLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingDirLin(sliderConstraint, dampingDirLin)\n///\n/// @desc\n/// Sets the damping value for linear direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingDirLin\n///     The damping value for linear direction to be set.\n","externalName":"","help":"btSliderConstraint_setDampingDirLin(sliderConstraint, dampingDirLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessDirAng(sliderConstraint, softnessDirAng)\n///\n/// @desc\n/// Sets the softness value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessDirAng\n///     The softness value for angular direction to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessDirAng(sliderConstraint, softnessDirAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionDirAng(sliderConstraint, restitutionDirAng)\n///\n/// @desc\n/// Sets the restitution value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionDirAng\n///     The restitution value for angular direction to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionDirAng(sliderConstraint, restitutionDirAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingDirAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingDirAng(sliderConstraint, dampingDirAng)\n///\n/// @desc\n/// Sets the damping value for angular direction in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingDirAng\n///     The damping value for angular direction to be set.\n","externalName":"","help":"btSliderConstraint_setDampingDirAng(sliderConstraint, dampingDirAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessLimLin(sliderConstraint, softnessLimLin)\n///\n/// @desc\n/// Sets the softness value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessLimLin\n///     The softness value for linear limit to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessLimLin(sliderConstraint, softnessLimLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionLimLin(sliderConstraint, restitutionLimLin)\n///\n/// @desc\n/// Sets the restitution value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionLimLin\n///     The restitution value for linear limit to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionLimLin(sliderConstraint, restitutionLimLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingLimLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingLimLin(sliderConstraint, dampingLimLin)\n///\n/// @desc\n/// Sets the damping value for linear limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingLimLin\n///     The damping value for linear limit to be set.\n","externalName":"","help":"btSliderConstraint_setDampingLimLin(sliderConstraint, dampingLimLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessLimAng(sliderConstraint, softnessLimAng)\n///\n/// @desc\n/// Sets the softness value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessLimAng\n///     The softness value for angular limit to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessLimAng(sliderConstraint, softnessLimAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionLimAng(sliderConstraint, restitutionLimAng)\n///\n/// @desc\n/// Sets the restitution value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionLimAng\n///     The restitution value for angular limit to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionLimAng(sliderConstraint, restitutionLimAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingLimAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingLimAng(sliderConstraint, dampingLimAng)\n///\n/// @desc\n/// Sets the damping value for angular limit in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingLimAng\n///     The damping value for angular limit to be set.\n","externalName":"","help":"btSliderConstraint_setDampingLimAng(sliderConstraint, dampingLimAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessOrthoLin(sliderConstraint, softnessOrthoLin)\n///\n/// @desc\n/// Sets the softness value for orthogonal linear movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessOrthoLin\n///     The softness value for orthogonal linear movement to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessOrthoLin(sliderConstraint, softnessOrthoLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionOrthoLin(sliderConstraint, restitutionOrthoLin)\n///\n/// @desc\n/// Sets the restitution value for orthogonal linear movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionOrthoLin\n///     The restitution value for orthogonal linear movement to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionOrthoLin(sliderConstraint, restitutionOrthoLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingOrthoLin","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingOrthoLin(sliderConstraint, dampingOrthoLin)\n///\n/// @desc\n/// Sets the damping value for orthogonal linear movement in the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingOrthoLin\n///     The damping value for orthogonal linear movement to be set.\n","externalName":"","help":"btSliderConstraint_setDampingOrthoLin(sliderConstraint, dampingOrthoLin)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setSoftnessOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setSoftnessOrthoAng(sliderConstraint, softnessOrthoAng)\n///\n/// @desc\n/// Sets the softness value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} softnessOrthoAng\n///     The softness value for orthogonal angular movement to be set.\n","externalName":"","help":"btSliderConstraint_setSoftnessOrthoAng(sliderConstraint, softnessOrthoAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setRestitutionOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setRestitutionOrthoAng(sliderConstraint, restitutionOrthoAng)\n///\n/// @desc\n/// Sets the restitution value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} restitutionOrthoAng\n///     The restitution value for orthogonal angular movement to be set.\n","externalName":"","help":"btSliderConstraint_setRestitutionOrthoAng(sliderConstraint, restitutionOrthoAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setDampingOrthoAng","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setDampingOrthoAng(sliderConstraint, dampingOrthoAng)\n///\n/// @desc\n/// Sets the damping value for orthogonal angular movement in the slider\n/// constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} dampingOrthoAng\n///     The damping value for orthogonal angular movement to be set.\n","externalName":"","help":"btSliderConstraint_setDampingOrthoAng(sliderConstraint, dampingOrthoAng)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setPoweredLinMotor","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setPoweredLinMotor(sliderConstraint, onOff)\n///\n/// @desc\n/// Sets whether the linear motor for the slider constraint is powered or not.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Bool} onOff\n///     A boolean indicating whether the linear motor is powered (true) or not\n///     (false).\n","externalName":"","help":"btSliderConstraint_setPoweredLinMotor(sliderConstraint, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getPoweredLinMotor","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getPoweredLinMotor(sliderConstraint)\n///\n/// @desc\n/// Gets whether the linear motor for the slider constraint is powered or not.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} Returns a boolean indicating whether the linear motor is\n/// powered (true) or not (false).\n","externalName":"","help":"btSliderConstraint_getPoweredLinMotor(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setTargetLinMotorVelocity","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setTargetLinMotorVelocity(sliderConstraint, targetLinMotorVelocity)\n///\n/// @desc\n/// Sets the target linear motor velocity for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} targetLinMotorVelocity\n///     The target linear motor velocity to be set.\n","externalName":"","help":"btSliderConstraint_setTargetLinMotorVelocity(sliderConstraint, targetLinMotorVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getTargetLinMotorVelocity","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getTargetLinMotorVelocity(sliderConstraint)\n///\n/// @desc\n/// Gets the target linear motor velocity for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the target linear motor velocity set for the slider\n/// constraint.\n","externalName":"","help":"btSliderConstraint_getTargetLinMotorVelocity(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setMaxLinMotorForce","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setMaxLinMotorForce(sliderConstraint, maxLinMotorForce)\n///\n/// @desc\n/// Sets the maximum linear motor force for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} maxLinMotorForce\n///     The maximum linear motor force to be set.\n","externalName":"","help":"btSliderConstraint_setMaxLinMotorForce(sliderConstraint, maxLinMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getMaxLinMotorForce","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getMaxLinMotorForce(sliderConstraint)\n///\n/// @desc\n/// Gets the maximum linear motor force for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the maximum linear motor force set for the slider\n/// constraint.\n","externalName":"","help":"btSliderConstraint_getMaxLinMotorForce(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setPoweredAngMotor","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setPoweredAngMotor(sliderConstraint, onOff)\n///\n/// @desc\n/// Sets whether the angular motor for the slider constraint is powered on or\n/// off.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Bool} onOff\n///     A boolean indicating whether the angular motor is powered on (true) or\n///     off (false).\n","externalName":"","help":"btSliderConstraint_setPoweredAngMotor(sliderConstraint, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getPoweredAngMotor","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getPoweredAngMotor(sliderConstraint)\n///\n/// @desc\n/// Gets whether the angular motor for the slider constraint is powered on or\n/// off.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} Returns true if the angular motor is powered on, false if it\n/// is powered off.\n","externalName":"","help":"btSliderConstraint_getPoweredAngMotor(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setTargetAngMotorVelocity","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setTargetAngMotorVelocity(sliderConstraint, targetAngMotorVelocity)\n///\n/// @desc\n/// Sets the target angular motor velocity for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} targetAngMotorVelocity\n///     The target angular motor velocity to be set.\n","externalName":"","help":"btSliderConstraint_setTargetAngMotorVelocity(sliderConstraint, targetAngMotorVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getTargetAngMotorVelocity","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getTargetAngMotorVelocity(sliderConstraint)\n///\n/// @desc\n/// Gets the target angular motor velocity for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the target angular motor velocity.\n","externalName":"","help":"btSliderConstraint_getTargetAngMotorVelocity(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setMaxAngMotorForce","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setMaxAngMotorForce(sliderConstraint, maxAngMotorForce)\n///\n/// @desc\n/// Sets the maximum angular motor force for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Real} maxAngMotorForce\n///     The maximum angular motor force to be set.\n","externalName":"","help":"btSliderConstraint_setMaxAngMotorForce(sliderConstraint, maxAngMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getMaxAngMotorForce","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getMaxAngMotorForce(sliderConstraint)\n///\n/// @desc\n/// Gets the maximum angular motor force for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the maximum angular motor force.\n","externalName":"","help":"btSliderConstraint_getMaxAngMotorForce(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getLinearPos","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getLinearPos(sliderConstraint)\n///\n/// @desc\n/// Gets the linear position of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the linear position.\n","externalName":"","help":"btSliderConstraint_getLinearPos(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getAngularPos","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getAngularPos(sliderConstraint)\n///\n/// @desc\n/// Gets the angular position of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the angular position.\n","externalName":"","help":"btSliderConstraint_getAngularPos(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSolveLinLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSolveLinLimit(sliderConstraint)\n///\n/// @desc\n/// Gets whether the linear limits are being solved for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} Returns true if the linear limits are being solved, false\n/// otherwise.\n","externalName":"","help":"btSliderConstraint_getSolveLinLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getLinDepth","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getLinDepth(sliderConstraint)\n///\n/// @desc\n/// Gets the linear depth of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the linear depth.\n","externalName":"","help":"btSliderConstraint_getLinDepth(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getSolveAngLimit","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getSolveAngLimit(sliderConstraint)\n///\n/// @desc\n/// Gets whether the angular limits are being solved for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} Returns true if the angular limits are being solved, false\n/// otherwise.\n","externalName":"","help":"btSliderConstraint_getSolveAngLimit(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getAngDepth","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getAngDepth(sliderConstraint)\n///\n/// @desc\n/// Gets the angular depth of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns the angular depth.\n","externalName":"","help":"btSliderConstraint_getAngDepth(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_calculateTransforms","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_calculateTransforms(sliderConstraint, transA, transB)\n///\n/// @desc\n/// Calculates and updates the transforms associated with the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Pointer} transA\n///     A pointer to a btTransform representing the transform of the first body.\n/// @param {Pointer} transB\n///     A pointer to a btTransform representing the transform of the second body.\n","externalName":"","help":"btSliderConstraint_calculateTransforms(sliderConstraint, transA, transB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_testLinLimits","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_testLinLimits(sliderConstraint)\n///\n/// @desc\n/// Tests and enforces the linear limits of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n","externalName":"","help":"btSliderConstraint_testLinLimits(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_testAngLimits","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_testAngLimits(sliderConstraint)\n///\n/// @desc\n/// Tests and enforces the angular limits of the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n","externalName":"","help":"btSliderConstraint_testAngLimits(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getAncorInA","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getAncorInA(sliderConstraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point in the local frame of body A associated with the\n/// slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the anchor point in the local frame of\n///     body A will be copied.\n","externalName":"","help":"btSliderConstraint_getAncorInA(sliderConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getAncorInB","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getAncorInB(sliderConstraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point in the local frame of body B associated with the\n/// slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the anchor point in the local frame of\n///     body B will be copied.\n","externalName":"","help":"btSliderConstraint_getAncorInB(sliderConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getUseFrameOffset(sliderConstraint)\n///\n/// @desc\n/// Gets whether the constraint uses frame offset.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n///\n/// @return {Bool} True if the constraint uses frame offset, false otherwise.\n","externalName":"","help":"btSliderConstraint_getUseFrameOffset(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setUseFrameOffset","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setUseFrameOffset(sliderConstraint, frameOffsetOnOff)\n///\n/// @desc\n/// Sets whether the constraint uses frame offset.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Bool} frameOffsetOnOff\n///     True to enable frame offset, false to disable.\n","externalName":"","help":"btSliderConstraint_setUseFrameOffset(sliderConstraint, frameOffsetOnOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_setFrames","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_setFrames(sliderConstraint, frameA, frameB)\n///\n/// @desc\n/// Sets the frames for the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     A pointer to the btSliderConstraint instance.\n/// @param {Pointer} frameA\n///     A pointer to a btTransform representing the frame for body A.\n/// @param {Pointer} frameB\n///     A pointer to a btTransform representing the frame for body B.\n","externalName":"","help":"btSliderConstraint_setFrames(sliderConstraint, frameA, frameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btSliderConstraint_getFlags","argCount":0,"args":[],"documentation":"/// @func btSliderConstraint_getFlags(sliderConstraint)\n///\n/// @desc\n/// Gets the current flags associated with the slider constraint.\n///\n/// @param {Pointer} sliderConstraint\n///     Pointer to the btSliderConstraint instance.\n///\n/// @return {Real} Returns a numeric value representing the current flags of the\n/// slider constraint.\n","externalName":"","help":"btSliderConstraint_getFlags(sliderConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_create","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_create(rigidBodyA, rigidBodyB, axisInA, axisInB[, ratio])\n///\n/// @desc\n/// Creates a gear constraint between two rigid bodies.\n///\n/// @param {Pointer} rigidBodyA\n///     A pointer to the first btRigidBody involved in the gear constraint.\n/// @param {Pointer} rigidBodyB\n///     A pointer to the second btRigidBody involved in the gear constraint.\n/// @param {Pointer} axisInA\n///     A pointer to the axis (btVector3) for the first body.\n/// @param {Pointer} axisInB\n///     A pointer to the axis (btVector3) for the second body.\n/// @param {Real} [ratio]\n///     The gear ratio. Defaults to 1.0 if not provided.\n///\n/// @return {Pointer} A pointer to the created btGearConstraint.\n","externalName":"","help":"btGearConstraint_create(rigidBodyA, rigidBodyB, axisInA, axisInB[, ratio])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_destroy(gearConstraint)\n///\n/// @desc\n/// Destroys a btGearConstraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance to destroy.\n","externalName":"","help":"btGearConstraint_destroy(gearConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_setAxisA","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_setAxisA(gearConstraint, axisA)\n///\n/// @desc\n/// Sets the axis for the first body in the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n/// @param {Pointer} axisA\n///     A pointer to a btVector3 representing the axis for the first body.\n","externalName":"","help":"btGearConstraint_setAxisA(gearConstraint, axisA)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_setAxisB","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_setAxisB(gearConstraint, axisB)\n///\n/// @desc\n/// Sets the axis for the second body in the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n/// @param {Pointer} axisB\n///     A pointer to a btVector3 representing the axis for the second body.\n","externalName":"","help":"btGearConstraint_setAxisB(gearConstraint, axisB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_setRatio","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_setRatio(gearConstraint, ratio)\n///\n/// @desc\n/// Sets the gear ratio for the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n/// @param {Real} ratio\n///     The gear ratio to set.\n","externalName":"","help":"btGearConstraint_setRatio(gearConstraint, ratio)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_getAxisA","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_getAxisA(gearConstraint, outVector3)\n///\n/// @desc\n/// Gets the axis for the first body in the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the axis of the first body.\n","externalName":"","help":"btGearConstraint_getAxisA(gearConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_getAxisB","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_getAxisB(gearConstraint, outVector3)\n///\n/// @desc\n/// Gets the axis for the second body in the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the axis of the second body.\n","externalName":"","help":"btGearConstraint_getAxisB(gearConstraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGearConstraint_getRatio","argCount":0,"args":[],"documentation":"/// @func btGearConstraint_getRatio(gearConstraint)\n///\n/// @desc\n/// Gets the gear ratio for the gear constraint.\n///\n/// @param {Pointer} gearConstraint\n///     A pointer to the btGearConstraint instance.\n///\n/// @return {Real} The gear ratio.\n","externalName":"","help":"btGearConstraint_getRatio(gearConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btFixedConstraint_create","argCount":0,"args":[],"documentation":"/// @func btFixedConstraint_create(rigidBodyA, rigidBodyB, frameInA, frameInB)\n///\n/// @desc\n/// Creates a fixed constraint between two rigid bodies.\n///\n/// @param {Pointer} rigidBodyA\n///     A pointer to the first btRigidBody involved in the fixed constraint.\n/// @param {Pointer} rigidBodyB\n///     A pointer to the second btRigidBody involved in the fixed constraint.\n/// @param {Pointer} frameInA\n///     A pointer to a btTransform specifying the transform of the first body.\n/// @param {Pointer} frameInB\n///     A pointer to a btTransform specifying the transform of the second body.\n///\n/// @return {Pointer} A pointer to the created btFixedConstraint.\n","externalName":"","help":"btFixedConstraint_create(rigidBodyA, rigidBodyB, frameInA, frameInB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btFixedConstraint_destroy","argCount":0,"args":[],"documentation":"/// @func btFixedConstraint_destroy(fixedConstraint)\n///\n/// @desc\n/// Destroys a btFixedConstraint.\n///\n/// @param {Pointer} fixedConstraint\n///     A pointer to the btFixedConstraint instance to destroy.\n","externalName":"","help":"btFixedConstraint_destroy(fixedConstraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_create","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_create(rigidBodyA, rigidBodyB, anchor, axis1, axis2)\n///\n/// @desc\n/// Creates a btHinge2Constraint between two rigid bodies using specified anchor\n/// and axis vectors.\n///\n/// @param {Pointer} rigidBodyA\n///     A pointer to the first btRigidBody.\n/// @param {Pointer} rigidBodyB\n///     A pointer to the second btRigidBody.\n/// @param {Pointer} anchor\n///     A pointer to a btVector3 representing the anchor point in world space.\n/// @param {Pointer} axis1\n///     A pointer to the primary axis of rotation represented as a btVector3 in\n///     world space.\n/// @param {Pointer} axis2\n///     A pointer to the secondary axis of rotation represented as a btVector3\n///     in world space.\n///\n/// @return {Pointer} A pointer to the created btHinge2Constraint.\n","externalName":"","help":"btHinge2Constraint_create(rigidBodyA, rigidBodyB, anchor, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_destroy","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_destroy(hinge2Constraint)\n///\n/// @desc\n/// Destroys the specified btHinge2Constraint.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint to be destroyed.\n","externalName":"","help":"btHinge2Constraint_destroy(hinge2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAnchor","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAnchor(hinge2Constraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point for the first rigid body connected by the hinge\n/// constraint.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the anchor point (output).\n","externalName":"","help":"btHinge2Constraint_getAnchor(hinge2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAnchor2","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAnchor2(hinge2Constraint, outVector3)\n///\n/// @desc\n/// Gets the anchor point for the second rigid body connected by the hinge\n/// constraint.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the anchor point (output).\n","externalName":"","help":"btHinge2Constraint_getAnchor2(hinge2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAxis1","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAxis1(hinge2Constraint, outVector3)\n///\n/// @desc\n/// Gets the primary axis of rotation for the hinge constraint.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the axis (output).\n","externalName":"","help":"btHinge2Constraint_getAxis1(hinge2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAxis2","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAxis2(hinge2Constraint, outVector3)\n///\n/// @desc\n/// Gets the secondary axis of rotation for the hinge constraint.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the axis (output).\n","externalName":"","help":"btHinge2Constraint_getAxis2(hinge2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAngle1","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAngle1(hinge2Constraint)\n///\n/// @desc\n/// Gets the current angle around the primary axis of rotation.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n///\n/// @return {Real} The current angle in radians around the primary axis of\n/// rotation.\n","externalName":"","help":"btHinge2Constraint_getAngle1(hinge2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_getAngle2","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_getAngle2(hinge2Constraint)\n///\n/// @desc\n/// Gets the current angle around the secondary axis of rotation.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n///\n/// @return {Real} The current angle in radians around the secondary axis of\n/// rotation.\n","externalName":"","help":"btHinge2Constraint_getAngle2(hinge2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_setUpperLimit","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_setUpperLimit(hinge2Constraint, ang1max)\n///\n/// @desc\n/// Sets the upper limit for the angle around the primary axis of rotation.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Real} ang1max\n///     The upper limit for the angle in radians.\n","externalName":"","help":"btHinge2Constraint_setUpperLimit(hinge2Constraint, ang1max)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btHinge2Constraint_setLowerLimit","argCount":0,"args":[],"documentation":"/// @func btHinge2Constraint_setLowerLimit(hinge2Constraint, ang1min)\n///\n/// @desc\n/// Sets the lower limit for the angle around the primary axis of rotation.\n///\n/// @param {Pointer} hinge2Constraint\n///     A pointer to the btHinge2Constraint.\n/// @param {Real} ang1min\n///     The lower limit for the angle in radians.\n","externalName":"","help":"btHinge2Constraint_setLowerLimit(hinge2Constraint, ang1min)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setLoLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setLoLimit(rotationalLimitMotor2, loLimit)\n///\n/// @desc\n/// Sets the lower limit for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} loLimit\n///     The lower limit for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setLoLimit(rotationalLimitMotor2, loLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getLoLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getLoLimit(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the lower limit for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The lower limit for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getLoLimit(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setHiLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setHiLimit(rotationalLimitMotor2, hiLimit)\n///\n/// @desc\n/// Sets the upper limit for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} hiLimit\n///     The upper limit for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setHiLimit(rotationalLimitMotor2, hiLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getHiLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getHiLimit(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the upper limit for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The upper limit for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getHiLimit(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setBounce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setBounce(rotationalLimitMotor2, bounce)\n///\n/// @desc\n/// Sets the bounce factor for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} bounce\n///     The bounce factor for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setBounce(rotationalLimitMotor2, bounce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getBounce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getBounce(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the bounce factor for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The bounce factor for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getBounce(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setStopERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setStopERP(rotationalLimitMotor2, stopERP)\n///\n/// @desc\n/// Sets the stop ERP (Error Reduction Parameter) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} stopERP\n///     The stop ERP for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setStopERP(rotationalLimitMotor2, stopERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getStopERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getStopERP(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the stop ERP (Error Reduction Parameter) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The stop ERP for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getStopERP(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setStopCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setStopCFM(rotationalLimitMotor2, stopCFM)\n///\n/// @desc\n/// Sets the stop CFM (Constraint Force Mixing) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} stopCFM\n///     The stop CFM for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setStopCFM(rotationalLimitMotor2, stopCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getStopCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getStopCFM(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the stop CFM (Constraint Force Mixing) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The stop CFM for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getStopCFM(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setMotorERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setMotorERP(rotationalLimitMotor2, motorERP)\n///\n/// @desc\n/// Sets the motor ERP (Error Reduction Parameter) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} motorERP\n///     The motor ERP for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setMotorERP(rotationalLimitMotor2, motorERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getMotorERP","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getMotorERP(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the motor ERP (Error Reduction Parameter) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The motor ERP for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getMotorERP(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setMotorCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setMotorCFM(rotationalLimitMotor2, motorCFM)\n///\n/// @desc\n/// Sets the motor CFM (Constraint Force Mixing) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} motorCFM\n///     The motor CFM for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_setMotorCFM(rotationalLimitMotor2, motorCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getMotorCFM","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getMotorCFM(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the motor CFM (Constraint Force Mixing) for the rotational motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The motor CFM for the rotational motor.\n","externalName":"","help":"btRotationalLimitMotor2_getMotorCFM(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setEnableMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setEnableMotor(rotationalLimitMotor2, enableMotor)\n///\n/// @desc\n/// Sets whether the motor for the rotational limit is enabled or not.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Bool} enableMotor\n///     A boolean value indicating whether the motor is enabled (true) or\n///     disabled (false).\n","externalName":"","help":"btRotationalLimitMotor2_setEnableMotor(rotationalLimitMotor2, enableMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getEnableMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getEnableMotor(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets whether the motor for the rotational limit is enabled or not.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} A boolean value indicating whether the motor is enabled (true)\n/// or disabled (false).\n","externalName":"","help":"btRotationalLimitMotor2_getEnableMotor(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setTargetVelocity(rotationalLimitMotor2, targetVelocity)\n///\n/// @desc\n/// Sets the target velocity for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} targetVelocity\n///     The desired target velocity for the motor.\n","externalName":"","help":"btRotationalLimitMotor2_setTargetVelocity(rotationalLimitMotor2, targetVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getTargetVelocity(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the target velocity for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The target velocity set for the motor.\n","externalName":"","help":"btRotationalLimitMotor2_getTargetVelocity(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setMaxMotorForce(rotationalLimitMotor2, maxMotorForce)\n///\n/// @desc\n/// Sets the maximum motor force for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} maxMotorForce\n///     The maximum motor force for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setMaxMotorForce(rotationalLimitMotor2, maxMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getMaxMotorForce(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the maximum motor force for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The maximum motor force for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getMaxMotorForce(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setServoMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setServoMotor(rotationalLimitMotor2, servoMotor)\n///\n/// @desc\n/// Sets whether the rotational limit motor is a servo motor or not.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Bool} servoMotor\n///     A boolean indicating whether the rotational limit motor is a servo motor\n///     (true) or not (false).\n","externalName":"","help":"btRotationalLimitMotor2_setServoMotor(rotationalLimitMotor2, servoMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getServoMotor","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getServoMotor(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets whether the rotational limit motor is a servo motor or not.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} A boolean indicating whether the rotational limit motor is a\n/// servo motor (true) or not (false).\n","externalName":"","help":"btRotationalLimitMotor2_getServoMotor(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setServoTarget","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setServoTarget(rotationalLimitMotor2, servoTarget)\n///\n/// @desc\n/// Sets the target angle for the servo motor in the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} servoTarget\n///     The target angle for the servo motor in radians.\n","externalName":"","help":"btRotationalLimitMotor2_setServoTarget(rotationalLimitMotor2, servoTarget)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getServoTarget","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getServoTarget(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the target angle for the servo motor in the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The target angle for the servo motor in radians.\n","externalName":"","help":"btRotationalLimitMotor2_getServoTarget(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setEnableSpring","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setEnableSpring(rotationalLimitMotor2, enableSpring)\n///\n/// @desc\n/// Sets whether the spring effect is enabled in the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Bool} enableSpring\n///     Boolean indicating whether the spring effect is enabled (true) or\n///     disabled (false).\n","externalName":"","help":"btRotationalLimitMotor2_setEnableSpring(rotationalLimitMotor2, enableSpring)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getEnableSpring","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getEnableSpring(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets whether the spring effect is enabled in the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} True if the spring effect is enabled, false otherwise.\n","externalName":"","help":"btRotationalLimitMotor2_getEnableSpring(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setSpringStiffness","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setSpringStiffness(rotationalLimitMotor2, springStiffness)\n///\n/// @desc\n/// Sets the spring stiffness of the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} springStiffness\n///     The spring stiffness to set for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setSpringStiffness(rotationalLimitMotor2, springStiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getSpringStiffness","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getSpringStiffness(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the spring stiffness of the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The spring stiffness of the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getSpringStiffness(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setSpringStiffnessLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setSpringStiffnessLimited(rotationalLimitMotor2, springStiffnessLimited)\n///\n/// @desc\n/// Sets whether the spring stiffness of the rotational limit motor is limited.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Bool} springStiffnessLimited\n///     A boolean indicating whether the spring stiffness is limited for the\n///     rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setSpringStiffnessLimited(rotationalLimitMotor2, springStiffnessLimited)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getSpringStiffnessLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getSpringStiffnessLimited(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets whether the spring stiffness of the rotational limit motor is limited.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} A boolean indicating whether the spring stiffness is limited\n/// for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getSpringStiffnessLimited(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setSpringDamping","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setSpringDamping(rotationalLimitMotor2, springDamping)\n///\n/// @desc\n/// Sets the spring damping for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} springDamping\n///     The value to set as the spring damping for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setSpringDamping(rotationalLimitMotor2, springDamping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getSpringDamping","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getSpringDamping(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the spring damping of the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The spring damping of the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getSpringDamping(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setSpringDampingLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setSpringDampingLimited(rotationalLimitMotor2, springDampingLimited)\n///\n/// @desc\n/// Sets whether spring damping is limited for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Bool} springDampingLimited\n///     A boolean value indicating whether spring damping is limited.\n","externalName":"","help":"btRotationalLimitMotor2_setSpringDampingLimited(rotationalLimitMotor2, springDampingLimited)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getSpringDampingLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getSpringDampingLimited(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets whether spring damping is limited for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} A boolean value indicating whether spring damping is limited.\n","externalName":"","help":"btRotationalLimitMotor2_getSpringDampingLimited(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setEquilibriumPoint(rotationalLimitMotor2, equilibriumPoint)\n///\n/// @desc\n/// Sets the equilibrium point for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} equilibriumPoint\n///     The equilibrium point for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setEquilibriumPoint(rotationalLimitMotor2, equilibriumPoint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getEquilibriumPoint(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the equilibrium point for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The equilibrium point for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getEquilibriumPoint(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setCurrentLimitError(rotationalLimitMotor2, currentLimitError)\n///\n/// @desc\n/// Sets the current limit error for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} currentLimitError\n///     The current limit error for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setCurrentLimitError(rotationalLimitMotor2, currentLimitError)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getCurrentLimitError(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the current limit error for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The current limit error for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getCurrentLimitError(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setCurrentLimitErrorHi","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setCurrentLimitErrorHi(rotationalLimitMotor2, currentLimitErrorHi)\n///\n/// @desc\n/// Sets the high current limit error for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} currentLimitErrorHi\n///     The high current limit error for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setCurrentLimitErrorHi(rotationalLimitMotor2, currentLimitErrorHi)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getCurrentLimitErrorHi","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getCurrentLimitErrorHi(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the high current limit error for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The high current limit error for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getCurrentLimitErrorHi(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setCurrentPosition","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setCurrentPosition(rotationalLimitMotor2, currentPosition)\n///\n/// @desc\n/// Sets the current position for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} currentPosition\n///     The current position for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setCurrentPosition(rotationalLimitMotor2, currentPosition)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getCurrentPosition","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getCurrentPosition(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the current position for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The current position for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getCurrentPosition(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_setCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_setCurrentLimit(rotationalLimitMotor2, currentLimit)\n///\n/// @desc\n/// Sets the current limit for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} currentLimit\n///     The current limit for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_setCurrentLimit(rotationalLimitMotor2, currentLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_getCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_getCurrentLimit(rotationalLimitMotor2)\n///\n/// @desc\n/// Gets the current limit for the rotational limit motor.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Real} The current limit for the rotational limit motor.\n","externalName":"","help":"btRotationalLimitMotor2_getCurrentLimit(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_isLimited","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_isLimited(rotationalLimitMotor2)\n///\n/// @desc\n/// Checks whether the rotational limit motor is currently limited.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n///\n/// @return {Bool} Returns true if the rotational limit motor is limited, false\n/// otherwise.\n","externalName":"","help":"btRotationalLimitMotor2_isLimited(rotationalLimitMotor2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btRotationalLimitMotor2_testLimitValue","argCount":0,"args":[],"documentation":"/// @func btRotationalLimitMotor2_testLimitValue(rotationalLimitMotor2, testValue)\n///\n/// @desc\n/// Tests a given value against the rotational limit to determine if it's within\n/// the limits.\n///\n/// @param {Pointer} rotationalLimitMotor2\n///     A pointer to the btRotationalLimitMotor2.\n/// @param {Real} testValue\n///     The value to be tested against the rotational limit.\n","externalName":"","help":"btRotationalLimitMotor2_testLimitValue(rotationalLimitMotor2, testValue)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setLowerLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setLowerLimit(translationalLimitMotor2, lowerLimit)\n///\n/// @desc\n/// Sets the lower limit for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} lowerLimit\n///     A pointer to a btVector3 representing the lower limit.\n","externalName":"","help":"btTranslationalLimitMotor2_setLowerLimit(translationalLimitMotor2, lowerLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getLowerLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getLowerLimit(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the lower limit of the translational limit motor and stores it in the\n/// provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the lower limit.\n","externalName":"","help":"btTranslationalLimitMotor2_getLowerLimit(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setUpperLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setUpperLimit(translationalLimitMotor2, upperLimit)\n///\n/// @desc\n/// Sets the upper limit for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} upperLimit\n///     A pointer to a btVector3 representing the upper limit.\n","externalName":"","help":"btTranslationalLimitMotor2_setUpperLimit(translationalLimitMotor2, upperLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getUpperLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getUpperLimit(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the upper limit of the translational limit motor and stores it in the\n/// provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the upper limit.\n","externalName":"","help":"btTranslationalLimitMotor2_getUpperLimit(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setBounce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setBounce(translationalLimitMotor2, bounce)\n///\n/// @desc\n/// Sets the bounce parameters for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} bounce\n///     A pointer to a btVector3 representing the bounce parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_setBounce(translationalLimitMotor2, bounce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getBounce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getBounce(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the bounce parameters of the translational limit motor and stores them\n/// in the provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the bounce parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_getBounce(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setStopERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setStopERP(translationalLimitMotor2, stopERP)\n///\n/// @desc\n/// Sets the stop ERP (Error Reduction Parameter) for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} stopERP\n///     A pointer to a btVector3 representing the stop ERP parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_setStopERP(translationalLimitMotor2, stopERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getStopERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getStopERP(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the stop ERP (Error Reduction Parameter) of the translational limit\n/// motor and stores them in the provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the stop ERP parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_getStopERP(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setStopCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setStopCFM(translationalLimitMotor2, stopCFM)\n///\n/// @desc\n/// Sets the stop CFM (Constraint Force Mixing) for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} stopCFM\n///     A pointer to a btVector3 representing the stop CFM parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_setStopCFM(translationalLimitMotor2, stopCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getStopCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getStopCFM(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the stop CFM (Constraint Force Mixing) of the translational limit motor\n/// and stores them in the provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the stop CFM parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_getStopCFM(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setMotorERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setMotorERP(translationalLimitMotor2, motorERP)\n///\n/// @desc\n/// Sets the motor ERP (Error Reduction Parameter) for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} motorERP\n///     A pointer to a btVector3 representing the motor ERP parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_setMotorERP(translationalLimitMotor2, motorERP)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getMotorERP","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getMotorERP(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the motor ERP (Error Reduction Parameter) of the translational limit\n/// motor and stores them in the provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the motor ERP parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_getMotorERP(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setMotorCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setMotorCFM(translationalLimitMotor2, motorCFM)\n///\n/// @desc\n/// Sets the motor CFM (Constraint Force Mixing) for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} motorCFM\n///     A pointer to a btVector3 representing the motor CFM parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_setMotorCFM(translationalLimitMotor2, motorCFM)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getMotorCFM","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getMotorCFM(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the motor CFM (Constraint Force Mixing) of the translational limit\n/// motor and stores them in the provided vector.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the motor CFM parameters.\n","externalName":"","help":"btTranslationalLimitMotor2_getMotorCFM(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setEnableMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setEnableMotor(translationalLimitMotor2, index, enableMotor)\n///\n/// @desc\n/// Sets whether the specified motor is enabled or disabled for the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to enable or disable.\n/// @param {Bool} enableMotor\n///     A boolean indicating whether the motor should be enabled (true) or\n///     disabled (false).\n","externalName":"","help":"btTranslationalLimitMotor2_setEnableMotor(translationalLimitMotor2, index, enableMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getEnableMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getEnableMotor(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets whether the specified motor is enabled or disabled for the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to check.\n///\n/// @return {Bool} Returns true if the motor at the specified index is enabled,\n/// false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor2_getEnableMotor(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setServoMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setServoMotor(translationalLimitMotor2, index, servoMotor)\n///\n/// @desc\n/// Sets whether the specified motor uses servo control in the translational\n/// limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to set servo control for.\n/// @param {Bool} servoMotor\n///     A boolean indicating whether the motor should use servo control (true)\n///     or not (false).\n","externalName":"","help":"btTranslationalLimitMotor2_setServoMotor(translationalLimitMotor2, index, servoMotor)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getServoMotor","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getServoMotor(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets whether the specified motor uses servo control in the translational\n/// limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to check for servo control.\n///\n/// @return {Bool} Returns true if the motor at the specified index uses servo\n/// control, false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor2_getServoMotor(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setEnableSpring","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setEnableSpring(translationalLimitMotor2, index, enableSpring)\n///\n/// @desc\n/// Sets whether the specified motor uses spring in the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to set spring usage for.\n/// @param {Bool} enableSpring\n///     A boolean indicating whether the motor should use spring (true) or not\n///     (false).\n","externalName":"","help":"btTranslationalLimitMotor2_setEnableSpring(translationalLimitMotor2, index, enableSpring)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getEnableSpring","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getEnableSpring(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets whether the specified motor uses spring in the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the motor to check for spring usage.\n///\n/// @return {Bool} Returns true if the motor at the specified index uses spring,\n/// false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor2_getEnableSpring(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setServoTarget","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setServoTarget(translationalLimitMotor2, servoTarget)\n///\n/// @desc\n/// Sets the servo target for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} servoTarget\n///     A pointer to a btVector3 representing the target for the servo.\n","externalName":"","help":"btTranslationalLimitMotor2_setServoTarget(translationalLimitMotor2, servoTarget)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getServoTarget","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getServoTarget(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the servo target for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the servo target.\n","externalName":"","help":"btTranslationalLimitMotor2_getServoTarget(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setSpringStiffness","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setSpringStiffness(translationalLimitMotor2, springStiffness)\n///\n/// @desc\n/// Sets the spring stiffness for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} springStiffness\n///     A pointer to a btVector3 representing the spring stiffness.\n","externalName":"","help":"btTranslationalLimitMotor2_setSpringStiffness(translationalLimitMotor2, springStiffness)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getSpringStiffness","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getSpringStiffness(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the spring stiffness for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the spring stiffness.\n","externalName":"","help":"btTranslationalLimitMotor2_getSpringStiffness(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setSpringStiffnessLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setSpringStiffnessLimited(translationalLimitMotor2, index, springStiffnessLimited)\n///\n/// @desc\n/// Sets whether the spring stiffness is limited for a specific axis of the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the axis for which spring stiffness limitation is being set.\n/// @param {Bool} springStiffnessLimited\n///     A boolean indicating whether spring stiffness is limited for the\n///     specified axis.\n","externalName":"","help":"btTranslationalLimitMotor2_setSpringStiffnessLimited(translationalLimitMotor2, index, springStiffnessLimited)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getSpringStiffnessLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getSpringStiffnessLimited(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets whether the spring stiffness is limited for a specific axis of the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index of the axis for which spring stiffness limitation is being\n///     queried.\n///\n/// @return {Bool} Returns true if spring stiffness is limited for the specified\n/// axis, otherwise false.\n","externalName":"","help":"btTranslationalLimitMotor2_getSpringStiffnessLimited(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setSpringDamping","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setSpringDamping(translationalLimitMotor2, springDamping)\n///\n/// @desc\n/// Sets the spring damping values for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} springDamping\n///     A pointer to a btVector3 representing the spring damping values along\n///     the three axes.\n","externalName":"","help":"btTranslationalLimitMotor2_setSpringDamping(translationalLimitMotor2, springDamping)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getSpringDamping","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getSpringDamping(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the spring damping values for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the spring damping values along the\n///     three axes.\n","externalName":"","help":"btTranslationalLimitMotor2_getSpringDamping(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setSpringDampingLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setSpringDampingLimited(translationalLimitMotor2, index, springDampingLimited)\n///\n/// @desc\n/// Sets whether spring damping is limited for a specific axis of the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index representing the axis (0 for x, 1 for y, 2 for z) for which to\n///     set the spring damping limit.\n/// @param {Bool} springDampingLimited\n///     A boolean indicating whether the spring damping is limited for the\n///     specified axis.\n","externalName":"","help":"btTranslationalLimitMotor2_setSpringDampingLimited(translationalLimitMotor2, index, springDampingLimited)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getSpringDampingLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getSpringDampingLimited(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets whether spring damping is limited for a specific axis of the\n/// translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n///\n/// @param {Real} index\n///     The index representing the axis (0 for x, 1 for y, 2 for z) for which to\n///     get the spring damping limit.\n///\n/// @return {Bool} Returns true if spring damping is limited for the specified\n/// axis, false otherwise.\n","externalName":"","help":"btTranslationalLimitMotor2_getSpringDampingLimited(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setEquilibriumPoint(translationalLimitMotor2, equilibriumPoint)\n///\n/// @desc\n/// Sets the equilibrium point for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} equilibriumPoint\n///     A pointer to a btVector3 representing the equilibrium point to set.\n","externalName":"","help":"btTranslationalLimitMotor2_setEquilibriumPoint(translationalLimitMotor2, equilibriumPoint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getEquilibriumPoint(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the equilibrium point for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the equilibrium point will be copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getEquilibriumPoint(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setTargetVelocity(translationalLimitMotor2, targetVelocity)\n///\n/// @desc\n/// Sets the target velocity for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} targetVelocity\n///     A pointer to a btVector3 representing the target velocity to set.\n","externalName":"","help":"btTranslationalLimitMotor2_setTargetVelocity(translationalLimitMotor2, targetVelocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getTargetVelocity(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the target velocity for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the target velocity will be copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getTargetVelocity(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setMaxMotorForce(translationalLimitMotor2, maxMotorForce)\n///\n/// @desc\n/// Sets the maximum motor force for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} maxMotorForce\n///     A pointer to a btVector3 representing the maximum motor force to set.\n","externalName":"","help":"btTranslationalLimitMotor2_setMaxMotorForce(translationalLimitMotor2, maxMotorForce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getMaxMotorForce(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the maximum motor force for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the maximum motor force will be copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getMaxMotorForce(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setCurrentLimitError(translationalLimitMotor2, currentLimitError)\n///\n/// @desc\n/// Sets the current limit error for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} currentLimitError\n///     A pointer to a btVector3 representing the current limit error to set.\n","externalName":"","help":"btTranslationalLimitMotor2_setCurrentLimitError(translationalLimitMotor2, currentLimitError)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getCurrentLimitError","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getCurrentLimitError(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the current limit error for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the current limit error will be copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getCurrentLimitError(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setCurrentLimitErrorHi","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setCurrentLimitErrorHi(translationalLimitMotor2, currentLimitErrorHi)\n///\n/// @desc\n/// Sets the high value of the current limit error for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} currentLimitErrorHi\n///     A pointer to a btVector3 representing the high value of the current\n///     limit error to set.\n","externalName":"","help":"btTranslationalLimitMotor2_setCurrentLimitErrorHi(translationalLimitMotor2, currentLimitErrorHi)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getCurrentLimitErrorHi","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getCurrentLimitErrorHi(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the high value of the current limit error for the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the high value of the current limit error\n///     will be copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getCurrentLimitErrorHi(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setCurrentLinearDiff","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setCurrentLinearDiff(translationalLimitMotor2, currentLinearDiff)\n///\n/// @desc\n/// Sets the current linear difference for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} currentLinearDiff\n///     A pointer to a btVector3 representing the current linear difference to\n///     set.\n","externalName":"","help":"btTranslationalLimitMotor2_setCurrentLinearDiff(translationalLimitMotor2, currentLinearDiff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getCurrentLinearDiff","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getCurrentLinearDiff(translationalLimitMotor2, outVector3)\n///\n/// @desc\n/// Gets the current linear difference for the translational limit motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 where the current linear difference will be\n///     copied.\n","externalName":"","help":"btTranslationalLimitMotor2_getCurrentLinearDiff(translationalLimitMotor2, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_setCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_setCurrentLimit(translationalLimitMotor2, index, currentLimit)\n///\n/// @desc\n/// Sets the current limit for a specified index of the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index for which the current limit should be set.\n/// @param {Real} currentLimit\n///     The current limit to set for the specified index.\n","externalName":"","help":"btTranslationalLimitMotor2_setCurrentLimit(translationalLimitMotor2, index, currentLimit)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_getCurrentLimit","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_getCurrentLimit(translationalLimitMotor2, index)\n///\n/// @desc\n/// Gets the current limit for a specified index of the translational limit\n/// motor.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} index\n///     The index for which the current limit should be retrieved.\n///\n/// @return {Real} The current limit for the specified index.\n","externalName":"","help":"btTranslationalLimitMotor2_getCurrentLimit(translationalLimitMotor2, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_isLimited","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_isLimited(translationalLimitMotor2, limitIndex)\n///\n/// @desc\n/// Checks if a translational limit motor is limited at a specified index.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} limitIndex\n///     The index to check if the limit motor is limited.\n///\n/// @return {Bool} Returns true if the translational limit motor is limited at\n/// the specified index, otherwise false.\n","externalName":"","help":"btTranslationalLimitMotor2_isLimited(translationalLimitMotor2, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btTranslationalLimitMotor2_testLimitValue","argCount":0,"args":[],"documentation":"/// @func btTranslationalLimitMotor2_testLimitValue(translationalLimitMotor2, limitIndex, testValue)\n///\n/// @desc\n/// Tests a limit value for a translational limit motor at a specified index.\n///\n/// @param {Pointer} translationalLimitMotor2\n///     A pointer to the btTranslationalLimitMotor2.\n/// @param {Real} limitIndex\n///     The index for which the limit value is being tested.\n/// @param {Real} testValue\n///     The value to test against the limit at the specified index.\n","externalName":"","help":"btTranslationalLimitMotor2_testLimitValue(translationalLimitMotor2, limitIndex, testValue)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_create1","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_create1(rigidBodyB, frameInB[, rotOrder])\n///\n/// @desc\n/// Creates a generic 6-degree-of-freedom spring constraint with a single rigid\n/// body and a frame in B's local coordinate system.\n///\n/// @param {Pointer} rigidBodyB\n///     A pointer to the rigid body B.\n/// @param {Pointer} frameInB\n///     A pointer to the transformation matrix representing the frame in B's\n///     local coordinate system.\n/// @param {Real} [rotOrder]\n///     An optional parameter specifying the rotation order for the constraint.\n///     Default is RO_XYZ.\n///\n/// @return {Pointer} Returns a pointer to the created\n/// btGeneric6DofSpring2Constraint.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_create1(rigidBodyB, frameInB[, rotOrder])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_create2","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB[, rotOrder])\n///\n/// @desc\n/// Creates a generic 6-degree-of-freedom spring constraint with two rigid\n/// bodies and frames in A and B's local coordinate systems.\n///\n/// @param {Pointer} rigidBodyA\n///     A pointer to the rigid body A.\n/// @param {Pointer} rigidBodyB\n///     A pointer to the rigid body B.\n/// @param {Pointer} frameInA\n///     A pointer to the transformation matrix representing the frame in A's\n///     local coordinate system.\n/// @param {Pointer} frameInB\n///     A pointer to the transformation matrix representing the frame in B's\n///     local coordinate system.\n/// @param {Real} [rotOrder]\n///     An optional parameter specifying the rotation order for the constraint.\n///     Default is RO_XYZ.\n///\n/// @return {Pointer} Returns a pointer to the created\n/// btGeneric6DofSpring2Constraint.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_create2(rigidBodyA, rigidBodyB, frameInA, frameInB[, rotOrder])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_destroy","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_destroy(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Destroys a btGeneric6DofSpring2Constraint object.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint to be destroyed.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_destroy(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getRotationalLimitMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getRotationalLimitMotor(generic6DofSpring2Constraint, index)\n///\n/// @desc\n/// Gets the rotational limit motor for a specific rotational degree of freedom\n/// in the generic 6-degree-of-freedom spring constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n///\n/// @return {Pointer} Returns a pointer to the btRotationalLimitMotor2\n/// associated with the specified rotational degree of freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getRotationalLimitMotor(generic6DofSpring2Constraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getTranslationalLimitMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getTranslationalLimitMotor(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the translational limit motor for the generic 6-degree-of-freedom\n/// spring constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Pointer} Returns a pointer to the btTranslationalLimitMotor2\n/// associated with the translational degrees of freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getTranslationalLimitMotor(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_calculateTransforms","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_calculateTransforms(generic6DofSpring2Constraint[, transA, transB])\n///\n/// @desc\n/// Calculates and updates the transforms for the specified\n/// btGeneric6DofSpring2Constraint. Optionally, the transforms can be provided\n/// using pointers transA and transB.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} [transA]\n///     A pointer to a btTransform for the first object.\n/// @param {Pointer} [transB]\n///     A pointer to a btTransform for the second object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_calculateTransforms(generic6DofSpring2Constraint[, transA, transB])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getCalculatedTransformA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getCalculatedTransformA(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the calculated transform (btTransform) for the first object associated\n/// with the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// calculated transform of the first object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getCalculatedTransformA(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getCalculatedTransformB","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getCalculatedTransformB(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the calculated transform (btTransform) for the second object associated\n/// with the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// calculated transform of the second object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getCalculatedTransformB(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getFrameOffsetA","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getFrameOffsetA(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the frame offset (btTransform) associated with the first object in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// frame offset of the first object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getFrameOffsetA(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getFrameOffsetB","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getFrameOffsetB(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the frame offset (btTransform) associated with the second object in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Pointer} Returns a pointer to the btTransform representing the\n/// frame offset of the second object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getFrameOffsetB(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAxis","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAxis(generic6DofSpring2Constraint, axisIndex, outVector3)\n///\n/// @desc\n/// Retrieves the axis vector associated with the specified rotational degree of\n/// freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} axisIndex\n///     The index of the rotational degree of freedom.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the axis vector.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAxis(generic6DofSpring2Constraint, axisIndex, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAngle","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAngle(generic6DofSpring2Constraint, index)\n///\n/// @desc\n/// Gets the angle of the specified rotational degree of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n///\n/// @return {Real} Returns the angle of the specified rotational degree of\n/// freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAngle(generic6DofSpring2Constraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getRelativePivotPosition","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getRelativePivotPosition(generic6DofSpring2Constraint, index)\n///\n/// @desc\n/// Gets the relative pivot position of the specified rotational degree of\n/// freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n///\n/// @return {Real} Returns the relative pivot position of the specified\n/// rotational degree of freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getRelativePivotPosition(generic6DofSpring2Constraint, index)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setFrames","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setFrames(generic6DofSpring2Constraint, frameA, frameB)\n///\n/// @desc\n/// Sets the frames of reference for the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} frameA\n///     A pointer to the btTransform representing the frame of reference for the\n///    first object.\n/// @param {Pointer} frameB\n///     A pointer to the btTransform representing the frame of reference for the\n///     second object.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setFrames(generic6DofSpring2Constraint, frameA, frameB)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setLinearLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setLinearLowerLimit(generic6DofSpring2Constraint, linearLower)\n///\n/// @desc\n/// Sets the lower limits for linear motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} linearLower\n///     A pointer to a btVector3 representing the lower limits for linear motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setLinearLowerLimit(generic6DofSpring2Constraint, linearLower)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getLinearLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getLinearLowerLimit(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the lower limits for linear motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the lower limits for linear motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getLinearLowerLimit(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setLinearUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setLinearUpperLimit(generic6DofSpring2Constraint, linearUpper)\n///\n/// @desc\n/// Sets the upper limits for linear motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} linearUpper\n///     A pointer to a btVector3 representing the upper limits for linear motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setLinearUpperLimit(generic6DofSpring2Constraint, linearUpper)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getLinearUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getLinearUpperLimit(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the upper limits for linear motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the upper limits for linear motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getLinearUpperLimit(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setAngularLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setAngularLowerLimit(generic6DofSpring2Constraint, angularLower)\n///\n/// @desc\n/// Sets the lower limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} angularLower\n///     A pointer to a btVector3 representing the lower limits for angular\n///     motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setAngularLowerLimit(generic6DofSpring2Constraint, angularLower)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setAngularLowerLimitReversed","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setAngularLowerLimitReversed(generic6DofSpring2Constraint, angularLower)\n///\n/// @desc\n/// Sets the reversed lower limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} angularLower\n///     A pointer to a btVector3 representing the reversed lower limits for\n///     angular motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setAngularLowerLimitReversed(generic6DofSpring2Constraint, angularLower)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAngularLowerLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAngularLowerLimit(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the lower limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the lower limits for angular motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAngularLowerLimit(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAngularLowerLimitReversed","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAngularLowerLimitReversed(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the reversed lower limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the reversed lower limits for angular\n///     motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAngularLowerLimitReversed(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setAngularUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setAngularUpperLimit(generic6DofSpring2Constraint, angularUpper)\n///\n/// @desc\n/// Sets the upper limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} angularUpper\n///     A pointer to a btVector3 representing the upper limits for angular\n///     motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setAngularUpperLimit(generic6DofSpring2Constraint, angularUpper)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setAngularUpperLimitReversed","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setAngularUpperLimitReversed(generic6DofSpring2Constraint, angularUpper)\n///\n/// @desc\n/// Sets the reversed upper limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} angularUpper\n///     A pointer to a btVector3 representing the reversed upper limits for\n///     angular motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setAngularUpperLimitReversed(generic6DofSpring2Constraint, angularUpper)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAngularUpperLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAngularUpperLimit(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the upper limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the upper limits for angular motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAngularUpperLimit(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getAngularUpperLimitReversed","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getAngularUpperLimitReversed(generic6DofSpring2Constraint, outVector3)\n///\n/// @desc\n/// Gets the reversed upper limits for angular motion in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} outVector3\n///     A pointer to a btVector3 to store the reversed upper limits for angular\n///     motion.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getAngularUpperLimitReversed(generic6DofSpring2Constraint, outVector3)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setLimit","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setLimit(generic6DofSpring2Constraint, axis, lo, hi)\n///\n/// @desc\n/// Sets the limits for a specific rotational degree of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} axis\n///     The index of the rotational degree of freedom.\n/// @param {Real} lo\n///     The lower limit for the specified rotational degree of freedom.\n/// @param {Real} hi\n///     The upper limit for the specified rotational degree of freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setLimit(generic6DofSpring2Constraint, axis, lo, hi)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setLimitReversed","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setLimitReversed(generic6DofSpring2Constraint, axis, lo, hi)\n///\n/// @desc\n/// Sets the reversed limits for a specific rotational degree of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} axis\n///     The index of the rotational degree of freedom.\n/// @param {Real} lo\n///     The lower limit for the specified rotational degree of freedom.\n/// @param {Real} hi\n///     The upper limit for the specified rotational degree of freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setLimitReversed(generic6DofSpring2Constraint, axis, lo, hi)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_isLimited","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_isLimited(generic6DofSpring2Constraint, limitIndex)\n///\n/// @desc\n/// Checks if the specified rotational degree of freedom has limits in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} limitIndex\n///     The index of the rotational degree of freedom.\n///\n/// @return {Bool} Returns true if the rotational degree of freedom has limits,\n/// false otherwise.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_isLimited(generic6DofSpring2Constraint, limitIndex)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setRotationOrder","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setRotationOrder(generic6DofSpring2Constraint, order)\n///\n/// @desc\n/// Sets the rotation order for the rotational degrees of freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} order\n///     The rotation order to set.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setRotationOrder(generic6DofSpring2Constraint, order)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_getRotationOrder","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_getRotationOrder(generic6DofSpring2Constraint)\n///\n/// @desc\n/// Gets the rotation order for the rotational degrees of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n///\n/// @return {Real} Returns the rotation order for the rotational degrees of\n/// freedom.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_getRotationOrder(generic6DofSpring2Constraint)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setAxis","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setAxis(generic6DofSpring2Constraint, axis1, axis2)\n///\n/// @desc\n/// Sets the axes for the specified degree of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Pointer} axis1\n///     A pointer to a btVector3 representing the first axis.\n/// @param {Pointer} axis2\n///     A pointer to a btVector3 representing the second axis.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setAxis(generic6DofSpring2Constraint, axis1, axis2)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setBounce","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setBounce(generic6DofSpring2Constraint, index, bounce)\n///\n/// @desc\n/// Sets the bounce factor for the specified rotational degree of freedom in the\n/// btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} bounce\n///     The bounce factor to set.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setBounce(generic6DofSpring2Constraint, index, bounce)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_enableMotor","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_enableMotor(generic6DofSpring2Constraint, index, onOff)\n///\n/// @desc\n/// Enables or disables the motor for the specified rotational degree of freedom\n/// in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Bool} onOff\n///     True to enable the motor, false to disable it.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_enableMotor(generic6DofSpring2Constraint, index, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setServo","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setServo(generic6DofSpring2Constraint, index, onOff)\n///\n/// @desc\n/// Sets whether the servo is enabled or disabled for the specified rotational\n/// degree of freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Bool} onOff\n///     True to enable the servo, false to disable it.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setServo(generic6DofSpring2Constraint, index, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setTargetVelocity","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setTargetVelocity(generic6DofSpring2Constraint, index, velocity)\n///\n/// @desc\n/// Sets the target velocity for the specified rotational degree of freedom in\n/// the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} velocity\n///     The target velocity to set.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setTargetVelocity(generic6DofSpring2Constraint, index, velocity)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setServoTarget","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setServoTarget(generic6DofSpring2Constraint, index, target)\n///\n/// @desc\n/// Sets the target for the servo for the specified rotational degree of freedom\n/// in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} target\n///     The target for the servo.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setServoTarget(generic6DofSpring2Constraint, index, target)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setMaxMotorForce","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setMaxMotorForce(generic6DofSpring2Constraint, index, force)\n///\n/// @desc\n/// Sets the maximum motor force for the specified rotational degree of freedom\n/// in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} force\n///     The maximum motor force to set.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setMaxMotorForce(generic6DofSpring2Constraint, index, force)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_enableSpring","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_enableSpring(generic6DofSpring2Constraint, index, onOff)\n///\n/// @desc\n/// Enables or disables the spring for the specified rotational degree of\n/// freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Bool} onOff\n///     True to enable the spring, false to disable it.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_enableSpring(generic6DofSpring2Constraint, index, onOff)","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setStiffness","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setStiffness(generic6DofSpring2Constraint, index, stiffness[, limitIfNeeded])\n///\n/// @desc\n/// Sets the stiffness for the spring of the specified rotational degree of\n/// freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} stiffness\n///     The stiffness to set.\n/// @param {Bool} [limitIfNeeded]\n///     True to limit the stiffness if needed. Defaults to true.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setStiffness(generic6DofSpring2Constraint, index, stiffness[, limitIfNeeded])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setDamping","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setDamping(generic6DofSpring2Constraint, index, damping[, limitIfNeeded])\n///\n/// @desc\n/// Sets the damping for the spring of the specified rotational degree of\n/// freedom in the btGeneric6DofSpring2Constraint.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} index\n///     The index of the rotational degree of freedom.\n/// @param {Real} damping\n///     The damping to set.\n/// @param {Bool} [limitIfNeeded]\n///     True to limit the damping if needed. Defaults to true.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setDamping(generic6DofSpring2Constraint, index, damping[, limitIfNeeded])","hidden":false,"kind":1,"returnType":1,},
        {"resourceType":"GMExtensionFunction","resourceVersion":"1.0","name":"btGeneric6DofSpring2Constraint_setEquilibriumPoint","argCount":0,"args":[],"documentation":"/// @func btGeneric6DofSpring2Constraint_setEquilibriumPoint(generic6DofSpring2Constraint[, index[, val]])\n///\n/// @desc\n/// Sets the equilibrium point for the specified rotational degree of freedom in\n/// the btGeneric6DofSpring2Constraint. If no index is provided, sets the\n/// equilibrium point for all degrees of freedom.\n///\n/// @param {Pointer} generic6DofSpring2Constraint\n///     A pointer to the btGeneric6DofSpring2Constraint.\n/// @param {Real} [index]\n///     The index of the rotational degree of freedom. Omit to set the\n///     equilibrium point for all degrees of freedom.\n/// @param {Real} [val]\n///     The equilibrium point to set. Omit to use the current value as the\n///     equilibrium point.\n","externalName":"","help":"btGeneric6DofSpring2Constraint_setEquilibriumPoint(generic6DofSpring2Constraint[, index[, val]])","hidden":false,"kind":1,"returnType":1,},
      ],"init":"","kind":1,"order":[
        {"name":"btBoxShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBoxShape_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBoxShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionDispatcher_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionDispatcher_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_hasAnisotropicFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setContactProcessingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactProcessingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isStaticObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isKinematicObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isStaticOrKinematicObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_hasContactResponse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCollisionShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCollisionShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setIgnoreCollisionCheck","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getNumObjectsWithoutCollision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getObjectWithoutCollision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_checkCollideWithOverride","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setDeactivationTime","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getDeactivationTime","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_forceActivationState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_activate","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_isActive","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setRollingFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getRollingFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setSpinningFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getSpinningFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setContactStiffnessAndDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getContactDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getWorldTransformMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setInterpolationAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getInterpolationAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCollisionFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCollisionFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdSweptSphereRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCcdSweptSphereRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_getCcdSquareMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_setCcdMotionThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionObject_checkCollideWith","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getBoundingSphere","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isPolyhedral","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isConvex2d","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isConvex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isNonMoving","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isConcave","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isCompound","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isSoftBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_isInfinite","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_setLocalScaling","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_setLocalScalingXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getLocalScaling","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_calculateLocalInertia","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getShapeType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getAnisotropicRollingFrictionDirection","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_setMargin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionShape_getMargin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_setBroadphase","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getBroadphase","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getPairCache","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getDispatcher","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_updateSingleAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_updateAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_computeOverlappingPairs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getClosestHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRayResultCallback_hasHit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayFromWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayFromWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayToWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getRayToWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestRayResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getCollisionObjects","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAllHitsRayResultCallback_getHitFractions","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getClosestHitFraction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConvexResultCallback_hasHit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexFromWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexFromWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexToWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getConvexToWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitNormalWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitNormalWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitPointWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitPointWorldArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestConvexResultCallback_getHitCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setCollisionFilterGroup","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setCollisionFilterMask","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_getClosestDistanceThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btContactResultCallback_setClosestDistanceThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getNumCollisionObjects","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_rayTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_rayTestXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_convexSweepTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_contactTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_contactPairTest","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_addCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_refreshBroadphaseProxy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getCollisionObjectArray","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_removeCollisionObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_performDiscreteCollisionDetection","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getDispatchInfo","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_getForceUpdateAllAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCollisionWorld_setForceUpdateAllAabbs","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDbvtBroadphase_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDbvtBroadphase_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultCollisionConfiguration_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultCollisionConfiguration_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultMotionState_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultMotionState_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_stepSimulation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_addConstraint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_removeConstraint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_addAction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_removeAction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getCollisionWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_setGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_setGravityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_addRigidBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_removeRigidBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_setConstraintSolver","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getConstraintSolver","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getNumConstraints","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getConstraint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getWorldType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_clearForces","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_applyGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDiscreteDynamicsWorld_getNonStaticRigidBodies","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromAxisAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromAxisAngleXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_createFromEuler","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_getW","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setW","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btQuaternion_setValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_upcast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_clearGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setGravityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getGravity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getLinearDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getAngularDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getLinearSleepingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getAngularSleepingThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getCollisionShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setMassProps","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setMassPropsXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getLinearFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setLinearFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getInvMass","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getMass","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_integrateVelocities","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setCenterOfMassTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralForceXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getTotalForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getTotalTorque","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getInvInertiaDiagLocal","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setInvInertiaDiagLocal","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setSleepingThresholds","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyTorque","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyForceXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyTorqueImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyTorqueImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyPushImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyPushImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getPushVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getTurnVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setPushVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setPushVelocityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setTurnVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setTurnVelocityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralPushImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyCentralPushImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyTorqueTurnImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_applyTorqueTurnImpulseXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_clearForces","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_updateInertiaTensor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getCenterOfMassPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getOrientation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getCenterOfMassTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setLinearVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setLinearVelocityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setAngularVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setAngularVelocityXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getVelocityInLocalPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getVelocityInLocalPointXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getPushVelocityInLocalPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getPushVelocityInLocalPointXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_translate","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_translateXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getMotionState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setMotionState","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setAngularFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getAngularFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_isInWorld","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_setFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRigidBody_getLocalInertia","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSequentialImpulseConstraintSolver_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSequentialImpulseConstraintSolver_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSphereShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSphereShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setIdentity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getOrigin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setOrigin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setOriginXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setRotationEuler","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_getMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTransform_setFromMatrix","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setX","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setY","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_getZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVector3_setValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_createF32","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_createF64","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_createS16","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_createU8","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_setUseDiamondSubdivision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_setUseZigzagSubdivision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_setFlipTriangleWinding","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_getVertex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_performRaycast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_buildAccelerator","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_clearAccelerator","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_getUpAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHeightfieldTerrainShape_getHeightfieldRawData","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShape_getUpAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShape_getRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShape_getHalfHeight","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShapeX_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShapeX_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShapeZ_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCapsuleShapeZ_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_getRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_getHeight","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_setConeUpIndex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShape_getConeUpIndex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShapeX_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShapeX_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShapeZ_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeShapeZ_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_getHalfExtentsWithMargin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_getHalfExtentsWithoutMargin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_getUpAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShape_getRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeX_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeX_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeX_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeZ_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeZ_createXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCylinderShapeZ_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_getUse32bitIndices","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_getUse4componentVertices","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_addTriangle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_addTriangleXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_addTrianglesFromBuffer","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_addTriangleIndices","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_getNumTriangles","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_preallocateVertices","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTriangleMesh_preallocateIndices","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestNotMeRayResultCallback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btClosestNotMeRayResultCallback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShapeChild_getTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShapeChild_getChildShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShapeChild_getChildShapeType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShapeChild_getNode","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_addChildShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_removeChildShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_removeChildShapeByIndex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_getNumChildShapes","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_getChildShape","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_getChildTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_updateChildTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_getChildList","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_recalculateLocalAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_createAabbTreeFromChildren","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_calculatePrincipalAxisTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btCompoundShape_getUpdateRevision","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_createAabb","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_createAabbXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_getOwnsBvh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_performRaycast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_performConvexcast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_processAllTriangles","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_refitTree","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_partialRefitTree","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_getOptimizedBvh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_setOptimizedBvh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_buildOptimizedBvh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btBvhTriangleMeshShape_usesQuantizedAabbCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getSuspensionCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setSuspensionCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getSuspensionDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setSuspensionDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_getMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btVehicleTuning_setMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_updateAction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getChassisWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_rayCast","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_resetSuspension","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getSteeringValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_setSteeringValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_applyEngineForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getWheelTransformWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_updateWheelTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_addWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getNumWheels","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getWheelInfo","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_updateWheelTransformsWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_setBrake","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_setPitchControl","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_updateSuspension","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_updateFriction","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getRigidBody","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getRightAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getUpAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getForwardAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getForwardVector","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_getCurrentSpeedKmHour","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastVehicle_setCoordinateSystem","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultVehicleRaycaster_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultVehicleRaycaster_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btDefaultVehicleRaycaster_castRay","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setChassisConnectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getChassisConnectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setWheelDirectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getWheelDirectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setWheelAxleCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getWheelAxleCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setSuspensionRestLength","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getSuspensionRestLength","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setMaxSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getMaxSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setWheelRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getWheelRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setWheelsDampingCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getWheelsDampingCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setWheelsDampingRelaxation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getWheelsDampingRelaxation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_setIsFrontWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfoConstructionInfo_getIsFrontWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getContactNormalWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getContactPointWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getSuspensionLength","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getHardPointWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getWheelDirectionWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getWheelAxleWS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getIsInContact","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRaycastInfo_getGroundObject","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getRaycastInfo","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWorldTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setChassisConnectionPointCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getChassisConnectionPointCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setWheelDirectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWheelDirectionCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setWheelAxleCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWheelAxleCS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setSuspensionRestLength1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getSuspensionRestLength1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setMaxSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getMaxSuspensionTravelCm","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getSuspensionRestLength","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setWheelsRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWheelsRadius","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getSuspensionStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setWheelsDampingCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWheelsDampingCompression","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setWheelsDampingRelaxation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getWheelsDampingRelaxation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getFrictionSlip","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setSteering","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getSteering","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setDeltaRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getDeltaRotation","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setRollInfluence","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getRollInfluence","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getMaxSuspensionForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setEngineForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getEngineForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setBrake","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getBrake","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_setIsFrontWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_getIsFrontWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btWheelInfo_updateWheel","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_create1Transform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_create2Transform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_updateRHS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getRigidBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getRigidBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getFrameOffsetA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getFrameOffsetB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setFrames","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setAngularOnly","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_enableAngularMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_enableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setMaxMotorImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setMotorTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setMotorTargetQuaternion","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setMotorTargetAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getLimitBiasFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getLimitRelaxationFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setAxisXYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_hasLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getHingeAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getHingeAngleTransform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_testLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getAFrame","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getBFrame","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getSolveLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getLimitSign","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getAngularOnly","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getEnableAngularMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getMotorTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getMaxMotorImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getUseReferenceFrameA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_setUseReferenceFrameA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeConstraint_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_create1Transform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_create2Transform","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_setAppliedForceBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_getAppliedForceBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_setAppliedTorqueBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_getAppliedTorqueBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_setAppliedForceBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_getAppliedForceBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_setAppliedTorqueBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btJointFeedback_getAppliedTorqueBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getOverrideNumSolverIterations","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setOverrideNumSolverIterations","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getBreakingImpulseThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setBreakingImpulseThreshold","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_isEnabled","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setEnabled","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getRigidBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getRigidBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getUserConstraintType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setUserConstraintType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setUserConstraintId","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getUserConstraintId","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setUserConstraintPtr","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getUserConstraintPtr","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setJointFeedback","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getJointFeedback","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getUid","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_needsFeedback","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_enableFeedback","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getAppliedImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getConstraintType","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_setParam","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTypedConstraint_getParam","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAdjustAngleToLimits","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_set","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_test","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getBiasFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getRelaxationFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getCorrection","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getSign","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getHalfRange","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_isLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_fit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getLow","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btAngularLimit_getHigh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_setTau","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_getTau","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_getDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_setImpulseClamp","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConstraintSetting_getImpulseClamp","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_create1XYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_create2XYZ","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_getSetting","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_updateRHS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_setPivotA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_setPivotB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_getPivotInA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_getPivotInB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btPoint2PointConstraint_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_updateRHS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getRigidBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getRigidBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setAngularOnly","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getAngularOnly","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setLimitIndex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getLimitIndex","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getAFrame","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getBFrame","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getSolveTwistLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getSolveSwingLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getTwistLimitSign","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getSwingSpan1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getSwingSpan2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getTwistSpan","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getBiasFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getRelaxationFactor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getTwistAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_isPastSwingLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_enableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_isMotorEnabled","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getMaxMotorImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_isMaxMotorImpulseNormalized","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setMaxMotorImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setMaxMotorImpulseNormalized","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getFixThresh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setFixThresh","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setMotorTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getMotorTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setMotorTargetInConstraintSpace","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_GetPointForAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_setFrames","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getFrameOffsetA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getFrameOffsetB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btConeTwistConstraint_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setLoLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getLoLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setHiLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getHiLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setMaxLimitForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getMaxLimitForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setNormalCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getNormalCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setCurrentPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getCurrentPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_setAccumulatedImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_getAccumulatedImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_needApplyTorques","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_testLimitValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor_solveAngularLimits","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setAccumulatedImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getAccumulatedImpulse","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getLimitSoftness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getRestitution","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setNormalCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getNormalCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setCurrentLinearDiff","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getCurrentLinearDiff","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_setCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_getCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_needApplyForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_testLimitValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor_solveLinearAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_calculateTransforms","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getCalculatedTransformA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getCalculatedTransformB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getFrameOffsetA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getFrameOffsetB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_updateRHS","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getRelativePivotPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setFrames","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_testAngularLimitMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setLinearLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getLinearLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setLinearUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getLinearUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setAngularLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getAngularLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setAngularUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getAngularUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getRotationalLimitMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getTranslationalLimitMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_calcAnchorPos","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getUseLinearReferenceFrameA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setUseLinearReferenceFrameA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_setAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofConstraint_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_enableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_setStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_setEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_isSpringEnabled","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_getStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_getDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_getEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpringConstraint_setAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAnchor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAnchor2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAxis1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAxis2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAngle1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_getAngle2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_setUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_setLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btUniversalConstraint_setAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRigidBodyA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRigidBodyB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getCalculatedTransformA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getCalculatedTransformB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getFrameOffsetA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getFrameOffsetB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getLowerLinLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setLowerLinLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getUpperLinLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setUpperLinLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getLowerAngLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setLowerAngLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getUpperAngLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setUpperAngLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getUseLinearReferenceFrameA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSoftnessOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getRestitutionOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getDampingOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingDirLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingDirAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingLimLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingLimAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingOrthoLin","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setSoftnessOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setRestitutionOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setDampingOrthoAng","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setPoweredLinMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getPoweredLinMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setTargetLinMotorVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getTargetLinMotorVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setMaxLinMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getMaxLinMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setPoweredAngMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getPoweredAngMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setTargetAngMotorVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getTargetAngMotorVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setMaxAngMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getMaxAngMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getLinearPos","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getAngularPos","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSolveLinLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getLinDepth","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getSolveAngLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getAngDepth","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_calculateTransforms","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_testLinLimits","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_testAngLimits","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getAncorInA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getAncorInB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setUseFrameOffset","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_setFrames","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btSliderConstraint_getFlags","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_setAxisA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_setAxisB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_setRatio","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_getAxisA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_getAxisB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGearConstraint_getRatio","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btFixedConstraint_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btFixedConstraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_create","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAnchor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAnchor2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAxis1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAxis2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAngle1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_getAngle2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_setUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btHinge2Constraint_setLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setLoLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getLoLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setHiLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getHiLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setMotorERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getMotorERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setMotorCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getMotorCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setServoMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getServoMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setServoTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getServoTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setEnableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getEnableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setSpringStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getSpringStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setSpringStiffnessLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getSpringStiffnessLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setSpringDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getSpringDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setSpringDampingLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getSpringDampingLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setCurrentLimitErrorHi","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getCurrentLimitErrorHi","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setCurrentPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getCurrentPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_setCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_getCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btRotationalLimitMotor2_testLimitValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getStopERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getStopCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setMotorERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getMotorERP","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setMotorCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getMotorCFM","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getEnableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setServoMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getServoMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setEnableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getEnableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setServoTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getServoTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setSpringStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getSpringStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setSpringStiffnessLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getSpringStiffnessLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setSpringDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getSpringDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setSpringDampingLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getSpringDampingLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getCurrentLimitError","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setCurrentLimitErrorHi","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getCurrentLimitErrorHi","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setCurrentLinearDiff","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getCurrentLinearDiff","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_setCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_getCurrentLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btTranslationalLimitMotor2_testLimitValue","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_create1","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_create2","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_destroy","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getRotationalLimitMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getTranslationalLimitMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_calculateTransforms","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getCalculatedTransformA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getCalculatedTransformB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getFrameOffsetA","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getFrameOffsetB","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAngle","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getRelativePivotPosition","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setFrames","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setLinearLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getLinearLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setLinearUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getLinearUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setAngularLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setAngularLowerLimitReversed","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAngularLowerLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAngularLowerLimitReversed","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setAngularUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setAngularUpperLimitReversed","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAngularUpperLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getAngularUpperLimitReversed","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setLimit","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setLimitReversed","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_isLimited","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setRotationOrder","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_getRotationOrder","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setAxis","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setBounce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_enableMotor","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setServo","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setTargetVelocity","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setServoTarget","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setMaxMotorForce","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_enableSpring","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setStiffness","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setDamping","path":"extensions/GMBullet/GMBullet.yy",},
        {"name":"btGeneric6DofSpring2Constraint_setEquilibriumPoint","path":"extensions/GMBullet/GMBullet.yy",},
      ],"origname":"","ProxyFiles":[
        {"resourceType":"GMProxyFile","resourceVersion":"1.0","name":"GMBullet.dll","TargetMask":6,},
      ],"uncompress":false,"usesRunnerInterface":true,},
  ],
  "gradleinject": "",
  "hasConvertedCodeInjection": true,
  "helpfile": "",
  "HTML5CodeInjection": "",
  "html5Props": false,
  "IncludedResources": [],
  "installdir": "",
  "iosCocoaPodDependencies": "",
  "iosCocoaPods": "",
  "ioscodeinjection": "",
  "iosdelegatename": "",
  "iosplistinject": "",
  "iosProps": false,
  "iosSystemFrameworkEntries": [],
  "iosThirdPartyFrameworkEntries": [],
  "license": "",
  "maccompilerflags": "",
  "maclinkerflags": "",
  "macsourcedir": "",
  "options": [],
  "optionsFile": "options.json",
  "packageId": "",
  "parent": {
    "name": "GMBullet",
    "path": "folders/Extensions/GMBullet.yy",
  },
  "productId": "",
  "sourcedir": "",
  "supportedTargets": -1,
  "tvosclassname": null,
  "tvosCocoaPodDependencies": "",
  "tvosCocoaPods": "",
  "tvoscodeinjection": "",
  "tvosdelegatename": null,
  "tvosmaccompilerflags": "",
  "tvosmaclinkerflags": "",
  "tvosplistinject": "",
  "tvosProps": false,
  "tvosSystemFrameworkEntries": [],
  "tvosThirdPartyFrameworkEntries": [],
}